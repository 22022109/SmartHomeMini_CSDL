
CSDL2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7ac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800a950  0800a950  0000b950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adb4  0800adb4  0000c1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800adb4  0800adb4  0000bdb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adbc  0800adbc  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adbc  0800adbc  0000bdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800adc0  0800adc0  0000bdc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800adc4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  200001e8  0800afac  0000c1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  0800afac  0000c5f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fda0  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c4  00000000  00000000  0001bfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  0001e380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b9d  00000000  00000000  0001f258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187a4  00000000  00000000  0001fdf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ef5  00000000  00000000  00038599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b75d  00000000  00000000  0004948e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4beb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000530c  00000000  00000000  000e4c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e9f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a934 	.word	0x0800a934

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800a934 	.word	0x0800a934

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001034:	b088      	sub	sp, #32
 8001036:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */
  target_count = 990 * spins;
 8001038:	4bb7      	ldr	r3, [pc, #732]	@ (8001318 <main+0x2e8>)
 800103a:	edd3 7a00 	vldr	s15, [r3]
 800103e:	ed9f 7ab7 	vldr	s14, [pc, #732]	@ 800131c <main+0x2ec>
 8001042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001046:	4bb6      	ldr	r3, [pc, #728]	@ (8001320 <main+0x2f0>)
 8001048:	edc3 7a00 	vstr	s15, [r3]
  max_output = kp * target_count + kd * target_count / 0.01f;
 800104c:	4bb5      	ldr	r3, [pc, #724]	@ (8001324 <main+0x2f4>)
 800104e:	ed93 7a00 	vldr	s14, [r3]
 8001052:	4bb3      	ldr	r3, [pc, #716]	@ (8001320 <main+0x2f0>)
 8001054:	edd3 7a00 	vldr	s15, [r3]
 8001058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800105c:	4bb2      	ldr	r3, [pc, #712]	@ (8001328 <main+0x2f8>)
 800105e:	edd3 6a00 	vldr	s13, [r3]
 8001062:	4baf      	ldr	r3, [pc, #700]	@ (8001320 <main+0x2f0>)
 8001064:	edd3 7a00 	vldr	s15, [r3]
 8001068:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800106c:	ed9f 6aaf 	vldr	s12, [pc, #700]	@ 800132c <main+0x2fc>
 8001070:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001078:	4bad      	ldr	r3, [pc, #692]	@ (8001330 <main+0x300>)
 800107a:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107e:	f001 f94b 	bl	8002318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001082:	f000 f981 	bl	8001388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001086:	f000 fc0b 	bl	80018a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800108a:	f000 fbe9 	bl	8001860 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800108e:	f000 fbbd 	bl	800180c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001092:	f000 f9e5 	bl	8001460 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001096:	f000 fa51 	bl	800153c <MX_TIM1_Init>
  MX_TIM2_Init();
 800109a:	f000 faf1 	bl	8001680 <MX_TIM2_Init>
  MX_TIM3_Init();
 800109e:	f000 fb3d 	bl	800171c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010a8:	48a2      	ldr	r0, [pc, #648]	@ (8001334 <main+0x304>)
 80010aa:	f002 fe27 	bl	8003cfc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010b4:	489f      	ldr	r0, [pc, #636]	@ (8001334 <main+0x304>)
 80010b6:	f002 fe21 	bl	8003cfc <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80010ba:	2100      	movs	r1, #0
 80010bc:	489e      	ldr	r0, [pc, #632]	@ (8001338 <main+0x308>)
 80010be:	f003 fbf3 	bl	80048a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80010c2:	2100      	movs	r1, #0
 80010c4:	489d      	ldr	r0, [pc, #628]	@ (800133c <main+0x30c>)
 80010c6:	f003 fbef 	bl	80048a8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80010ca:	489d      	ldr	r0, [pc, #628]	@ (8001340 <main+0x310>)
 80010cc:	f003 fb30 	bl	8004730 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)AD_RES_BUFFER, 3);
 80010d0:	2203      	movs	r2, #3
 80010d2:	499c      	ldr	r1, [pc, #624]	@ (8001344 <main+0x314>)
 80010d4:	489c      	ldr	r0, [pc, #624]	@ (8001348 <main+0x318>)
 80010d6:	f001 fbbd 	bl	8002854 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 80010da:	2201      	movs	r2, #1
 80010dc:	499b      	ldr	r1, [pc, #620]	@ (800134c <main+0x31c>)
 80010de:	489c      	ldr	r0, [pc, #624]	@ (8001350 <main+0x320>)
 80010e0:	f004 fbb5 	bl	800584e <HAL_UART_Receive_IT>

  // Wait for ADC to stabilize
  HAL_Delay(100); // Brief delay to allow ADC to settle
 80010e4:	2064      	movs	r0, #100	@ 0x64
 80010e6:	f001 f989 	bl	80023fc <HAL_Delay>
  for (int i = 0; i < 10; i++) {
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	e008      	b.n	8001102 <main+0xd2>
      HAL_ADC_Start(&hadc1); // Trigger a few conversions
 80010f0:	4895      	ldr	r0, [pc, #596]	@ (8001348 <main+0x318>)
 80010f2:	f001 f9eb 	bl	80024cc <HAL_ADC_Start>
      HAL_Delay(10);
 80010f6:	200a      	movs	r0, #10
 80010f8:	f001 f980 	bl	80023fc <HAL_Delay>
  for (int i = 0; i < 10; i++) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3301      	adds	r3, #1
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b09      	cmp	r3, #9
 8001106:	ddf3      	ble.n	80010f0 <main+0xc0>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Tính nhiệt độ (LM35: 10mV/°C, Vref = 3.3V, 12-bit ADC)
	  temperature = AD_RES_BUFFER[2] * 3.3f / 4096.0f / 0.01f;
 8001108:	4b8e      	ldr	r3, [pc, #568]	@ (8001344 <main+0x314>)
 800110a:	889b      	ldrh	r3, [r3, #4]
 800110c:	ee07 3a90 	vmov	s15, r3
 8001110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001114:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8001354 <main+0x324>
 8001118:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111c:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 8001358 <main+0x328>
 8001120:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001124:	eddf 6a81 	vldr	s13, [pc, #516]	@ 800132c <main+0x2fc>
 8001128:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112c:	4b8b      	ldr	r3, [pc, #556]	@ (800135c <main+0x32c>)
 800112e:	edc3 7a00 	vstr	s15, [r3]
	  light = AD_RES_BUFFER[1];
 8001132:	4b84      	ldr	r3, [pc, #528]	@ (8001344 <main+0x314>)
 8001134:	885a      	ldrh	r2, [r3, #2]
 8001136:	4b8a      	ldr	r3, [pc, #552]	@ (8001360 <main+0x330>)
 8001138:	801a      	strh	r2, [r3, #0]
	  gas = AD_RES_BUFFER[0];
 800113a:	4b82      	ldr	r3, [pc, #520]	@ (8001344 <main+0x314>)
 800113c:	881a      	ldrh	r2, [r3, #0]
 800113e:	4b89      	ldr	r3, [pc, #548]	@ (8001364 <main+0x334>)
 8001140:	801a      	strh	r2, [r3, #0]

	  filtered_light = light * 0.06 + 0.94 * filtered_light;
 8001142:	4b87      	ldr	r3, [pc, #540]	@ (8001360 <main+0x330>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9f4 	bl	8000534 <__aeabi_i2d>
 800114c:	a36e      	add	r3, pc, #440	@ (adr r3, 8001308 <main+0x2d8>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff fa59 	bl	8000608 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4614      	mov	r4, r2
 800115c:	461d      	mov	r5, r3
 800115e:	4b82      	ldr	r3, [pc, #520]	@ (8001368 <main+0x338>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f9e6 	bl	8000534 <__aeabi_i2d>
 8001168:	a369      	add	r3, pc, #420	@ (adr r3, 8001310 <main+0x2e0>)
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff fa4b 	bl	8000608 <__aeabi_dmul>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4620      	mov	r0, r4
 8001178:	4629      	mov	r1, r5
 800117a:	f7ff f88f 	bl	800029c <__adddf3>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fd17 	bl	8000bb8 <__aeabi_d2uiz>
 800118a:	4603      	mov	r3, r0
 800118c:	b29a      	uxth	r2, r3
 800118e:	4b76      	ldr	r3, [pc, #472]	@ (8001368 <main+0x338>)
 8001190:	801a      	strh	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (filtered_light > 1400 && !spun && !spinning_forward)
 8001192:	4b75      	ldr	r3, [pc, #468]	@ (8001368 <main+0x338>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 800119a:	d91a      	bls.n	80011d2 <main+0x1a2>
 800119c:	4b73      	ldr	r3, [pc, #460]	@ (800136c <main+0x33c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d116      	bne.n	80011d2 <main+0x1a2>
 80011a4:	4b72      	ldr	r3, [pc, #456]	@ (8001370 <main+0x340>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d112      	bne.n	80011d2 <main+0x1a2>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011b2:	4860      	ldr	r0, [pc, #384]	@ (8001334 <main+0x304>)
 80011b4:	f002 fda2 	bl	8003cfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011be:	485d      	ldr	r0, [pc, #372]	@ (8001334 <main+0x304>)
 80011c0:	f002 fd9c 	bl	8003cfc <HAL_GPIO_WritePin>
		  spinning_forward = 1;
 80011c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001370 <main+0x340>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]
		  spinning_backward = 0;
 80011ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001374 <main+0x344>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	e01e      	b.n	8001210 <main+0x1e0>
	  }
	  else if (filtered_light <= 1400 && spun && !spinning_backward)
 80011d2:	4b65      	ldr	r3, [pc, #404]	@ (8001368 <main+0x338>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 80011da:	d819      	bhi.n	8001210 <main+0x1e0>
 80011dc:	4b63      	ldr	r3, [pc, #396]	@ (800136c <main+0x33c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d015      	beq.n	8001210 <main+0x1e0>
 80011e4:	4b63      	ldr	r3, [pc, #396]	@ (8001374 <main+0x344>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d111      	bne.n	8001210 <main+0x1e0>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011f2:	4850      	ldr	r0, [pc, #320]	@ (8001334 <main+0x304>)
 80011f4:	f002 fd82 	bl	8003cfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011fe:	484d      	ldr	r0, [pc, #308]	@ (8001334 <main+0x304>)
 8001200:	f002 fd7c 	bl	8003cfc <HAL_GPIO_WritePin>
		  spinning_forward = 0;
 8001204:	4b5a      	ldr	r3, [pc, #360]	@ (8001370 <main+0x340>)
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
		  spinning_backward = 1;
 800120a:	4b5a      	ldr	r3, [pc, #360]	@ (8001374 <main+0x344>)
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]
	  }

	  if (stop_motor_flag)
 8001210:	4b59      	ldr	r3, [pc, #356]	@ (8001378 <main+0x348>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <main+0x1ee>
	  {
		  stop_motor_flag = 0;  // Clear flag
 8001218:	4b57      	ldr	r3, [pc, #348]	@ (8001378 <main+0x348>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
	  }

	  if (gas > 1000)
 800121e:	4b51      	ldr	r3, [pc, #324]	@ (8001364 <main+0x334>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001226:	d902      	bls.n	800122e <main+0x1fe>
	  {
	  	  Buzzer_On(200); // turn on buzzer for 200ms
 8001228:	20c8      	movs	r0, #200	@ 0xc8
 800122a:	f000 fcd5 	bl	8001bd8 <Buzzer_On>
	  }

	  Buzzer_Update();
 800122e:	f000 fcef 	bl	8001c10 <Buzzer_Update>

	  uint32_t pwm_duty;

	  if (temperature < desired_temperature)
 8001232:	4b4a      	ldr	r3, [pc, #296]	@ (800135c <main+0x32c>)
 8001234:	ed93 7a00 	vldr	s14, [r3]
 8001238:	4b50      	ldr	r3, [pc, #320]	@ (800137c <main+0x34c>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001246:	d502      	bpl.n	800124e <main+0x21e>
	  {
		  pwm_duty = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	e028      	b.n	80012a0 <main+0x270>
	  }
	  else if (temperature < desired_temperature + 5.0f)
 800124e:	4b4b      	ldr	r3, [pc, #300]	@ (800137c <main+0x34c>)
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001258:	ee37 7a87 	vadd.f32	s14, s15, s14
 800125c:	4b3f      	ldr	r3, [pc, #252]	@ (800135c <main+0x32c>)
 800125e:	edd3 7a00 	vldr	s15, [r3]
 8001262:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126a:	dd03      	ble.n	8001274 <main+0x244>
	  {
		  pwm_duty = 400;  // 40% of 1000
 800126c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	e015      	b.n	80012a0 <main+0x270>
	  }
	  else if (temperature < desired_temperature + 10.0f)
 8001274:	4b41      	ldr	r3, [pc, #260]	@ (800137c <main+0x34c>)
 8001276:	edd3 7a00 	vldr	s15, [r3]
 800127a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800127e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001282:	4b36      	ldr	r3, [pc, #216]	@ (800135c <main+0x32c>)
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800128c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001290:	dd03      	ble.n	800129a <main+0x26a>
	  {
		  pwm_duty = 600;  // 60% of 1000
 8001292:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	e002      	b.n	80012a0 <main+0x270>
	  }
	  else
	  {
		  pwm_duty = 800;  // 80% of 1000
 800129a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800129e:	603b      	str	r3, [r7, #0]
	  }

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_duty);
 80012a0:	4b26      	ldr	r3, [pc, #152]	@ (800133c <main+0x30c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	635a      	str	r2, [r3, #52]	@ 0x34

	  sprintf(message, "%u, %u, %u, %.2f, %.2f\r\n", light, gas, pwm_duty, desired_temperature, temperature);
 80012a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001360 <main+0x330>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	461e      	mov	r6, r3
 80012ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001364 <main+0x334>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	4698      	mov	r8, r3
 80012b4:	4b31      	ldr	r3, [pc, #196]	@ (800137c <main+0x34c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f94d 	bl	8000558 <__aeabi_f2d>
 80012be:	4604      	mov	r4, r0
 80012c0:	460d      	mov	r5, r1
 80012c2:	4b26      	ldr	r3, [pc, #152]	@ (800135c <main+0x32c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f946 	bl	8000558 <__aeabi_f2d>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012d4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	4643      	mov	r3, r8
 80012de:	4632      	mov	r2, r6
 80012e0:	4927      	ldr	r1, [pc, #156]	@ (8001380 <main+0x350>)
 80012e2:	4828      	ldr	r0, [pc, #160]	@ (8001384 <main+0x354>)
 80012e4:	f006 fd70 	bl	8007dc8 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 100);
 80012e8:	4826      	ldr	r0, [pc, #152]	@ (8001384 <main+0x354>)
 80012ea:	f7fe ffc9 	bl	8000280 <strlen>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	2364      	movs	r3, #100	@ 0x64
 80012f4:	4923      	ldr	r1, [pc, #140]	@ (8001384 <main+0x354>)
 80012f6:	4816      	ldr	r0, [pc, #88]	@ (8001350 <main+0x320>)
 80012f8:	f004 fa1e 	bl	8005738 <HAL_UART_Transmit>

	  HAL_Delay(100);
 80012fc:	2064      	movs	r0, #100	@ 0x64
 80012fe:	f001 f87d 	bl	80023fc <HAL_Delay>
  {
 8001302:	e701      	b.n	8001108 <main+0xd8>
 8001304:	f3af 8000 	nop.w
 8001308:	eb851eb8 	.word	0xeb851eb8
 800130c:	3faeb851 	.word	0x3faeb851
 8001310:	e147ae14 	.word	0xe147ae14
 8001314:	3fee147a 	.word	0x3fee147a
 8001318:	20000010 	.word	0x20000010
 800131c:	44778000 	.word	0x44778000
 8001320:	2000047c 	.word	0x2000047c
 8001324:	20000004 	.word	0x20000004
 8001328:	2000000c 	.word	0x2000000c
 800132c:	3c23d70a 	.word	0x3c23d70a
 8001330:	20000480 	.word	0x20000480
 8001334:	40020000 	.word	0x40020000
 8001338:	200002ac 	.word	0x200002ac
 800133c:	2000033c 	.word	0x2000033c
 8001340:	200002f4 	.word	0x200002f4
 8001344:	200003cc 	.word	0x200003cc
 8001348:	20000204 	.word	0x20000204
 800134c:	200003e4 	.word	0x200003e4
 8001350:	20000384 	.word	0x20000384
 8001354:	40533333 	.word	0x40533333
 8001358:	45800000 	.word	0x45800000
 800135c:	200003d8 	.word	0x200003d8
 8001360:	200003d2 	.word	0x200003d2
 8001364:	200003d6 	.word	0x200003d6
 8001368:	200003d4 	.word	0x200003d4
 800136c:	20000468 	.word	0x20000468
 8001370:	20000460 	.word	0x20000460
 8001374:	20000464 	.word	0x20000464
 8001378:	2000045c 	.word	0x2000045c
 800137c:	20000000 	.word	0x20000000
 8001380:	0800a950 	.word	0x0800a950
 8001384:	200003f4 	.word	0x200003f4

08001388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b094      	sub	sp, #80	@ 0x50
 800138c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138e:	f107 0320 	add.w	r3, r7, #32
 8001392:	2230      	movs	r2, #48	@ 0x30
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f006 fd7b 	bl	8007e92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	4b29      	ldr	r3, [pc, #164]	@ (8001458 <SystemClock_Config+0xd0>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	4a28      	ldr	r2, [pc, #160]	@ (8001458 <SystemClock_Config+0xd0>)
 80013b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80013bc:	4b26      	ldr	r3, [pc, #152]	@ (8001458 <SystemClock_Config+0xd0>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	4b23      	ldr	r3, [pc, #140]	@ (800145c <SystemClock_Config+0xd4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013d4:	4a21      	ldr	r2, [pc, #132]	@ (800145c <SystemClock_Config+0xd4>)
 80013d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b1f      	ldr	r3, [pc, #124]	@ (800145c <SystemClock_Config+0xd4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e8:	2301      	movs	r3, #1
 80013ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f2:	2302      	movs	r3, #2
 80013f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013fc:	2308      	movs	r3, #8
 80013fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001400:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001404:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001406:	2304      	movs	r3, #4
 8001408:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800140a:	2307      	movs	r3, #7
 800140c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140e:	f107 0320 	add.w	r3, r7, #32
 8001412:	4618      	mov	r0, r3
 8001414:	f002 fca4 	bl	8003d60 <HAL_RCC_OscConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800141e:	f000 fc69 	bl	8001cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001422:	230f      	movs	r3, #15
 8001424:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001426:	2302      	movs	r3, #2
 8001428:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800142e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001432:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	2102      	movs	r1, #2
 800143e:	4618      	mov	r0, r3
 8001440:	f002 ff06 	bl	8004250 <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800144a:	f000 fc53 	bl	8001cf4 <Error_Handler>
  }
}
 800144e:	bf00      	nop
 8001450:	3750      	adds	r7, #80	@ 0x50
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40007000 	.word	0x40007000

08001460 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001466:	463b      	mov	r3, r7
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001472:	4b2f      	ldr	r3, [pc, #188]	@ (8001530 <MX_ADC1_Init+0xd0>)
 8001474:	4a2f      	ldr	r2, [pc, #188]	@ (8001534 <MX_ADC1_Init+0xd4>)
 8001476:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001478:	4b2d      	ldr	r3, [pc, #180]	@ (8001530 <MX_ADC1_Init+0xd0>)
 800147a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800147e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001480:	4b2b      	ldr	r3, [pc, #172]	@ (8001530 <MX_ADC1_Init+0xd0>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001486:	4b2a      	ldr	r3, [pc, #168]	@ (8001530 <MX_ADC1_Init+0xd0>)
 8001488:	2201      	movs	r2, #1
 800148a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800148c:	4b28      	ldr	r3, [pc, #160]	@ (8001530 <MX_ADC1_Init+0xd0>)
 800148e:	2201      	movs	r2, #1
 8001490:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001492:	4b27      	ldr	r3, [pc, #156]	@ (8001530 <MX_ADC1_Init+0xd0>)
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149a:	4b25      	ldr	r3, [pc, #148]	@ (8001530 <MX_ADC1_Init+0xd0>)
 800149c:	2200      	movs	r2, #0
 800149e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a0:	4b23      	ldr	r3, [pc, #140]	@ (8001530 <MX_ADC1_Init+0xd0>)
 80014a2:	4a25      	ldr	r2, [pc, #148]	@ (8001538 <MX_ADC1_Init+0xd8>)
 80014a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a6:	4b22      	ldr	r3, [pc, #136]	@ (8001530 <MX_ADC1_Init+0xd0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80014ac:	4b20      	ldr	r3, [pc, #128]	@ (8001530 <MX_ADC1_Init+0xd0>)
 80014ae:	2203      	movs	r2, #3
 80014b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001530 <MX_ADC1_Init+0xd0>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80014ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <MX_ADC1_Init+0xd0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c0:	481b      	ldr	r0, [pc, #108]	@ (8001530 <MX_ADC1_Init+0xd0>)
 80014c2:	f000 ffbf 	bl	8002444 <HAL_ADC_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014cc:	f000 fc12 	bl	8001cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80014d8:	2307      	movs	r3, #7
 80014da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014dc:	463b      	mov	r3, r7
 80014de:	4619      	mov	r1, r3
 80014e0:	4813      	ldr	r0, [pc, #76]	@ (8001530 <MX_ADC1_Init+0xd0>)
 80014e2:	f001 fac9 	bl	8002a78 <HAL_ADC_ConfigChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014ec:	f000 fc02 	bl	8001cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014f0:	2301      	movs	r3, #1
 80014f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f8:	463b      	mov	r3, r7
 80014fa:	4619      	mov	r1, r3
 80014fc:	480c      	ldr	r0, [pc, #48]	@ (8001530 <MX_ADC1_Init+0xd0>)
 80014fe:	f001 fabb 	bl	8002a78 <HAL_ADC_ConfigChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001508:	f000 fbf4 	bl	8001cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800150c:	2304      	movs	r3, #4
 800150e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001510:	2303      	movs	r3, #3
 8001512:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_ADC1_Init+0xd0>)
 800151a:	f001 faad 	bl	8002a78 <HAL_ADC_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001524:	f000 fbe6 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000204 	.word	0x20000204
 8001534:	40012000 	.word	0x40012000
 8001538:	0f000001 	.word	0x0f000001

0800153c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b096      	sub	sp, #88	@ 0x58
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001542:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800155a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]
 800156a:	615a      	str	r2, [r3, #20]
 800156c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2220      	movs	r2, #32
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f006 fc8c 	bl	8007e92 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800157a:	4b3f      	ldr	r3, [pc, #252]	@ (8001678 <MX_TIM1_Init+0x13c>)
 800157c:	4a3f      	ldr	r2, [pc, #252]	@ (800167c <MX_TIM1_Init+0x140>)
 800157e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001580:	4b3d      	ldr	r3, [pc, #244]	@ (8001678 <MX_TIM1_Init+0x13c>)
 8001582:	2253      	movs	r2, #83	@ 0x53
 8001584:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001586:	4b3c      	ldr	r3, [pc, #240]	@ (8001678 <MX_TIM1_Init+0x13c>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800158c:	4b3a      	ldr	r3, [pc, #232]	@ (8001678 <MX_TIM1_Init+0x13c>)
 800158e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001592:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001594:	4b38      	ldr	r3, [pc, #224]	@ (8001678 <MX_TIM1_Init+0x13c>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800159a:	4b37      	ldr	r3, [pc, #220]	@ (8001678 <MX_TIM1_Init+0x13c>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a0:	4b35      	ldr	r3, [pc, #212]	@ (8001678 <MX_TIM1_Init+0x13c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015a6:	4834      	ldr	r0, [pc, #208]	@ (8001678 <MX_TIM1_Init+0x13c>)
 80015a8:	f003 f872 	bl	8004690 <HAL_TIM_Base_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80015b2:	f000 fb9f 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015bc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015c0:	4619      	mov	r1, r3
 80015c2:	482d      	ldr	r0, [pc, #180]	@ (8001678 <MX_TIM1_Init+0x13c>)
 80015c4:	f003 fbd2 	bl	8004d6c <HAL_TIM_ConfigClockSource>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015ce:	f000 fb91 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015d2:	4829      	ldr	r0, [pc, #164]	@ (8001678 <MX_TIM1_Init+0x13c>)
 80015d4:	f003 f90e 	bl	80047f4 <HAL_TIM_PWM_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80015de:	f000 fb89 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015ee:	4619      	mov	r1, r3
 80015f0:	4821      	ldr	r0, [pc, #132]	@ (8001678 <MX_TIM1_Init+0x13c>)
 80015f2:	f003 ff7d 	bl	80054f0 <HAL_TIMEx_MasterConfigSynchronization>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015fc:	f000 fb7a 	bl	8001cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001600:	2360      	movs	r3, #96	@ 0x60
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 999;
 8001604:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001608:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800160e:	2300      	movs	r3, #0
 8001610:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800161e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001622:	2200      	movs	r2, #0
 8001624:	4619      	mov	r1, r3
 8001626:	4814      	ldr	r0, [pc, #80]	@ (8001678 <MX_TIM1_Init+0x13c>)
 8001628:	f003 fade 	bl	8004be8 <HAL_TIM_PWM_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001632:	f000 fb5f 	bl	8001cf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800164a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800164e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	4619      	mov	r1, r3
 8001658:	4807      	ldr	r0, [pc, #28]	@ (8001678 <MX_TIM1_Init+0x13c>)
 800165a:	f003 ffb7 	bl	80055cc <HAL_TIMEx_ConfigBreakDeadTime>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001664:	f000 fb46 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001668:	4803      	ldr	r0, [pc, #12]	@ (8001678 <MX_TIM1_Init+0x13c>)
 800166a:	f000 fc43 	bl	8001ef4 <HAL_TIM_MspPostInit>

}
 800166e:	bf00      	nop
 8001670:	3758      	adds	r7, #88	@ 0x58
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200002ac 	.word	0x200002ac
 800167c:	40010000 	.word	0x40010000

08001680 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001694:	463b      	mov	r3, r7
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800169c:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <MX_TIM2_Init+0x98>)
 800169e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80016a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <MX_TIM2_Init+0x98>)
 80016a6:	f240 3247 	movw	r2, #839	@ 0x347
 80016aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <MX_TIM2_Init+0x98>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80016b2:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <MX_TIM2_Init+0x98>)
 80016b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ba:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <MX_TIM2_Init+0x98>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c0:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <MX_TIM2_Init+0x98>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016c6:	4814      	ldr	r0, [pc, #80]	@ (8001718 <MX_TIM2_Init+0x98>)
 80016c8:	f002 ffe2 	bl	8004690 <HAL_TIM_Base_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016d2:	f000 fb0f 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016dc:	f107 0308 	add.w	r3, r7, #8
 80016e0:	4619      	mov	r1, r3
 80016e2:	480d      	ldr	r0, [pc, #52]	@ (8001718 <MX_TIM2_Init+0x98>)
 80016e4:	f003 fb42 	bl	8004d6c <HAL_TIM_ConfigClockSource>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016ee:	f000 fb01 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016fa:	463b      	mov	r3, r7
 80016fc:	4619      	mov	r1, r3
 80016fe:	4806      	ldr	r0, [pc, #24]	@ (8001718 <MX_TIM2_Init+0x98>)
 8001700:	f003 fef6 	bl	80054f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800170a:	f000 faf3 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200002f4 	.word	0x200002f4

0800171c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08e      	sub	sp, #56	@ 0x38
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001722:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001730:	f107 0320 	add.w	r3, r7, #32
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
 8001748:	615a      	str	r2, [r3, #20]
 800174a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800174c:	4b2d      	ldr	r3, [pc, #180]	@ (8001804 <MX_TIM3_Init+0xe8>)
 800174e:	4a2e      	ldr	r2, [pc, #184]	@ (8001808 <MX_TIM3_Init+0xec>)
 8001750:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8001752:	4b2c      	ldr	r3, [pc, #176]	@ (8001804 <MX_TIM3_Init+0xe8>)
 8001754:	f240 3247 	movw	r2, #839	@ 0x347
 8001758:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175a:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <MX_TIM3_Init+0xe8>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001760:	4b28      	ldr	r3, [pc, #160]	@ (8001804 <MX_TIM3_Init+0xe8>)
 8001762:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001766:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001768:	4b26      	ldr	r3, [pc, #152]	@ (8001804 <MX_TIM3_Init+0xe8>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176e:	4b25      	ldr	r3, [pc, #148]	@ (8001804 <MX_TIM3_Init+0xe8>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001774:	4823      	ldr	r0, [pc, #140]	@ (8001804 <MX_TIM3_Init+0xe8>)
 8001776:	f002 ff8b 	bl	8004690 <HAL_TIM_Base_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001780:	f000 fab8 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001784:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001788:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800178a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800178e:	4619      	mov	r1, r3
 8001790:	481c      	ldr	r0, [pc, #112]	@ (8001804 <MX_TIM3_Init+0xe8>)
 8001792:	f003 faeb 	bl	8004d6c <HAL_TIM_ConfigClockSource>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800179c:	f000 faaa 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017a0:	4818      	ldr	r0, [pc, #96]	@ (8001804 <MX_TIM3_Init+0xe8>)
 80017a2:	f003 f827 	bl	80047f4 <HAL_TIM_PWM_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80017ac:	f000 faa2 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017b8:	f107 0320 	add.w	r3, r7, #32
 80017bc:	4619      	mov	r1, r3
 80017be:	4811      	ldr	r0, [pc, #68]	@ (8001804 <MX_TIM3_Init+0xe8>)
 80017c0:	f003 fe96 	bl	80054f0 <HAL_TIMEx_MasterConfigSynchronization>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80017ca:	f000 fa93 	bl	8001cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ce:	2360      	movs	r3, #96	@ 0x60
 80017d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	2200      	movs	r2, #0
 80017e2:	4619      	mov	r1, r3
 80017e4:	4807      	ldr	r0, [pc, #28]	@ (8001804 <MX_TIM3_Init+0xe8>)
 80017e6:	f003 f9ff 	bl	8004be8 <HAL_TIM_PWM_ConfigChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80017f0:	f000 fa80 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017f4:	4803      	ldr	r0, [pc, #12]	@ (8001804 <MX_TIM3_Init+0xe8>)
 80017f6:	f000 fb7d 	bl	8001ef4 <HAL_TIM_MspPostInit>

}
 80017fa:	bf00      	nop
 80017fc:	3738      	adds	r7, #56	@ 0x38
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000033c 	.word	0x2000033c
 8001808:	40000400 	.word	0x40000400

0800180c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001812:	4a12      	ldr	r2, [pc, #72]	@ (800185c <MX_USART2_UART_Init+0x50>)
 8001814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800181c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800181e:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001830:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001832:	220c      	movs	r2, #12
 8001834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001836:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001844:	f003 ff28 	bl	8005698 <HAL_UART_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800184e:	f000 fa51 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000384 	.word	0x20000384
 800185c:	40004400 	.word	0x40004400

08001860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <MX_DMA_Init+0x3c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	4a0b      	ldr	r2, [pc, #44]	@ (800189c <MX_DMA_Init+0x3c>)
 8001870:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001874:	6313      	str	r3, [r2, #48]	@ 0x30
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <MX_DMA_Init+0x3c>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	2038      	movs	r0, #56	@ 0x38
 8001888:	f001 fc7b 	bl	8003182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800188c:	2038      	movs	r0, #56	@ 0x38
 800188e:	f001 fc94 	bl	80031ba <HAL_NVIC_EnableIRQ>

}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800

080018a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	@ 0x28
 80018a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b39      	ldr	r3, [pc, #228]	@ (80019a0 <MX_GPIO_Init+0x100>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a38      	ldr	r2, [pc, #224]	@ (80019a0 <MX_GPIO_Init+0x100>)
 80018c0:	f043 0304 	orr.w	r3, r3, #4
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b36      	ldr	r3, [pc, #216]	@ (80019a0 <MX_GPIO_Init+0x100>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b32      	ldr	r3, [pc, #200]	@ (80019a0 <MX_GPIO_Init+0x100>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a31      	ldr	r2, [pc, #196]	@ (80019a0 <MX_GPIO_Init+0x100>)
 80018dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b2f      	ldr	r3, [pc, #188]	@ (80019a0 <MX_GPIO_Init+0x100>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b2b      	ldr	r3, [pc, #172]	@ (80019a0 <MX_GPIO_Init+0x100>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	4a2a      	ldr	r2, [pc, #168]	@ (80019a0 <MX_GPIO_Init+0x100>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fe:	4b28      	ldr	r3, [pc, #160]	@ (80019a0 <MX_GPIO_Init+0x100>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <MX_GPIO_Init+0x100>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	4a23      	ldr	r2, [pc, #140]	@ (80019a0 <MX_GPIO_Init+0x100>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	6313      	str	r3, [r2, #48]	@ 0x30
 800191a:	4b21      	ldr	r3, [pc, #132]	@ (80019a0 <MX_GPIO_Init+0x100>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	f44f 6142 	mov.w	r1, #3104	@ 0xc20
 800192c:	481d      	ldr	r0, [pc, #116]	@ (80019a4 <MX_GPIO_Init+0x104>)
 800192e:	f002 f9e5 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001932:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001938:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800193c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4817      	ldr	r0, [pc, #92]	@ (80019a8 <MX_GPIO_Init+0x108>)
 800194a:	f002 f853 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10|GPIO_PIN_11;
 800194e:	f44f 6342 	mov.w	r3, #3104	@ 0xc20
 8001952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	2301      	movs	r3, #1
 8001956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4619      	mov	r1, r3
 8001966:	480f      	ldr	r0, [pc, #60]	@ (80019a4 <MX_GPIO_Init+0x104>)
 8001968:	f002 f844 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800196c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001972:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001978:	2301      	movs	r3, #1
 800197a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	4808      	ldr	r0, [pc, #32]	@ (80019a4 <MX_GPIO_Init+0x104>)
 8001984:	f002 f836 	bl	80039f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	2017      	movs	r0, #23
 800198e:	f001 fbf8 	bl	8003182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001992:	2017      	movs	r0, #23
 8001994:	f001 fc11 	bl	80031ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001998:	bf00      	nop
 800199a:	3728      	adds	r7, #40	@ 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40020800 	.word	0x40020800

080019ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	if ((filtered_light > 1400 && spinning_forward) || (filtered_light <= 1400 && spinning_backward)) {
 80019b4:	4b45      	ldr	r3, [pc, #276]	@ (8001acc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 80019bc:	d903      	bls.n	80019c6 <HAL_TIM_PeriodElapsedCallback+0x1a>
 80019be:	4b44      	ldr	r3, [pc, #272]	@ (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d108      	bne.n	80019d8 <HAL_TIM_PeriodElapsedCallback+0x2c>
 80019c6:	4b41      	ldr	r3, [pc, #260]	@ (8001acc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 80019ce:	d877      	bhi.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x114>
 80019d0:	4b40      	ldr	r3, [pc, #256]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d073      	beq.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x114>
	        // PID Control
	        error = target_count - pulse_count;
 80019d8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80019da:	ed93 7a00 	vldr	s14, [r3]
 80019de:	4b3f      	ldr	r3, [pc, #252]	@ (8001adc <HAL_TIM_PeriodElapsedCallback+0x130>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ee:	4b3c      	ldr	r3, [pc, #240]	@ (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80019f0:	edc3 7a00 	vstr	s15, [r3]
	        float T0 = 0.01f; // Sampling period (10ms)
 80019f4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80019f6:	60fb      	str	r3, [r7, #12]

	        // Calculate PID terms
	        derivative = (error - prev_error) / T0; // Rate of change of error
 80019f8:	4b39      	ldr	r3, [pc, #228]	@ (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80019fa:	ed93 7a00 	vldr	s14, [r3]
 80019fe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a08:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a10:	4b36      	ldr	r3, [pc, #216]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001a12:	edc3 7a00 	vstr	s15, [r3]
	        integral += error * T0; // Accumulate error over time
 8001a16:	4b32      	ldr	r3, [pc, #200]	@ (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001a18:	ed93 7a00 	vldr	s14, [r3]
 8001a1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a24:	4b32      	ldr	r3, [pc, #200]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001a26:	edd3 7a00 	vldr	s15, [r3]
 8001a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2e:	4b30      	ldr	r3, [pc, #192]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001a30:	edc3 7a00 	vstr	s15, [r3]
	        control_output = kp * error + ki * integral + kd * derivative;
 8001a34:	4b2f      	ldr	r3, [pc, #188]	@ (8001af4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001a36:	ed93 7a00 	vldr	s14, [r3]
 8001a3a:	4b29      	ldr	r3, [pc, #164]	@ (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a44:	4b2c      	ldr	r3, [pc, #176]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001a46:	edd3 6a00 	vldr	s13, [r3]
 8001a4a:	4b29      	ldr	r3, [pc, #164]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001a4c:	edd3 7a00 	vldr	s15, [r3]
 8001a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a58:	4b28      	ldr	r3, [pc, #160]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001a5a:	edd3 6a00 	vldr	s13, [r3]
 8001a5e:	4b23      	ldr	r3, [pc, #140]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a6c:	4b24      	ldr	r3, [pc, #144]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001a6e:	edc3 7a00 	vstr	s15, [r3]

	        // Clamp output
	        if (control_output > 999.0f) control_output = 999.0f;
 8001a72:	4b23      	ldr	r3, [pc, #140]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001b04 <HAL_TIM_PeriodElapsedCallback+0x158>
 8001a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	dd02      	ble.n	8001a8c <HAL_TIM_PeriodElapsedCallback+0xe0>
 8001a86:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001a88:	4a1f      	ldr	r2, [pc, #124]	@ (8001b08 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001a8a:	601a      	str	r2, [r3, #0]
	        if (control_output < 0.0f) control_output = 0.0f;
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9a:	d503      	bpl.n	8001aa4 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8001a9c:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]

	        // Update PWM duty cycle
	        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint32_t)control_output);
 8001aa4:	4b16      	ldr	r3, [pc, #88]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
 8001aaa:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ab2:	ee17 2a90 	vmov	r2, s15
 8001ab6:	635a      	str	r2, [r3, #52]	@ 0x34

	        prev_error = error;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001abe:	6013      	str	r3, [r2, #0]
	}
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	200003d4 	.word	0x200003d4
 8001ad0:	20000460 	.word	0x20000460
 8001ad4:	20000464 	.word	0x20000464
 8001ad8:	2000047c 	.word	0x2000047c
 8001adc:	20000458 	.word	0x20000458
 8001ae0:	2000046c 	.word	0x2000046c
 8001ae4:	3c23d70a 	.word	0x3c23d70a
 8001ae8:	20000470 	.word	0x20000470
 8001aec:	20000478 	.word	0x20000478
 8001af0:	20000474 	.word	0x20000474
 8001af4:	20000004 	.word	0x20000004
 8001af8:	20000008 	.word	0x20000008
 8001afc:	2000000c 	.word	0x2000000c
 8001b00:	20000484 	.word	0x20000484
 8001b04:	4479c000 	.word	0x4479c000
 8001b08:	4479c000 	.word	0x4479c000
 8001b0c:	200002ac 	.word	0x200002ac

08001b10 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_9)
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b20:	d141      	bne.n	8001ba6 <HAL_GPIO_EXTI_Callback+0x96>
    {
        pulse_count++;
 8001b22:	4b23      	ldr	r3, [pc, #140]	@ (8001bb0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	4a21      	ldr	r2, [pc, #132]	@ (8001bb0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001b2a:	6013      	str	r3, [r2, #0]

        if (pulse_count >= target_count)
 8001b2c:	4b20      	ldr	r3, [pc, #128]	@ (8001bb0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	ee07 3a90 	vmov	s15, r3
 8001b34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b38:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b46:	da00      	bge.n	8001b4a <HAL_GPIO_EXTI_Callback+0x3a>
            // Reset PID state
            prev_error = 0;
            integral = 0;
        }
    }
}
 8001b48:	e02d      	b.n	8001ba6 <HAL_GPIO_EXTI_Callback+0x96>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b50:	4819      	ldr	r0, [pc, #100]	@ (8001bb8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001b52:	f002 f8d3 	bl	8003cfc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001b56:	2201      	movs	r2, #1
 8001b58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b5c:	4816      	ldr	r0, [pc, #88]	@ (8001bb8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001b5e:	f002 f8cd 	bl	8003cfc <HAL_GPIO_WritePin>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);  // Set PWM duty cycle to 0
 8001b62:	4b16      	ldr	r3, [pc, #88]	@ (8001bbc <HAL_GPIO_EXTI_Callback+0xac>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2200      	movs	r2, #0
 8001b68:	635a      	str	r2, [r3, #52]	@ 0x34
            pulse_count = 0;
 8001b6a:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
            spinning_forward = 0;
 8001b70:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
            spinning_backward = 0;
 8001b76:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
            spun = !spun;
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bf0c      	ite	eq
 8001b84:	2301      	moveq	r3, #1
 8001b86:	2300      	movne	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001b8e:	601a      	str	r2, [r3, #0]
            stop_motor_flag = 1;
 8001b90:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
            prev_error = 0;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
            integral = 0;
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000458 	.word	0x20000458
 8001bb4:	2000047c 	.word	0x2000047c
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	200002ac 	.word	0x200002ac
 8001bc0:	20000460 	.word	0x20000460
 8001bc4:	20000464 	.word	0x20000464
 8001bc8:	20000468 	.word	0x20000468
 8001bcc:	2000045c 	.word	0x2000045c
 8001bd0:	20000470 	.word	0x20000470
 8001bd4:	20000474 	.word	0x20000474

08001bd8 <Buzzer_On>:

void Buzzer_On(uint32_t duration_ms)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001be0:	2201      	movs	r2, #1
 8001be2:	2120      	movs	r1, #32
 8001be4:	4807      	ldr	r0, [pc, #28]	@ (8001c04 <Buzzer_On+0x2c>)
 8001be6:	f002 f889 	bl	8003cfc <HAL_GPIO_WritePin>
    buzzer_start = HAL_GetTick();
 8001bea:	f000 fbfb 	bl	80023e4 <HAL_GetTick>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4a05      	ldr	r2, [pc, #20]	@ (8001c08 <Buzzer_On+0x30>)
 8001bf2:	6013      	str	r3, [r2, #0]
    buzzer_on = true;
 8001bf4:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <Buzzer_On+0x34>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	701a      	strb	r2, [r3, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40020000 	.word	0x40020000
 8001c08:	200003dc 	.word	0x200003dc
 8001c0c:	200003e0 	.word	0x200003e0

08001c10 <Buzzer_Update>:

void Buzzer_Update()
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
    if (buzzer_on && (HAL_GetTick() - buzzer_start >= 200)) {
 8001c14:	4b0a      	ldr	r3, [pc, #40]	@ (8001c40 <Buzzer_Update+0x30>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00f      	beq.n	8001c3c <Buzzer_Update+0x2c>
 8001c1c:	f000 fbe2 	bl	80023e4 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <Buzzer_Update+0x34>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2bc7      	cmp	r3, #199	@ 0xc7
 8001c2a:	d907      	bls.n	8001c3c <Buzzer_Update+0x2c>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2120      	movs	r1, #32
 8001c30:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <Buzzer_Update+0x38>)
 8001c32:	f002 f863 	bl	8003cfc <HAL_GPIO_WritePin>
        buzzer_on = false;
 8001c36:	4b02      	ldr	r3, [pc, #8]	@ (8001c40 <Buzzer_Update+0x30>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
    }
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	200003e0 	.word	0x200003e0
 8001c44:	200003dc 	.word	0x200003dc
 8001c48:	40020000 	.word	0x40020000

08001c4c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);
	//HAL_ADC_Stop_DMA(&hadc1);
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

	 /* NOTE : This function should not be modified, when the callback is needed,
	           the HAL_UART_RxCpltCallback can be implemented in the user file.
	  */

	  c = rxbuf[0]; // The byte received, first index
 8001c68:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x80>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	73fb      	strb	r3, [r7, #15]

	  HAL_UART_Receive_IT(&huart2, rxbuf, 1); // restart
 8001c6e:	2201      	movs	r2, #1
 8001c70:	491b      	ldr	r1, [pc, #108]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x80>)
 8001c72:	481c      	ldr	r0, [pc, #112]	@ (8001ce4 <HAL_UART_RxCpltCallback+0x84>)
 8001c74:	f003 fdeb 	bl	800584e <HAL_UART_Receive_IT>

	  //HAL_UART_Transmit(&huart2, &c, sizeof(c), 10); // send the holding buffer, not active input one

	  if ((c == '\r') || (c == '\n') || (index >= STRBUFLEN)) // line termination
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	2b0d      	cmp	r3, #13
 8001c7c:	d006      	beq.n	8001c8c <HAL_UART_RxCpltCallback+0x2c>
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	2b0a      	cmp	r3, #10
 8001c82:	d003      	beq.n	8001c8c <HAL_UART_RxCpltCallback+0x2c>
 8001c84:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x88>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b0e      	cmp	r3, #14
 8001c8a:	dd18      	ble.n	8001cbe <HAL_UART_RxCpltCallback+0x5e>
	  {
	    string[index] = 0; // NUL terminate string so usable by functions
 8001c8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x88>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a16      	ldr	r2, [pc, #88]	@ (8001cec <HAL_UART_RxCpltCallback+0x8c>)
 8001c92:	2100      	movs	r1, #0
 8001c94:	54d1      	strb	r1, [r2, r3]

	    if (index) // non-zero, ie has content
 8001c96:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x88>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01c      	beq.n	8001cd8 <HAL_UART_RxCpltCallback+0x78>
	    {
	      desired_temperature = atof(string);
 8001c9e:	4813      	ldr	r0, [pc, #76]	@ (8001cec <HAL_UART_RxCpltCallback+0x8c>)
 8001ca0:	f004 fd66 	bl	8006770 <atof>
 8001ca4:	ec53 2b10 	vmov	r2, r3, d0
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f7fe ffa4 	bl	8000bf8 <__aeabi_d2f>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001cf0 <HAL_UART_RxCpltCallback+0x90>)
 8001cb4:	6013      	str	r3, [r2, #0]
	      index = 0; // reset pointer in buffer
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x88>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
	    if (index) // non-zero, ie has content
 8001cbc:	e00c      	b.n	8001cd8 <HAL_UART_RxCpltCallback+0x78>
	    }
	  }
	  else if (index < STRBUFLEN)
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x88>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b0e      	cmp	r3, #14
 8001cc4:	dc08      	bgt.n	8001cd8 <HAL_UART_RxCpltCallback+0x78>
	  {
	    string[index++] = c;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x88>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	4906      	ldr	r1, [pc, #24]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x88>)
 8001cce:	600a      	str	r2, [r1, #0]
 8001cd0:	4906      	ldr	r1, [pc, #24]	@ (8001cec <HAL_UART_RxCpltCallback+0x8c>)
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	54ca      	strb	r2, [r1, r3]
	  }

}
 8001cd6:	e7ff      	b.n	8001cd8 <HAL_UART_RxCpltCallback+0x78>
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	200003e4 	.word	0x200003e4
 8001ce4:	20000384 	.word	0x20000384
 8001ce8:	20000488 	.word	0x20000488
 8001cec:	2000048c 	.word	0x2000048c
 8001cf0:	20000000 	.word	0x20000000

08001cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf8:	b672      	cpsid	i
}
 8001cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <Error_Handler+0x8>

08001d00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d16:	4b0d      	ldr	r3, [pc, #52]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	603b      	str	r3, [r7, #0]
 8001d26:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	4a08      	ldr	r2, [pc, #32]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800

08001d50 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	@ 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a33      	ldr	r2, [pc, #204]	@ (8001e3c <HAL_ADC_MspInit+0xec>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d15f      	bne.n	8001e32 <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b32      	ldr	r3, [pc, #200]	@ (8001e40 <HAL_ADC_MspInit+0xf0>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	4a31      	ldr	r2, [pc, #196]	@ (8001e40 <HAL_ADC_MspInit+0xf0>)
 8001d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d82:	4b2f      	ldr	r3, [pc, #188]	@ (8001e40 <HAL_ADC_MspInit+0xf0>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b2b      	ldr	r3, [pc, #172]	@ (8001e40 <HAL_ADC_MspInit+0xf0>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	4a2a      	ldr	r2, [pc, #168]	@ (8001e40 <HAL_ADC_MspInit+0xf0>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9e:	4b28      	ldr	r3, [pc, #160]	@ (8001e40 <HAL_ADC_MspInit+0xf0>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001daa:	2313      	movs	r3, #19
 8001dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dae:	2303      	movs	r3, #3
 8001db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4821      	ldr	r0, [pc, #132]	@ (8001e44 <HAL_ADC_MspInit+0xf4>)
 8001dbe:	f001 fe19 	bl	80039f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001dc2:	4b21      	ldr	r3, [pc, #132]	@ (8001e48 <HAL_ADC_MspInit+0xf8>)
 8001dc4:	4a21      	ldr	r2, [pc, #132]	@ (8001e4c <HAL_ADC_MspInit+0xfc>)
 8001dc6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e48 <HAL_ADC_MspInit+0xf8>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dce:	4b1e      	ldr	r3, [pc, #120]	@ (8001e48 <HAL_ADC_MspInit+0xf8>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e48 <HAL_ADC_MspInit+0xf8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001dda:	4b1b      	ldr	r3, [pc, #108]	@ (8001e48 <HAL_ADC_MspInit+0xf8>)
 8001ddc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001de0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001de2:	4b19      	ldr	r3, [pc, #100]	@ (8001e48 <HAL_ADC_MspInit+0xf8>)
 8001de4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001de8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dea:	4b17      	ldr	r3, [pc, #92]	@ (8001e48 <HAL_ADC_MspInit+0xf8>)
 8001dec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001df0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <HAL_ADC_MspInit+0xf8>)
 8001df4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001df8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001dfa:	4b13      	ldr	r3, [pc, #76]	@ (8001e48 <HAL_ADC_MspInit+0xf8>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e00:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <HAL_ADC_MspInit+0xf8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e06:	4810      	ldr	r0, [pc, #64]	@ (8001e48 <HAL_ADC_MspInit+0xf8>)
 8001e08:	f001 f9f2 	bl	80031f0 <HAL_DMA_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001e12:	f7ff ff6f 	bl	8001cf4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a0b      	ldr	r2, [pc, #44]	@ (8001e48 <HAL_ADC_MspInit+0xf8>)
 8001e1a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <HAL_ADC_MspInit+0xf8>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2101      	movs	r1, #1
 8001e26:	2012      	movs	r0, #18
 8001e28:	f001 f9ab 	bl	8003182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001e2c:	2012      	movs	r0, #18
 8001e2e:	f001 f9c4 	bl	80031ba <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e32:	bf00      	nop
 8001e34:	3728      	adds	r7, #40	@ 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40012000 	.word	0x40012000
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40020000 	.word	0x40020000
 8001e48:	2000024c 	.word	0x2000024c
 8001e4c:	40026410 	.word	0x40026410

08001e50 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a22      	ldr	r2, [pc, #136]	@ (8001ee8 <HAL_TIM_Base_MspInit+0x98>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d10e      	bne.n	8001e80 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	4b21      	ldr	r3, [pc, #132]	@ (8001eec <HAL_TIM_Base_MspInit+0x9c>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6a:	4a20      	ldr	r2, [pc, #128]	@ (8001eec <HAL_TIM_Base_MspInit+0x9c>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e72:	4b1e      	ldr	r3, [pc, #120]	@ (8001eec <HAL_TIM_Base_MspInit+0x9c>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e7e:	e02e      	b.n	8001ede <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e88:	d116      	bne.n	8001eb8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	4b17      	ldr	r3, [pc, #92]	@ (8001eec <HAL_TIM_Base_MspInit+0x9c>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	4a16      	ldr	r2, [pc, #88]	@ (8001eec <HAL_TIM_Base_MspInit+0x9c>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e9a:	4b14      	ldr	r3, [pc, #80]	@ (8001eec <HAL_TIM_Base_MspInit+0x9c>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	201c      	movs	r0, #28
 8001eac:	f001 f969 	bl	8003182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001eb0:	201c      	movs	r0, #28
 8001eb2:	f001 f982 	bl	80031ba <HAL_NVIC_EnableIRQ>
}
 8001eb6:	e012      	b.n	8001ede <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef0 <HAL_TIM_Base_MspInit+0xa0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d10d      	bne.n	8001ede <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <HAL_TIM_Base_MspInit+0x9c>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	4a08      	ldr	r2, [pc, #32]	@ (8001eec <HAL_TIM_Base_MspInit+0x9c>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_TIM_Base_MspInit+0x9c>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
}
 8001ede:	bf00      	nop
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40000400 	.word	0x40000400

08001ef4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	@ 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a24      	ldr	r2, [pc, #144]	@ (8001fa4 <HAL_TIM_MspPostInit+0xb0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d11f      	bne.n	8001f56 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b23      	ldr	r3, [pc, #140]	@ (8001fa8 <HAL_TIM_MspPostInit+0xb4>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	4a22      	ldr	r2, [pc, #136]	@ (8001fa8 <HAL_TIM_MspPostInit+0xb4>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f26:	4b20      	ldr	r3, [pc, #128]	@ (8001fa8 <HAL_TIM_MspPostInit+0xb4>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	2300      	movs	r3, #0
 8001f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f44:	2301      	movs	r3, #1
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4817      	ldr	r0, [pc, #92]	@ (8001fac <HAL_TIM_MspPostInit+0xb8>)
 8001f50:	f001 fd50 	bl	80039f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f54:	e022      	b.n	8001f9c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a15      	ldr	r2, [pc, #84]	@ (8001fb0 <HAL_TIM_MspPostInit+0xbc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d11d      	bne.n	8001f9c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	4b10      	ldr	r3, [pc, #64]	@ (8001fa8 <HAL_TIM_MspPostInit+0xb4>)
 8001f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f68:	4a0f      	ldr	r2, [pc, #60]	@ (8001fa8 <HAL_TIM_MspPostInit+0xb4>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f70:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa8 <HAL_TIM_MspPostInit+0xb4>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f7c:	2340      	movs	r3, #64	@ 0x40
 8001f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	4619      	mov	r1, r3
 8001f96:	4805      	ldr	r0, [pc, #20]	@ (8001fac <HAL_TIM_MspPostInit+0xb8>)
 8001f98:	f001 fd2c 	bl	80039f4 <HAL_GPIO_Init>
}
 8001f9c:	bf00      	nop
 8001f9e:	3728      	adds	r7, #40	@ 0x28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40010000 	.word	0x40010000
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020000 	.word	0x40020000
 8001fb0:	40000400 	.word	0x40000400

08001fb4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	@ 0x28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8002048 <HAL_UART_MspInit+0x94>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d133      	bne.n	800203e <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	4b1c      	ldr	r3, [pc, #112]	@ (800204c <HAL_UART_MspInit+0x98>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	4a1b      	ldr	r2, [pc, #108]	@ (800204c <HAL_UART_MspInit+0x98>)
 8001fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe6:	4b19      	ldr	r3, [pc, #100]	@ (800204c <HAL_UART_MspInit+0x98>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b15      	ldr	r3, [pc, #84]	@ (800204c <HAL_UART_MspInit+0x98>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	4a14      	ldr	r2, [pc, #80]	@ (800204c <HAL_UART_MspInit+0x98>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6313      	str	r3, [r2, #48]	@ 0x30
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <HAL_UART_MspInit+0x98>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800200e:	230c      	movs	r3, #12
 8002010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800201e:	2307      	movs	r3, #7
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	4809      	ldr	r0, [pc, #36]	@ (8002050 <HAL_UART_MspInit+0x9c>)
 800202a:	f001 fce3 	bl	80039f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	2026      	movs	r0, #38	@ 0x26
 8002034:	f001 f8a5 	bl	8003182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002038:	2026      	movs	r0, #38	@ 0x26
 800203a:	f001 f8be 	bl	80031ba <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800203e:	bf00      	nop
 8002040:	3728      	adds	r7, #40	@ 0x28
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40004400 	.word	0x40004400
 800204c:	40023800 	.word	0x40023800
 8002050:	40020000 	.word	0x40020000

08002054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <NMI_Handler+0x4>

0800205c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <HardFault_Handler+0x4>

08002064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <MemManage_Handler+0x4>

0800206c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <BusFault_Handler+0x4>

08002074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002078:	bf00      	nop
 800207a:	e7fd      	b.n	8002078 <UsageFault_Handler+0x4>

0800207c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020aa:	f000 f987 	bl	80023bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80020b8:	4802      	ldr	r0, [pc, #8]	@ (80020c4 <ADC_IRQHandler+0x10>)
 80020ba:	f000 fabb 	bl	8002634 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000204 	.word	0x20000204

080020c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80020cc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80020d0:	f001 fe2e 	bl	8003d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020dc:	4802      	ldr	r0, [pc, #8]	@ (80020e8 <TIM2_IRQHandler+0x10>)
 80020de:	f002 fc93 	bl	8004a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200002f4 	.word	0x200002f4

080020ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020f0:	4802      	ldr	r0, [pc, #8]	@ (80020fc <USART2_IRQHandler+0x10>)
 80020f2:	f003 fbd1 	bl	8005898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000384 	.word	0x20000384

08002100 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002104:	4802      	ldr	r0, [pc, #8]	@ (8002110 <DMA2_Stream0_IRQHandler+0x10>)
 8002106:	f001 fa0b 	bl	8003520 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000024c 	.word	0x2000024c

08002114 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return 1;
 8002118:	2301      	movs	r3, #1
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <_kill>:

int _kill(int pid, int sig)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800212e:	f005 ff15 	bl	8007f5c <__errno>
 8002132:	4603      	mov	r3, r0
 8002134:	2216      	movs	r2, #22
 8002136:	601a      	str	r2, [r3, #0]
  return -1;
 8002138:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <_exit>:

void _exit (int status)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800214c:	f04f 31ff 	mov.w	r1, #4294967295
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ffe7 	bl	8002124 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002156:	bf00      	nop
 8002158:	e7fd      	b.n	8002156 <_exit+0x12>

0800215a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	e00a      	b.n	8002182 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800216c:	f3af 8000 	nop.w
 8002170:	4601      	mov	r1, r0
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	60ba      	str	r2, [r7, #8]
 8002178:	b2ca      	uxtb	r2, r1
 800217a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	3301      	adds	r3, #1
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	429a      	cmp	r2, r3
 8002188:	dbf0      	blt.n	800216c <_read+0x12>
  }

  return len;
 800218a:	687b      	ldr	r3, [r7, #4]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	e009      	b.n	80021ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	60ba      	str	r2, [r7, #8]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	3301      	adds	r3, #1
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	429a      	cmp	r2, r3
 80021c0:	dbf1      	blt.n	80021a6 <_write+0x12>
  }
  return len;
 80021c2:	687b      	ldr	r3, [r7, #4]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_close>:

int _close(int file)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021f4:	605a      	str	r2, [r3, #4]
  return 0;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <_isatty>:

int _isatty(int file)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800220c:	2301      	movs	r3, #1
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800223c:	4a14      	ldr	r2, [pc, #80]	@ (8002290 <_sbrk+0x5c>)
 800223e:	4b15      	ldr	r3, [pc, #84]	@ (8002294 <_sbrk+0x60>)
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002248:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <_sbrk+0x64>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002250:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <_sbrk+0x64>)
 8002252:	4a12      	ldr	r2, [pc, #72]	@ (800229c <_sbrk+0x68>)
 8002254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002256:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <_sbrk+0x64>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	429a      	cmp	r2, r3
 8002262:	d207      	bcs.n	8002274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002264:	f005 fe7a 	bl	8007f5c <__errno>
 8002268:	4603      	mov	r3, r0
 800226a:	220c      	movs	r2, #12
 800226c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800226e:	f04f 33ff 	mov.w	r3, #4294967295
 8002272:	e009      	b.n	8002288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002274:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <_sbrk+0x64>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800227a:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <_sbrk+0x64>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	4a05      	ldr	r2, [pc, #20]	@ (8002298 <_sbrk+0x64>)
 8002284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002286:	68fb      	ldr	r3, [r7, #12]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20018000 	.word	0x20018000
 8002294:	00000400 	.word	0x00000400
 8002298:	2000049c 	.word	0x2000049c
 800229c:	200005f0 	.word	0x200005f0

080022a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022a4:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <SystemInit+0x20>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022aa:	4a05      	ldr	r2, [pc, #20]	@ (80022c0 <SystemInit+0x20>)
 80022ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022c8:	f7ff ffea 	bl	80022a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022cc:	480c      	ldr	r0, [pc, #48]	@ (8002300 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022ce:	490d      	ldr	r1, [pc, #52]	@ (8002304 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002308 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d4:	e002      	b.n	80022dc <LoopCopyDataInit>

080022d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022da:	3304      	adds	r3, #4

080022dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e0:	d3f9      	bcc.n	80022d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022e2:	4a0a      	ldr	r2, [pc, #40]	@ (800230c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002310 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e8:	e001      	b.n	80022ee <LoopFillZerobss>

080022ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022ec:	3204      	adds	r2, #4

080022ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f0:	d3fb      	bcc.n	80022ea <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80022f2:	f005 fe39 	bl	8007f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022f6:	f7fe fe9b 	bl	8001030 <main>
  bx  lr    
 80022fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002304:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002308:	0800adc4 	.word	0x0800adc4
  ldr r2, =_sbss
 800230c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002310:	200005f0 	.word	0x200005f0

08002314 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002314:	e7fe      	b.n	8002314 <DMA1_Stream0_IRQHandler>
	...

08002318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800231c:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <HAL_Init+0x40>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0d      	ldr	r2, [pc, #52]	@ (8002358 <HAL_Init+0x40>)
 8002322:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002326:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002328:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <HAL_Init+0x40>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <HAL_Init+0x40>)
 800232e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002332:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002334:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <HAL_Init+0x40>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a07      	ldr	r2, [pc, #28]	@ (8002358 <HAL_Init+0x40>)
 800233a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800233e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002340:	2003      	movs	r0, #3
 8002342:	f000 ff13 	bl	800316c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002346:	2000      	movs	r0, #0
 8002348:	f000 f808 	bl	800235c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800234c:	f7ff fcd8 	bl	8001d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40023c00 	.word	0x40023c00

0800235c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002364:	4b12      	ldr	r3, [pc, #72]	@ (80023b0 <HAL_InitTick+0x54>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <HAL_InitTick+0x58>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	4619      	mov	r1, r3
 800236e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002372:	fbb3 f3f1 	udiv	r3, r3, r1
 8002376:	fbb2 f3f3 	udiv	r3, r2, r3
 800237a:	4618      	mov	r0, r3
 800237c:	f000 ff2b 	bl	80031d6 <HAL_SYSTICK_Config>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e00e      	b.n	80023a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b0f      	cmp	r3, #15
 800238e:	d80a      	bhi.n	80023a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002390:	2200      	movs	r2, #0
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	f04f 30ff 	mov.w	r0, #4294967295
 8002398:	f000 fef3 	bl	8003182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800239c:	4a06      	ldr	r2, [pc, #24]	@ (80023b8 <HAL_InitTick+0x5c>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e000      	b.n	80023a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000014 	.word	0x20000014
 80023b4:	2000001c 	.word	0x2000001c
 80023b8:	20000018 	.word	0x20000018

080023bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c0:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <HAL_IncTick+0x20>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <HAL_IncTick+0x24>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	4a04      	ldr	r2, [pc, #16]	@ (80023e0 <HAL_IncTick+0x24>)
 80023ce:	6013      	str	r3, [r2, #0]
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	2000001c 	.word	0x2000001c
 80023e0:	200004a0 	.word	0x200004a0

080023e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return uwTick;
 80023e8:	4b03      	ldr	r3, [pc, #12]	@ (80023f8 <HAL_GetTick+0x14>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	200004a0 	.word	0x200004a0

080023fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002404:	f7ff ffee 	bl	80023e4 <HAL_GetTick>
 8002408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002414:	d005      	beq.n	8002422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002416:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <HAL_Delay+0x44>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4413      	add	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002422:	bf00      	nop
 8002424:	f7ff ffde 	bl	80023e4 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	429a      	cmp	r2, r3
 8002432:	d8f7      	bhi.n	8002424 <HAL_Delay+0x28>
  {
  }
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2000001c 	.word	0x2000001c

08002444 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e033      	b.n	80024c2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d109      	bne.n	8002476 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff fc74 	bl	8001d50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b00      	cmp	r3, #0
 8002480:	d118      	bne.n	80024b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800248a:	f023 0302 	bic.w	r3, r3, #2
 800248e:	f043 0202 	orr.w	r2, r3, #2
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fc10 	bl	8002cbc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	f023 0303 	bic.w	r3, r3, #3
 80024aa:	f043 0201 	orr.w	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80024b2:	e001      	b.n	80024b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_ADC_Start+0x1a>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e097      	b.n	8002616 <HAL_ADC_Start+0x14a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d018      	beq.n	800252e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800250c:	4b45      	ldr	r3, [pc, #276]	@ (8002624 <HAL_ADC_Start+0x158>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a45      	ldr	r2, [pc, #276]	@ (8002628 <HAL_ADC_Start+0x15c>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	0c9a      	lsrs	r2, r3, #18
 8002518:	4613      	mov	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4413      	add	r3, r2
 800251e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002520:	e002      	b.n	8002528 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	3b01      	subs	r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f9      	bne.n	8002522 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	d15f      	bne.n	80025fc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002540:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002544:	f023 0301 	bic.w	r3, r3, #1
 8002548:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800255a:	2b00      	cmp	r3, #0
 800255c:	d007      	beq.n	800256e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002566:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800257a:	d106      	bne.n	800258a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002580:	f023 0206 	bic.w	r2, r3, #6
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	645a      	str	r2, [r3, #68]	@ 0x44
 8002588:	e002      	b.n	8002590 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002598:	4b24      	ldr	r3, [pc, #144]	@ (800262c <HAL_ADC_Start+0x160>)
 800259a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80025a4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 031f 	and.w	r3, r3, #31
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10f      	bne.n	80025d2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d129      	bne.n	8002614 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	e020      	b.n	8002614 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a16      	ldr	r2, [pc, #88]	@ (8002630 <HAL_ADC_Start+0x164>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d11b      	bne.n	8002614 <HAL_ADC_Start+0x148>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d114      	bne.n	8002614 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	e00b      	b.n	8002614 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	f043 0210 	orr.w	r2, r3, #16
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260c:	f043 0201 	orr.w	r2, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	20000014 	.word	0x20000014
 8002628:	431bde83 	.word	0x431bde83
 800262c:	40012300 	.word	0x40012300
 8002630:	40012000 	.word	0x40012000

08002634 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	2300      	movs	r3, #0
 8002642:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d049      	beq.n	80026fe <HAL_ADC_IRQHandler+0xca>
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d046      	beq.n	80026fe <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	d105      	bne.n	8002688 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002680:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d12b      	bne.n	80026ee <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800269a:	2b00      	cmp	r3, #0
 800269c:	d127      	bne.n	80026ee <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d006      	beq.n	80026ba <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d119      	bne.n	80026ee <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0220 	bic.w	r2, r2, #32
 80026c8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d105      	bne.n	80026ee <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	f043 0201 	orr.w	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff faac 	bl	8001c4c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0212 	mvn.w	r2, #18
 80026fc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800270c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d057      	beq.n	80027c4 <HAL_ADC_IRQHandler+0x190>
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d054      	beq.n	80027c4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	f003 0310 	and.w	r3, r3, #16
 8002722:	2b00      	cmp	r3, #0
 8002724:	d105      	bne.n	8002732 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d139      	bne.n	80027b4 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002746:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800274a:	2b00      	cmp	r3, #0
 800274c:	d006      	beq.n	800275c <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002758:	2b00      	cmp	r3, #0
 800275a:	d12b      	bne.n	80027b4 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002766:	2b00      	cmp	r3, #0
 8002768:	d124      	bne.n	80027b4 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002774:	2b00      	cmp	r3, #0
 8002776:	d11d      	bne.n	80027b4 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800277c:	2b00      	cmp	r3, #0
 800277e:	d119      	bne.n	80027b4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800278e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d105      	bne.n	80027b4 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ac:	f043 0201 	orr.w	r2, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fbff 	bl	8002fb8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f06f 020c 	mvn.w	r2, #12
 80027c2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d017      	beq.n	800280a <HAL_ADC_IRQHandler+0x1d6>
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d014      	beq.n	800280a <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d10d      	bne.n	800280a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f928 	bl	8002a50 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0201 	mvn.w	r2, #1
 8002808:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002818:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d015      	beq.n	800284c <HAL_ADC_IRQHandler+0x218>
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d012      	beq.n	800284c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	f043 0202 	orr.w	r2, r3, #2
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f06f 0220 	mvn.w	r2, #32
 800283a:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f911 	bl	8002a64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f06f 0220 	mvn.w	r2, #32
 800284a:	601a      	str	r2, [r3, #0]
  }
}
 800284c:	bf00      	nop
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_ADC_Start_DMA+0x22>
 8002872:	2302      	movs	r3, #2
 8002874:	e0d0      	b.n	8002a18 <HAL_ADC_Start_DMA+0x1c4>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b01      	cmp	r3, #1
 800288a:	d018      	beq.n	80028be <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800289c:	4b60      	ldr	r3, [pc, #384]	@ (8002a20 <HAL_ADC_Start_DMA+0x1cc>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a60      	ldr	r2, [pc, #384]	@ (8002a24 <HAL_ADC_Start_DMA+0x1d0>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	0c9a      	lsrs	r2, r3, #18
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80028b0:	e002      	b.n	80028b8 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f9      	bne.n	80028b2 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028cc:	d107      	bne.n	80028de <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028dc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	f040 8088 	bne.w	80029fe <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80028f6:	f023 0301 	bic.w	r3, r3, #1
 80028fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800290c:	2b00      	cmp	r3, #0
 800290e:	d007      	beq.n	8002920 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002918:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800292c:	d106      	bne.n	800293c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002932:	f023 0206 	bic.w	r2, r3, #6
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	645a      	str	r2, [r3, #68]	@ 0x44
 800293a:	e002      	b.n	8002942 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800294a:	4b37      	ldr	r3, [pc, #220]	@ (8002a28 <HAL_ADC_Start_DMA+0x1d4>)
 800294c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002952:	4a36      	ldr	r2, [pc, #216]	@ (8002a2c <HAL_ADC_Start_DMA+0x1d8>)
 8002954:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800295a:	4a35      	ldr	r2, [pc, #212]	@ (8002a30 <HAL_ADC_Start_DMA+0x1dc>)
 800295c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002962:	4a34      	ldr	r2, [pc, #208]	@ (8002a34 <HAL_ADC_Start_DMA+0x1e0>)
 8002964:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800296e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800297e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800298e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	334c      	adds	r3, #76	@ 0x4c
 800299a:	4619      	mov	r1, r3
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f000 fcd4 	bl	800334c <HAL_DMA_Start_IT>
 80029a4:	4603      	mov	r3, r0
 80029a6:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10f      	bne.n	80029d4 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d129      	bne.n	8002a16 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80029d0:	609a      	str	r2, [r3, #8]
 80029d2:	e020      	b.n	8002a16 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a17      	ldr	r2, [pc, #92]	@ (8002a38 <HAL_ADC_Start_DMA+0x1e4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d11b      	bne.n	8002a16 <HAL_ADC_Start_DMA+0x1c2>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d114      	bne.n	8002a16 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	e00b      	b.n	8002a16 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	f043 0210 	orr.w	r2, r3, #16
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002a16:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3720      	adds	r7, #32
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20000014 	.word	0x20000014
 8002a24:	431bde83 	.word	0x431bde83
 8002a28:	40012300 	.word	0x40012300
 8002a2c:	08002eb5 	.word	0x08002eb5
 8002a30:	08002f6f 	.word	0x08002f6f
 8002a34:	08002f8b 	.word	0x08002f8b
 8002a38:	40012000 	.word	0x40012000

08002a3c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x1c>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e105      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x228>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b09      	cmp	r3, #9
 8002aa2:	d925      	bls.n	8002af0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68d9      	ldr	r1, [r3, #12]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3b1e      	subs	r3, #30
 8002aba:	2207      	movs	r2, #7
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43da      	mvns	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	400a      	ands	r2, r1
 8002ac8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68d9      	ldr	r1, [r3, #12]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	4618      	mov	r0, r3
 8002adc:	4603      	mov	r3, r0
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4403      	add	r3, r0
 8002ae2:	3b1e      	subs	r3, #30
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	e022      	b.n	8002b36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6919      	ldr	r1, [r3, #16]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	4613      	mov	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4413      	add	r3, r2
 8002b04:	2207      	movs	r2, #7
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	400a      	ands	r2, r1
 8002b12:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6919      	ldr	r1, [r3, #16]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	4618      	mov	r0, r3
 8002b26:	4603      	mov	r3, r0
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	4403      	add	r3, r0
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b06      	cmp	r3, #6
 8002b3c:	d824      	bhi.n	8002b88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3b05      	subs	r3, #5
 8002b50:	221f      	movs	r2, #31
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43da      	mvns	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	3b05      	subs	r3, #5
 8002b7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b86:	e04c      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b0c      	cmp	r3, #12
 8002b8e:	d824      	bhi.n	8002bda <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3b23      	subs	r3, #35	@ 0x23
 8002ba2:	221f      	movs	r2, #31
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43da      	mvns	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	400a      	ands	r2, r1
 8002bb0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	3b23      	subs	r3, #35	@ 0x23
 8002bcc:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bd8:	e023      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	3b41      	subs	r3, #65	@ 0x41
 8002bec:	221f      	movs	r2, #31
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	4618      	mov	r0, r3
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	3b41      	subs	r3, #65	@ 0x41
 8002c16:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c22:	4b22      	ldr	r3, [pc, #136]	@ (8002cac <HAL_ADC_ConfigChannel+0x234>)
 8002c24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a21      	ldr	r2, [pc, #132]	@ (8002cb0 <HAL_ADC_ConfigChannel+0x238>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d109      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x1cc>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b12      	cmp	r3, #18
 8002c36:	d105      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a19      	ldr	r2, [pc, #100]	@ (8002cb0 <HAL_ADC_ConfigChannel+0x238>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d123      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x21e>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d003      	beq.n	8002c5e <HAL_ADC_ConfigChannel+0x1e6>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b11      	cmp	r3, #17
 8002c5c:	d11b      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b10      	cmp	r3, #16
 8002c70:	d111      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c72:	4b10      	ldr	r3, [pc, #64]	@ (8002cb4 <HAL_ADC_ConfigChannel+0x23c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a10      	ldr	r2, [pc, #64]	@ (8002cb8 <HAL_ADC_ConfigChannel+0x240>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	0c9a      	lsrs	r2, r3, #18
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c88:	e002      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f9      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	40012300 	.word	0x40012300
 8002cb0:	40012000 	.word	0x40012000
 8002cb4:	20000014 	.word	0x20000014
 8002cb8:	431bde83 	.word	0x431bde83

08002cbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cc4:	4b79      	ldr	r3, [pc, #484]	@ (8002eac <ADC_Init+0x1f0>)
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	021a      	lsls	r2, r3, #8
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002d14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6899      	ldr	r1, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4e:	4a58      	ldr	r2, [pc, #352]	@ (8002eb0 <ADC_Init+0x1f4>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d022      	beq.n	8002d9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6899      	ldr	r1, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6899      	ldr	r1, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	e00f      	b.n	8002dba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002da8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002db8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0202 	bic.w	r2, r2, #2
 8002dc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6899      	ldr	r1, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	7e1b      	ldrb	r3, [r3, #24]
 8002dd4:	005a      	lsls	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d01b      	beq.n	8002e20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002df6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002e06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6859      	ldr	r1, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	3b01      	subs	r3, #1
 8002e14:	035a      	lsls	r2, r3, #13
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	e007      	b.n	8002e30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e2e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	051a      	lsls	r2, r3, #20
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6899      	ldr	r1, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e72:	025a      	lsls	r2, r3, #9
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6899      	ldr	r1, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	029a      	lsls	r2, r3, #10
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	609a      	str	r2, [r3, #8]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	40012300 	.word	0x40012300
 8002eb0:	0f000001 	.word	0x0f000001

08002eb4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d13c      	bne.n	8002f48 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d12b      	bne.n	8002f40 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d127      	bne.n	8002f40 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d006      	beq.n	8002f0c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d119      	bne.n	8002f40 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0220 	bic.w	r2, r2, #32
 8002f1a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d105      	bne.n	8002f40 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	f043 0201 	orr.w	r2, r3, #1
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f7fe fe83 	bl	8001c4c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f46:	e00e      	b.n	8002f66 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f7ff fd85 	bl	8002a64 <HAL_ADC_ErrorCallback>
}
 8002f5a:	e004      	b.n	8002f66 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3
}
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7ff fd5d 	bl	8002a3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f82:	bf00      	nop
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f96:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2240      	movs	r2, #64	@ 0x40
 8002f9c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa2:	f043 0204 	orr.w	r2, r3, #4
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f7ff fd5a 	bl	8002a64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fb0:	bf00      	nop
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003010 <__NVIC_SetPriorityGrouping+0x44>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ffe:	4a04      	ldr	r2, [pc, #16]	@ (8003010 <__NVIC_SetPriorityGrouping+0x44>)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	60d3      	str	r3, [r2, #12]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003018:	4b04      	ldr	r3, [pc, #16]	@ (800302c <__NVIC_GetPriorityGrouping+0x18>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	0a1b      	lsrs	r3, r3, #8
 800301e:	f003 0307 	and.w	r3, r3, #7
}
 8003022:	4618      	mov	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	2b00      	cmp	r3, #0
 8003040:	db0b      	blt.n	800305a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	f003 021f 	and.w	r2, r3, #31
 8003048:	4907      	ldr	r1, [pc, #28]	@ (8003068 <__NVIC_EnableIRQ+0x38>)
 800304a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	2001      	movs	r0, #1
 8003052:	fa00 f202 	lsl.w	r2, r0, r2
 8003056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	e000e100 	.word	0xe000e100

0800306c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	6039      	str	r1, [r7, #0]
 8003076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307c:	2b00      	cmp	r3, #0
 800307e:	db0a      	blt.n	8003096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	b2da      	uxtb	r2, r3
 8003084:	490c      	ldr	r1, [pc, #48]	@ (80030b8 <__NVIC_SetPriority+0x4c>)
 8003086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308a:	0112      	lsls	r2, r2, #4
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	440b      	add	r3, r1
 8003090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003094:	e00a      	b.n	80030ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	b2da      	uxtb	r2, r3
 800309a:	4908      	ldr	r1, [pc, #32]	@ (80030bc <__NVIC_SetPriority+0x50>)
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	3b04      	subs	r3, #4
 80030a4:	0112      	lsls	r2, r2, #4
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	440b      	add	r3, r1
 80030aa:	761a      	strb	r2, [r3, #24]
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000e100 	.word	0xe000e100
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b089      	sub	sp, #36	@ 0x24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f1c3 0307 	rsb	r3, r3, #7
 80030da:	2b04      	cmp	r3, #4
 80030dc:	bf28      	it	cs
 80030de:	2304      	movcs	r3, #4
 80030e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3304      	adds	r3, #4
 80030e6:	2b06      	cmp	r3, #6
 80030e8:	d902      	bls.n	80030f0 <NVIC_EncodePriority+0x30>
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3b03      	subs	r3, #3
 80030ee:	e000      	b.n	80030f2 <NVIC_EncodePriority+0x32>
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f4:	f04f 32ff 	mov.w	r2, #4294967295
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43da      	mvns	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	401a      	ands	r2, r3
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003108:	f04f 31ff 	mov.w	r1, #4294967295
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	fa01 f303 	lsl.w	r3, r1, r3
 8003112:	43d9      	mvns	r1, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	4313      	orrs	r3, r2
         );
}
 800311a:	4618      	mov	r0, r3
 800311c:	3724      	adds	r7, #36	@ 0x24
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3b01      	subs	r3, #1
 8003134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003138:	d301      	bcc.n	800313e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800313a:	2301      	movs	r3, #1
 800313c:	e00f      	b.n	800315e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800313e:	4a0a      	ldr	r2, [pc, #40]	@ (8003168 <SysTick_Config+0x40>)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3b01      	subs	r3, #1
 8003144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003146:	210f      	movs	r1, #15
 8003148:	f04f 30ff 	mov.w	r0, #4294967295
 800314c:	f7ff ff8e 	bl	800306c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003150:	4b05      	ldr	r3, [pc, #20]	@ (8003168 <SysTick_Config+0x40>)
 8003152:	2200      	movs	r2, #0
 8003154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003156:	4b04      	ldr	r3, [pc, #16]	@ (8003168 <SysTick_Config+0x40>)
 8003158:	2207      	movs	r2, #7
 800315a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	e000e010 	.word	0xe000e010

0800316c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff ff29 	bl	8002fcc <__NVIC_SetPriorityGrouping>
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003182:	b580      	push	{r7, lr}
 8003184:	b086      	sub	sp, #24
 8003186:	af00      	add	r7, sp, #0
 8003188:	4603      	mov	r3, r0
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003194:	f7ff ff3e 	bl	8003014 <__NVIC_GetPriorityGrouping>
 8003198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	6978      	ldr	r0, [r7, #20]
 80031a0:	f7ff ff8e 	bl	80030c0 <NVIC_EncodePriority>
 80031a4:	4602      	mov	r2, r0
 80031a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff ff5d 	bl	800306c <__NVIC_SetPriority>
}
 80031b2:	bf00      	nop
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	4603      	mov	r3, r0
 80031c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff31 	bl	8003030 <__NVIC_EnableIRQ>
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff ffa2 	bl	8003128 <SysTick_Config>
 80031e4:	4603      	mov	r3, r0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031fc:	f7ff f8f2 	bl	80023e4 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e099      	b.n	8003340 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0201 	bic.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800322c:	e00f      	b.n	800324e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800322e:	f7ff f8d9 	bl	80023e4 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b05      	cmp	r3, #5
 800323a:	d908      	bls.n	800324e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2203      	movs	r2, #3
 8003246:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e078      	b.n	8003340 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1e8      	bne.n	800322e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	4b38      	ldr	r3, [pc, #224]	@ (8003348 <HAL_DMA_Init+0x158>)
 8003268:	4013      	ands	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800327a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003286:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003292:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4313      	orrs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d107      	bne.n	80032b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b0:	4313      	orrs	r3, r2
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f023 0307 	bic.w	r3, r3, #7
 80032ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d117      	bne.n	8003312 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00e      	beq.n	8003312 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fb01 	bl	80038fc <DMA_CheckFifoParam>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2240      	movs	r2, #64	@ 0x40
 8003304:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800330e:	2301      	movs	r3, #1
 8003310:	e016      	b.n	8003340 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fab8 	bl	8003890 <DMA_CalcBaseAndBitshift>
 8003320:	4603      	mov	r3, r0
 8003322:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003328:	223f      	movs	r2, #63	@ 0x3f
 800332a:	409a      	lsls	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	f010803f 	.word	0xf010803f

0800334c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003362:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_DMA_Start_IT+0x26>
 800336e:	2302      	movs	r3, #2
 8003370:	e040      	b.n	80033f4 <HAL_DMA_Start_IT+0xa8>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b01      	cmp	r3, #1
 8003384:	d12f      	bne.n	80033e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2202      	movs	r2, #2
 800338a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 fa4a 	bl	8003834 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a4:	223f      	movs	r2, #63	@ 0x3f
 80033a6:	409a      	lsls	r2, r3
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0216 	orr.w	r2, r2, #22
 80033ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d007      	beq.n	80033d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0208 	orr.w	r2, r2, #8
 80033d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	e005      	b.n	80033f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033ee:	2302      	movs	r3, #2
 80033f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003408:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800340a:	f7fe ffeb 	bl	80023e4 <HAL_GetTick>
 800340e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d008      	beq.n	800342e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2280      	movs	r2, #128	@ 0x80
 8003420:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e052      	b.n	80034d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0216 	bic.w	r2, r2, #22
 800343c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800344c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d103      	bne.n	800345e <HAL_DMA_Abort+0x62>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0208 	bic.w	r2, r2, #8
 800346c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0201 	bic.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800347e:	e013      	b.n	80034a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003480:	f7fe ffb0 	bl	80023e4 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b05      	cmp	r3, #5
 800348c:	d90c      	bls.n	80034a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2203      	movs	r2, #3
 8003498:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e015      	b.n	80034d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e4      	bne.n	8003480 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ba:	223f      	movs	r2, #63	@ 0x3f
 80034bc:	409a      	lsls	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d004      	beq.n	80034fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2280      	movs	r2, #128	@ 0x80
 80034f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e00c      	b.n	8003514 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2205      	movs	r2, #5
 80034fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800352c:	4b8e      	ldr	r3, [pc, #568]	@ (8003768 <HAL_DMA_IRQHandler+0x248>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a8e      	ldr	r2, [pc, #568]	@ (800376c <HAL_DMA_IRQHandler+0x24c>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	0a9b      	lsrs	r3, r3, #10
 8003538:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354a:	2208      	movs	r2, #8
 800354c:	409a      	lsls	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4013      	ands	r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01a      	beq.n	800358c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d013      	beq.n	800358c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0204 	bic.w	r2, r2, #4
 8003572:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003578:	2208      	movs	r2, #8
 800357a:	409a      	lsls	r2, r3
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003584:	f043 0201 	orr.w	r2, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003590:	2201      	movs	r2, #1
 8003592:	409a      	lsls	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4013      	ands	r3, r2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d012      	beq.n	80035c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00b      	beq.n	80035c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ae:	2201      	movs	r2, #1
 80035b0:	409a      	lsls	r2, r3
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ba:	f043 0202 	orr.w	r2, r3, #2
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c6:	2204      	movs	r2, #4
 80035c8:	409a      	lsls	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d012      	beq.n	80035f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e4:	2204      	movs	r2, #4
 80035e6:	409a      	lsls	r2, r3
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f0:	f043 0204 	orr.w	r2, r3, #4
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fc:	2210      	movs	r2, #16
 80035fe:	409a      	lsls	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4013      	ands	r3, r2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d043      	beq.n	8003690 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d03c      	beq.n	8003690 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361a:	2210      	movs	r2, #16
 800361c:	409a      	lsls	r2, r3
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d018      	beq.n	8003662 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d108      	bne.n	8003650 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d024      	beq.n	8003690 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	4798      	blx	r3
 800364e:	e01f      	b.n	8003690 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003654:	2b00      	cmp	r3, #0
 8003656:	d01b      	beq.n	8003690 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	4798      	blx	r3
 8003660:	e016      	b.n	8003690 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800366c:	2b00      	cmp	r3, #0
 800366e:	d107      	bne.n	8003680 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0208 	bic.w	r2, r2, #8
 800367e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003694:	2220      	movs	r2, #32
 8003696:	409a      	lsls	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 808f 	beq.w	80037c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8087 	beq.w	80037c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b6:	2220      	movs	r2, #32
 80036b8:	409a      	lsls	r2, r3
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b05      	cmp	r3, #5
 80036c8:	d136      	bne.n	8003738 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0216 	bic.w	r2, r2, #22
 80036d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d103      	bne.n	80036fa <HAL_DMA_IRQHandler+0x1da>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d007      	beq.n	800370a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0208 	bic.w	r2, r2, #8
 8003708:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370e:	223f      	movs	r2, #63	@ 0x3f
 8003710:	409a      	lsls	r2, r3
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800372a:	2b00      	cmp	r3, #0
 800372c:	d07e      	beq.n	800382c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	4798      	blx	r3
        }
        return;
 8003736:	e079      	b.n	800382c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01d      	beq.n	8003782 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10d      	bne.n	8003770 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003758:	2b00      	cmp	r3, #0
 800375a:	d031      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
 8003764:	e02c      	b.n	80037c0 <HAL_DMA_IRQHandler+0x2a0>
 8003766:	bf00      	nop
 8003768:	20000014 	.word	0x20000014
 800376c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003774:	2b00      	cmp	r3, #0
 8003776:	d023      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
 8003780:	e01e      	b.n	80037c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10f      	bne.n	80037b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0210 	bic.w	r2, r2, #16
 800379e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d032      	beq.n	800382e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d022      	beq.n	800381a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2205      	movs	r2, #5
 80037d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0201 	bic.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	3301      	adds	r3, #1
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d307      	bcc.n	8003808 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f2      	bne.n	80037ec <HAL_DMA_IRQHandler+0x2cc>
 8003806:	e000      	b.n	800380a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003808:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	4798      	blx	r3
 800382a:	e000      	b.n	800382e <HAL_DMA_IRQHandler+0x30e>
        return;
 800382c:	bf00      	nop
    }
  }
}
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003850:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b40      	cmp	r3, #64	@ 0x40
 8003860:	d108      	bne.n	8003874 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003872:	e007      	b.n	8003884 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	60da      	str	r2, [r3, #12]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	3b10      	subs	r3, #16
 80038a0:	4a14      	ldr	r2, [pc, #80]	@ (80038f4 <DMA_CalcBaseAndBitshift+0x64>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	091b      	lsrs	r3, r3, #4
 80038a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038aa:	4a13      	ldr	r2, [pc, #76]	@ (80038f8 <DMA_CalcBaseAndBitshift+0x68>)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4413      	add	r3, r2
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	d909      	bls.n	80038d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038c6:	f023 0303 	bic.w	r3, r3, #3
 80038ca:	1d1a      	adds	r2, r3, #4
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80038d0:	e007      	b.n	80038e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038da:	f023 0303 	bic.w	r3, r3, #3
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	aaaaaaab 	.word	0xaaaaaaab
 80038f8:	0800a984 	.word	0x0800a984

080038fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d11f      	bne.n	8003956 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d856      	bhi.n	80039ca <DMA_CheckFifoParam+0xce>
 800391c:	a201      	add	r2, pc, #4	@ (adr r2, 8003924 <DMA_CheckFifoParam+0x28>)
 800391e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003922:	bf00      	nop
 8003924:	08003935 	.word	0x08003935
 8003928:	08003947 	.word	0x08003947
 800392c:	08003935 	.word	0x08003935
 8003930:	080039cb 	.word	0x080039cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003938:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d046      	beq.n	80039ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003944:	e043      	b.n	80039ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800394e:	d140      	bne.n	80039d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003954:	e03d      	b.n	80039d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800395e:	d121      	bne.n	80039a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b03      	cmp	r3, #3
 8003964:	d837      	bhi.n	80039d6 <DMA_CheckFifoParam+0xda>
 8003966:	a201      	add	r2, pc, #4	@ (adr r2, 800396c <DMA_CheckFifoParam+0x70>)
 8003968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396c:	0800397d 	.word	0x0800397d
 8003970:	08003983 	.word	0x08003983
 8003974:	0800397d 	.word	0x0800397d
 8003978:	08003995 	.word	0x08003995
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
      break;
 8003980:	e030      	b.n	80039e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003986:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d025      	beq.n	80039da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003992:	e022      	b.n	80039da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003998:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800399c:	d11f      	bne.n	80039de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039a2:	e01c      	b.n	80039de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d903      	bls.n	80039b2 <DMA_CheckFifoParam+0xb6>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d003      	beq.n	80039b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039b0:	e018      	b.n	80039e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	73fb      	strb	r3, [r7, #15]
      break;
 80039b6:	e015      	b.n	80039e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00e      	beq.n	80039e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	73fb      	strb	r3, [r7, #15]
      break;
 80039c8:	e00b      	b.n	80039e2 <DMA_CheckFifoParam+0xe6>
      break;
 80039ca:	bf00      	nop
 80039cc:	e00a      	b.n	80039e4 <DMA_CheckFifoParam+0xe8>
      break;
 80039ce:	bf00      	nop
 80039d0:	e008      	b.n	80039e4 <DMA_CheckFifoParam+0xe8>
      break;
 80039d2:	bf00      	nop
 80039d4:	e006      	b.n	80039e4 <DMA_CheckFifoParam+0xe8>
      break;
 80039d6:	bf00      	nop
 80039d8:	e004      	b.n	80039e4 <DMA_CheckFifoParam+0xe8>
      break;
 80039da:	bf00      	nop
 80039dc:	e002      	b.n	80039e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80039de:	bf00      	nop
 80039e0:	e000      	b.n	80039e4 <DMA_CheckFifoParam+0xe8>
      break;
 80039e2:	bf00      	nop
    }
  } 
  
  return status; 
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop

080039f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b089      	sub	sp, #36	@ 0x24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	e159      	b.n	8003cc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a10:	2201      	movs	r2, #1
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	4013      	ands	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	f040 8148 	bne.w	8003cbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d005      	beq.n	8003a46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d130      	bne.n	8003aa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	2203      	movs	r2, #3
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	091b      	lsrs	r3, r3, #4
 8003a92:	f003 0201 	and.w	r2, r3, #1
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d017      	beq.n	8003ae4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	2203      	movs	r2, #3
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d123      	bne.n	8003b38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	08da      	lsrs	r2, r3, #3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3208      	adds	r2, #8
 8003af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	220f      	movs	r2, #15
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	08da      	lsrs	r2, r3, #3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3208      	adds	r2, #8
 8003b32:	69b9      	ldr	r1, [r7, #24]
 8003b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	2203      	movs	r2, #3
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 0203 	and.w	r2, r3, #3
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80a2 	beq.w	8003cbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	4b57      	ldr	r3, [pc, #348]	@ (8003cdc <HAL_GPIO_Init+0x2e8>)
 8003b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b82:	4a56      	ldr	r2, [pc, #344]	@ (8003cdc <HAL_GPIO_Init+0x2e8>)
 8003b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b8a:	4b54      	ldr	r3, [pc, #336]	@ (8003cdc <HAL_GPIO_Init+0x2e8>)
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b96:	4a52      	ldr	r2, [pc, #328]	@ (8003ce0 <HAL_GPIO_Init+0x2ec>)
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	089b      	lsrs	r3, r3, #2
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	220f      	movs	r2, #15
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a49      	ldr	r2, [pc, #292]	@ (8003ce4 <HAL_GPIO_Init+0x2f0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d019      	beq.n	8003bf6 <HAL_GPIO_Init+0x202>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a48      	ldr	r2, [pc, #288]	@ (8003ce8 <HAL_GPIO_Init+0x2f4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_GPIO_Init+0x1fe>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a47      	ldr	r2, [pc, #284]	@ (8003cec <HAL_GPIO_Init+0x2f8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00d      	beq.n	8003bee <HAL_GPIO_Init+0x1fa>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a46      	ldr	r2, [pc, #280]	@ (8003cf0 <HAL_GPIO_Init+0x2fc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d007      	beq.n	8003bea <HAL_GPIO_Init+0x1f6>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a45      	ldr	r2, [pc, #276]	@ (8003cf4 <HAL_GPIO_Init+0x300>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d101      	bne.n	8003be6 <HAL_GPIO_Init+0x1f2>
 8003be2:	2304      	movs	r3, #4
 8003be4:	e008      	b.n	8003bf8 <HAL_GPIO_Init+0x204>
 8003be6:	2307      	movs	r3, #7
 8003be8:	e006      	b.n	8003bf8 <HAL_GPIO_Init+0x204>
 8003bea:	2303      	movs	r3, #3
 8003bec:	e004      	b.n	8003bf8 <HAL_GPIO_Init+0x204>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e002      	b.n	8003bf8 <HAL_GPIO_Init+0x204>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <HAL_GPIO_Init+0x204>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	f002 0203 	and.w	r2, r2, #3
 8003bfe:	0092      	lsls	r2, r2, #2
 8003c00:	4093      	lsls	r3, r2
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c08:	4935      	ldr	r1, [pc, #212]	@ (8003ce0 <HAL_GPIO_Init+0x2ec>)
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	089b      	lsrs	r3, r3, #2
 8003c0e:	3302      	adds	r3, #2
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c16:	4b38      	ldr	r3, [pc, #224]	@ (8003cf8 <HAL_GPIO_Init+0x304>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4013      	ands	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c3a:	4a2f      	ldr	r2, [pc, #188]	@ (8003cf8 <HAL_GPIO_Init+0x304>)
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c40:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf8 <HAL_GPIO_Init+0x304>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c64:	4a24      	ldr	r2, [pc, #144]	@ (8003cf8 <HAL_GPIO_Init+0x304>)
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c6a:	4b23      	ldr	r3, [pc, #140]	@ (8003cf8 <HAL_GPIO_Init+0x304>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	43db      	mvns	r3, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4013      	ands	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003cf8 <HAL_GPIO_Init+0x304>)
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c94:	4b18      	ldr	r3, [pc, #96]	@ (8003cf8 <HAL_GPIO_Init+0x304>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cb8:	4a0f      	ldr	r2, [pc, #60]	@ (8003cf8 <HAL_GPIO_Init+0x304>)
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	61fb      	str	r3, [r7, #28]
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	2b0f      	cmp	r3, #15
 8003cc8:	f67f aea2 	bls.w	8003a10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	3724      	adds	r7, #36	@ 0x24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	40013800 	.word	0x40013800
 8003ce4:	40020000 	.word	0x40020000
 8003ce8:	40020400 	.word	0x40020400
 8003cec:	40020800 	.word	0x40020800
 8003cf0:	40020c00 	.word	0x40020c00
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40013c00 	.word	0x40013c00

08003cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	807b      	strh	r3, [r7, #2]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d0c:	787b      	ldrb	r3, [r7, #1]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d12:	887a      	ldrh	r2, [r7, #2]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d18:	e003      	b.n	8003d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d1a:	887b      	ldrh	r3, [r7, #2]
 8003d1c:	041a      	lsls	r2, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	619a      	str	r2, [r3, #24]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d3a:	4b08      	ldr	r3, [pc, #32]	@ (8003d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d006      	beq.n	8003d54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d46:	4a05      	ldr	r2, [pc, #20]	@ (8003d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d48:	88fb      	ldrh	r3, [r7, #6]
 8003d4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fd fede 	bl	8001b10 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d54:	bf00      	nop
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40013c00 	.word	0x40013c00

08003d60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e267      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d075      	beq.n	8003e6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d7e:	4b88      	ldr	r3, [pc, #544]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 030c 	and.w	r3, r3, #12
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d00c      	beq.n	8003da4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d8a:	4b85      	ldr	r3, [pc, #532]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d112      	bne.n	8003dbc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d96:	4b82      	ldr	r3, [pc, #520]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003da2:	d10b      	bne.n	8003dbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da4:	4b7e      	ldr	r3, [pc, #504]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d05b      	beq.n	8003e68 <HAL_RCC_OscConfig+0x108>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d157      	bne.n	8003e68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e242      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dc4:	d106      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x74>
 8003dc6:	4b76      	ldr	r3, [pc, #472]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a75      	ldr	r2, [pc, #468]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	e01d      	b.n	8003e10 <HAL_RCC_OscConfig+0xb0>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ddc:	d10c      	bne.n	8003df8 <HAL_RCC_OscConfig+0x98>
 8003dde:	4b70      	ldr	r3, [pc, #448]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a6f      	ldr	r2, [pc, #444]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	4b6d      	ldr	r3, [pc, #436]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a6c      	ldr	r2, [pc, #432]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	e00b      	b.n	8003e10 <HAL_RCC_OscConfig+0xb0>
 8003df8:	4b69      	ldr	r3, [pc, #420]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a68      	ldr	r2, [pc, #416]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	4b66      	ldr	r3, [pc, #408]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a65      	ldr	r2, [pc, #404]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d013      	beq.n	8003e40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e18:	f7fe fae4 	bl	80023e4 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e20:	f7fe fae0 	bl	80023e4 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b64      	cmp	r3, #100	@ 0x64
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e207      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e32:	4b5b      	ldr	r3, [pc, #364]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0f0      	beq.n	8003e20 <HAL_RCC_OscConfig+0xc0>
 8003e3e:	e014      	b.n	8003e6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fe fad0 	bl	80023e4 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e48:	f7fe facc 	bl	80023e4 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b64      	cmp	r3, #100	@ 0x64
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e1f3      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e5a:	4b51      	ldr	r3, [pc, #324]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0xe8>
 8003e66:	e000      	b.n	8003e6a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d063      	beq.n	8003f3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e76:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00b      	beq.n	8003e9a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e82:	4b47      	ldr	r3, [pc, #284]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d11c      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e8e:	4b44      	ldr	r3, [pc, #272]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d116      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9a:	4b41      	ldr	r3, [pc, #260]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d005      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x152>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d001      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e1c7      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4937      	ldr	r1, [pc, #220]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec6:	e03a      	b.n	8003f3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d020      	beq.n	8003f12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed0:	4b34      	ldr	r3, [pc, #208]	@ (8003fa4 <HAL_RCC_OscConfig+0x244>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed6:	f7fe fa85 	bl	80023e4 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ede:	f7fe fa81 	bl	80023e4 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e1a8      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003efc:	4b28      	ldr	r3, [pc, #160]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4925      	ldr	r1, [pc, #148]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	600b      	str	r3, [r1, #0]
 8003f10:	e015      	b.n	8003f3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f12:	4b24      	ldr	r3, [pc, #144]	@ (8003fa4 <HAL_RCC_OscConfig+0x244>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f18:	f7fe fa64 	bl	80023e4 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f20:	f7fe fa60 	bl	80023e4 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e187      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f32:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f0      	bne.n	8003f20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d036      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d016      	beq.n	8003f80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f52:	4b15      	ldr	r3, [pc, #84]	@ (8003fa8 <HAL_RCC_OscConfig+0x248>)
 8003f54:	2201      	movs	r2, #1
 8003f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f58:	f7fe fa44 	bl	80023e4 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f60:	f7fe fa40 	bl	80023e4 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e167      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f72:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCC_OscConfig+0x200>
 8003f7e:	e01b      	b.n	8003fb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f80:	4b09      	ldr	r3, [pc, #36]	@ (8003fa8 <HAL_RCC_OscConfig+0x248>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f86:	f7fe fa2d 	bl	80023e4 <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f8c:	e00e      	b.n	8003fac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f8e:	f7fe fa29 	bl	80023e4 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d907      	bls.n	8003fac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e150      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	42470000 	.word	0x42470000
 8003fa8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fac:	4b88      	ldr	r3, [pc, #544]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8003fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1ea      	bne.n	8003f8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8097 	beq.w	80040f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fca:	4b81      	ldr	r3, [pc, #516]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10f      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	4b7d      	ldr	r3, [pc, #500]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fde:	4a7c      	ldr	r2, [pc, #496]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8003fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fe6:	4b7a      	ldr	r3, [pc, #488]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fee:	60bb      	str	r3, [r7, #8]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff6:	4b77      	ldr	r3, [pc, #476]	@ (80041d4 <HAL_RCC_OscConfig+0x474>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d118      	bne.n	8004034 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004002:	4b74      	ldr	r3, [pc, #464]	@ (80041d4 <HAL_RCC_OscConfig+0x474>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a73      	ldr	r2, [pc, #460]	@ (80041d4 <HAL_RCC_OscConfig+0x474>)
 8004008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800400c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800400e:	f7fe f9e9 	bl	80023e4 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004016:	f7fe f9e5 	bl	80023e4 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e10c      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004028:	4b6a      	ldr	r3, [pc, #424]	@ (80041d4 <HAL_RCC_OscConfig+0x474>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0f0      	beq.n	8004016 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d106      	bne.n	800404a <HAL_RCC_OscConfig+0x2ea>
 800403c:	4b64      	ldr	r3, [pc, #400]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004040:	4a63      	ldr	r2, [pc, #396]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	6713      	str	r3, [r2, #112]	@ 0x70
 8004048:	e01c      	b.n	8004084 <HAL_RCC_OscConfig+0x324>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b05      	cmp	r3, #5
 8004050:	d10c      	bne.n	800406c <HAL_RCC_OscConfig+0x30c>
 8004052:	4b5f      	ldr	r3, [pc, #380]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004056:	4a5e      	ldr	r2, [pc, #376]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8004058:	f043 0304 	orr.w	r3, r3, #4
 800405c:	6713      	str	r3, [r2, #112]	@ 0x70
 800405e:	4b5c      	ldr	r3, [pc, #368]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004062:	4a5b      	ldr	r2, [pc, #364]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8004064:	f043 0301 	orr.w	r3, r3, #1
 8004068:	6713      	str	r3, [r2, #112]	@ 0x70
 800406a:	e00b      	b.n	8004084 <HAL_RCC_OscConfig+0x324>
 800406c:	4b58      	ldr	r3, [pc, #352]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 800406e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004070:	4a57      	ldr	r2, [pc, #348]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8004072:	f023 0301 	bic.w	r3, r3, #1
 8004076:	6713      	str	r3, [r2, #112]	@ 0x70
 8004078:	4b55      	ldr	r3, [pc, #340]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407c:	4a54      	ldr	r2, [pc, #336]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 800407e:	f023 0304 	bic.w	r3, r3, #4
 8004082:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d015      	beq.n	80040b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408c:	f7fe f9aa 	bl	80023e4 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004092:	e00a      	b.n	80040aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004094:	f7fe f9a6 	bl	80023e4 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e0cb      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040aa:	4b49      	ldr	r3, [pc, #292]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0ee      	beq.n	8004094 <HAL_RCC_OscConfig+0x334>
 80040b6:	e014      	b.n	80040e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b8:	f7fe f994 	bl	80023e4 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040be:	e00a      	b.n	80040d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c0:	f7fe f990 	bl	80023e4 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e0b5      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d6:	4b3e      	ldr	r3, [pc, #248]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1ee      	bne.n	80040c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d105      	bne.n	80040f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e8:	4b39      	ldr	r3, [pc, #228]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 80040ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ec:	4a38      	ldr	r2, [pc, #224]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 80040ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 80a1 	beq.w	8004240 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040fe:	4b34      	ldr	r3, [pc, #208]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	2b08      	cmp	r3, #8
 8004108:	d05c      	beq.n	80041c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d141      	bne.n	8004196 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004112:	4b31      	ldr	r3, [pc, #196]	@ (80041d8 <HAL_RCC_OscConfig+0x478>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004118:	f7fe f964 	bl	80023e4 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004120:	f7fe f960 	bl	80023e4 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e087      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004132:	4b27      	ldr	r3, [pc, #156]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69da      	ldr	r2, [r3, #28]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414c:	019b      	lsls	r3, r3, #6
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004154:	085b      	lsrs	r3, r3, #1
 8004156:	3b01      	subs	r3, #1
 8004158:	041b      	lsls	r3, r3, #16
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004160:	061b      	lsls	r3, r3, #24
 8004162:	491b      	ldr	r1, [pc, #108]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8004164:	4313      	orrs	r3, r2
 8004166:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004168:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <HAL_RCC_OscConfig+0x478>)
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416e:	f7fe f939 	bl	80023e4 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004176:	f7fe f935 	bl	80023e4 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e05c      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004188:	4b11      	ldr	r3, [pc, #68]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <HAL_RCC_OscConfig+0x416>
 8004194:	e054      	b.n	8004240 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004196:	4b10      	ldr	r3, [pc, #64]	@ (80041d8 <HAL_RCC_OscConfig+0x478>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419c:	f7fe f922 	bl	80023e4 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fe f91e 	bl	80023e4 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e045      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b6:	4b06      	ldr	r3, [pc, #24]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0x444>
 80041c2:	e03d      	b.n	8004240 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d107      	bne.n	80041dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e038      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
 80041d0:	40023800 	.word	0x40023800
 80041d4:	40007000 	.word	0x40007000
 80041d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041dc:	4b1b      	ldr	r3, [pc, #108]	@ (800424c <HAL_RCC_OscConfig+0x4ec>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d028      	beq.n	800423c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d121      	bne.n	800423c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004202:	429a      	cmp	r2, r3
 8004204:	d11a      	bne.n	800423c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800420c:	4013      	ands	r3, r2
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004212:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004214:	4293      	cmp	r3, r2
 8004216:	d111      	bne.n	800423c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004222:	085b      	lsrs	r3, r3, #1
 8004224:	3b01      	subs	r3, #1
 8004226:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004228:	429a      	cmp	r2, r3
 800422a:	d107      	bne.n	800423c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004236:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004238:	429a      	cmp	r2, r3
 800423a:	d001      	beq.n	8004240 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40023800 	.word	0x40023800

08004250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0cc      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004264:	4b68      	ldr	r3, [pc, #416]	@ (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d90c      	bls.n	800428c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004272:	4b65      	ldr	r3, [pc, #404]	@ (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800427a:	4b63      	ldr	r3, [pc, #396]	@ (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d001      	beq.n	800428c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0b8      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d020      	beq.n	80042da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042a4:	4b59      	ldr	r3, [pc, #356]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4a58      	ldr	r2, [pc, #352]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042bc:	4b53      	ldr	r3, [pc, #332]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	4a52      	ldr	r2, [pc, #328]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c8:	4b50      	ldr	r3, [pc, #320]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	494d      	ldr	r1, [pc, #308]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d044      	beq.n	8004370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d107      	bne.n	80042fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ee:	4b47      	ldr	r3, [pc, #284]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d119      	bne.n	800432e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e07f      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d003      	beq.n	800430e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800430a:	2b03      	cmp	r3, #3
 800430c:	d107      	bne.n	800431e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430e:	4b3f      	ldr	r3, [pc, #252]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d109      	bne.n	800432e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e06f      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431e:	4b3b      	ldr	r3, [pc, #236]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e067      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800432e:	4b37      	ldr	r3, [pc, #220]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f023 0203 	bic.w	r2, r3, #3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	4934      	ldr	r1, [pc, #208]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	4313      	orrs	r3, r2
 800433e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004340:	f7fe f850 	bl	80023e4 <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004346:	e00a      	b.n	800435e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004348:	f7fe f84c 	bl	80023e4 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e04f      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435e:	4b2b      	ldr	r3, [pc, #172]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 020c 	and.w	r2, r3, #12
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	429a      	cmp	r2, r3
 800436e:	d1eb      	bne.n	8004348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004370:	4b25      	ldr	r3, [pc, #148]	@ (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d20c      	bcs.n	8004398 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437e:	4b22      	ldr	r3, [pc, #136]	@ (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004386:	4b20      	ldr	r3, [pc, #128]	@ (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d001      	beq.n	8004398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e032      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a4:	4b19      	ldr	r3, [pc, #100]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4916      	ldr	r1, [pc, #88]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043c2:	4b12      	ldr	r3, [pc, #72]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	490e      	ldr	r1, [pc, #56]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043d6:	f000 f821 	bl	800441c <HAL_RCC_GetSysClockFreq>
 80043da:	4602      	mov	r2, r0
 80043dc:	4b0b      	ldr	r3, [pc, #44]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	490a      	ldr	r1, [pc, #40]	@ (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 80043e8:	5ccb      	ldrb	r3, [r1, r3]
 80043ea:	fa22 f303 	lsr.w	r3, r2, r3
 80043ee:	4a09      	ldr	r2, [pc, #36]	@ (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80043f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80043f2:	4b09      	ldr	r3, [pc, #36]	@ (8004418 <HAL_RCC_ClockConfig+0x1c8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fd ffb0 	bl	800235c <HAL_InitTick>

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40023c00 	.word	0x40023c00
 800440c:	40023800 	.word	0x40023800
 8004410:	0800a96c 	.word	0x0800a96c
 8004414:	20000014 	.word	0x20000014
 8004418:	20000018 	.word	0x20000018

0800441c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800441c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004420:	b094      	sub	sp, #80	@ 0x50
 8004422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004434:	4b79      	ldr	r3, [pc, #484]	@ (800461c <HAL_RCC_GetSysClockFreq+0x200>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 030c 	and.w	r3, r3, #12
 800443c:	2b08      	cmp	r3, #8
 800443e:	d00d      	beq.n	800445c <HAL_RCC_GetSysClockFreq+0x40>
 8004440:	2b08      	cmp	r3, #8
 8004442:	f200 80e1 	bhi.w	8004608 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_RCC_GetSysClockFreq+0x34>
 800444a:	2b04      	cmp	r3, #4
 800444c:	d003      	beq.n	8004456 <HAL_RCC_GetSysClockFreq+0x3a>
 800444e:	e0db      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004450:	4b73      	ldr	r3, [pc, #460]	@ (8004620 <HAL_RCC_GetSysClockFreq+0x204>)
 8004452:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004454:	e0db      	b.n	800460e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004456:	4b73      	ldr	r3, [pc, #460]	@ (8004624 <HAL_RCC_GetSysClockFreq+0x208>)
 8004458:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800445a:	e0d8      	b.n	800460e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800445c:	4b6f      	ldr	r3, [pc, #444]	@ (800461c <HAL_RCC_GetSysClockFreq+0x200>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004464:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004466:	4b6d      	ldr	r3, [pc, #436]	@ (800461c <HAL_RCC_GetSysClockFreq+0x200>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d063      	beq.n	800453a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004472:	4b6a      	ldr	r3, [pc, #424]	@ (800461c <HAL_RCC_GetSysClockFreq+0x200>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	099b      	lsrs	r3, r3, #6
 8004478:	2200      	movs	r2, #0
 800447a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800447c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800447e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004484:	633b      	str	r3, [r7, #48]	@ 0x30
 8004486:	2300      	movs	r3, #0
 8004488:	637b      	str	r3, [r7, #52]	@ 0x34
 800448a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800448e:	4622      	mov	r2, r4
 8004490:	462b      	mov	r3, r5
 8004492:	f04f 0000 	mov.w	r0, #0
 8004496:	f04f 0100 	mov.w	r1, #0
 800449a:	0159      	lsls	r1, r3, #5
 800449c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044a0:	0150      	lsls	r0, r2, #5
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4621      	mov	r1, r4
 80044a8:	1a51      	subs	r1, r2, r1
 80044aa:	6139      	str	r1, [r7, #16]
 80044ac:	4629      	mov	r1, r5
 80044ae:	eb63 0301 	sbc.w	r3, r3, r1
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044c0:	4659      	mov	r1, fp
 80044c2:	018b      	lsls	r3, r1, #6
 80044c4:	4651      	mov	r1, sl
 80044c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044ca:	4651      	mov	r1, sl
 80044cc:	018a      	lsls	r2, r1, #6
 80044ce:	4651      	mov	r1, sl
 80044d0:	ebb2 0801 	subs.w	r8, r2, r1
 80044d4:	4659      	mov	r1, fp
 80044d6:	eb63 0901 	sbc.w	r9, r3, r1
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ee:	4690      	mov	r8, r2
 80044f0:	4699      	mov	r9, r3
 80044f2:	4623      	mov	r3, r4
 80044f4:	eb18 0303 	adds.w	r3, r8, r3
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	462b      	mov	r3, r5
 80044fc:	eb49 0303 	adc.w	r3, r9, r3
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800450e:	4629      	mov	r1, r5
 8004510:	024b      	lsls	r3, r1, #9
 8004512:	4621      	mov	r1, r4
 8004514:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004518:	4621      	mov	r1, r4
 800451a:	024a      	lsls	r2, r1, #9
 800451c:	4610      	mov	r0, r2
 800451e:	4619      	mov	r1, r3
 8004520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004522:	2200      	movs	r2, #0
 8004524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004526:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004528:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800452c:	f7fc fbb4 	bl	8000c98 <__aeabi_uldivmod>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4613      	mov	r3, r2
 8004536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004538:	e058      	b.n	80045ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800453a:	4b38      	ldr	r3, [pc, #224]	@ (800461c <HAL_RCC_GetSysClockFreq+0x200>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	099b      	lsrs	r3, r3, #6
 8004540:	2200      	movs	r2, #0
 8004542:	4618      	mov	r0, r3
 8004544:	4611      	mov	r1, r2
 8004546:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800454a:	623b      	str	r3, [r7, #32]
 800454c:	2300      	movs	r3, #0
 800454e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004550:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004554:	4642      	mov	r2, r8
 8004556:	464b      	mov	r3, r9
 8004558:	f04f 0000 	mov.w	r0, #0
 800455c:	f04f 0100 	mov.w	r1, #0
 8004560:	0159      	lsls	r1, r3, #5
 8004562:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004566:	0150      	lsls	r0, r2, #5
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4641      	mov	r1, r8
 800456e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004572:	4649      	mov	r1, r9
 8004574:	eb63 0b01 	sbc.w	fp, r3, r1
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004584:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004588:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800458c:	ebb2 040a 	subs.w	r4, r2, sl
 8004590:	eb63 050b 	sbc.w	r5, r3, fp
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	00eb      	lsls	r3, r5, #3
 800459e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045a2:	00e2      	lsls	r2, r4, #3
 80045a4:	4614      	mov	r4, r2
 80045a6:	461d      	mov	r5, r3
 80045a8:	4643      	mov	r3, r8
 80045aa:	18e3      	adds	r3, r4, r3
 80045ac:	603b      	str	r3, [r7, #0]
 80045ae:	464b      	mov	r3, r9
 80045b0:	eb45 0303 	adc.w	r3, r5, r3
 80045b4:	607b      	str	r3, [r7, #4]
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045c2:	4629      	mov	r1, r5
 80045c4:	028b      	lsls	r3, r1, #10
 80045c6:	4621      	mov	r1, r4
 80045c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045cc:	4621      	mov	r1, r4
 80045ce:	028a      	lsls	r2, r1, #10
 80045d0:	4610      	mov	r0, r2
 80045d2:	4619      	mov	r1, r3
 80045d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045d6:	2200      	movs	r2, #0
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	61fa      	str	r2, [r7, #28]
 80045dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045e0:	f7fc fb5a 	bl	8000c98 <__aeabi_uldivmod>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4613      	mov	r3, r2
 80045ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80045ec:	4b0b      	ldr	r3, [pc, #44]	@ (800461c <HAL_RCC_GetSysClockFreq+0x200>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	0c1b      	lsrs	r3, r3, #16
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	3301      	adds	r3, #1
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80045fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004600:	fbb2 f3f3 	udiv	r3, r2, r3
 8004604:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004606:	e002      	b.n	800460e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004608:	4b05      	ldr	r3, [pc, #20]	@ (8004620 <HAL_RCC_GetSysClockFreq+0x204>)
 800460a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800460c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800460e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004610:	4618      	mov	r0, r3
 8004612:	3750      	adds	r7, #80	@ 0x50
 8004614:	46bd      	mov	sp, r7
 8004616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800461a:	bf00      	nop
 800461c:	40023800 	.word	0x40023800
 8004620:	00f42400 	.word	0x00f42400
 8004624:	007a1200 	.word	0x007a1200

08004628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800462c:	4b03      	ldr	r3, [pc, #12]	@ (800463c <HAL_RCC_GetHCLKFreq+0x14>)
 800462e:	681b      	ldr	r3, [r3, #0]
}
 8004630:	4618      	mov	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	20000014 	.word	0x20000014

08004640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004644:	f7ff fff0 	bl	8004628 <HAL_RCC_GetHCLKFreq>
 8004648:	4602      	mov	r2, r0
 800464a:	4b05      	ldr	r3, [pc, #20]	@ (8004660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	0a9b      	lsrs	r3, r3, #10
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	4903      	ldr	r1, [pc, #12]	@ (8004664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004656:	5ccb      	ldrb	r3, [r1, r3]
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40023800 	.word	0x40023800
 8004664:	0800a97c 	.word	0x0800a97c

08004668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800466c:	f7ff ffdc 	bl	8004628 <HAL_RCC_GetHCLKFreq>
 8004670:	4602      	mov	r2, r0
 8004672:	4b05      	ldr	r3, [pc, #20]	@ (8004688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	0b5b      	lsrs	r3, r3, #13
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	4903      	ldr	r1, [pc, #12]	@ (800468c <HAL_RCC_GetPCLK2Freq+0x24>)
 800467e:	5ccb      	ldrb	r3, [r1, r3]
 8004680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004684:	4618      	mov	r0, r3
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40023800 	.word	0x40023800
 800468c:	0800a97c 	.word	0x0800a97c

08004690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e041      	b.n	8004726 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fd fbca 	bl	8001e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3304      	adds	r3, #4
 80046cc:	4619      	mov	r1, r3
 80046ce:	4610      	mov	r0, r2
 80046d0:	f000 fc3c 	bl	8004f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d001      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e044      	b.n	80047d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1e      	ldr	r2, [pc, #120]	@ (80047e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d018      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x6c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004772:	d013      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x6c>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1a      	ldr	r2, [pc, #104]	@ (80047e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00e      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x6c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a19      	ldr	r2, [pc, #100]	@ (80047e8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d009      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x6c>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a17      	ldr	r2, [pc, #92]	@ (80047ec <HAL_TIM_Base_Start_IT+0xbc>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d004      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x6c>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a16      	ldr	r2, [pc, #88]	@ (80047f0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d111      	bne.n	80047c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b06      	cmp	r3, #6
 80047ac:	d010      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0201 	orr.w	r2, r2, #1
 80047bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047be:	e007      	b.n	80047d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40010000 	.word	0x40010000
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800
 80047ec:	40000c00 	.word	0x40000c00
 80047f0:	40014000 	.word	0x40014000

080047f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e041      	b.n	800488a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f839 	bl	8004892 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	4619      	mov	r1, r3
 8004832:	4610      	mov	r0, r2
 8004834:	f000 fb8a 	bl	8004f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d109      	bne.n	80048cc <HAL_TIM_PWM_Start+0x24>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	bf14      	ite	ne
 80048c4:	2301      	movne	r3, #1
 80048c6:	2300      	moveq	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	e022      	b.n	8004912 <HAL_TIM_PWM_Start+0x6a>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d109      	bne.n	80048e6 <HAL_TIM_PWM_Start+0x3e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b01      	cmp	r3, #1
 80048dc:	bf14      	ite	ne
 80048de:	2301      	movne	r3, #1
 80048e0:	2300      	moveq	r3, #0
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	e015      	b.n	8004912 <HAL_TIM_PWM_Start+0x6a>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d109      	bne.n	8004900 <HAL_TIM_PWM_Start+0x58>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	bf14      	ite	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	2300      	moveq	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	e008      	b.n	8004912 <HAL_TIM_PWM_Start+0x6a>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e068      	b.n	80049ec <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d104      	bne.n	800492a <HAL_TIM_PWM_Start+0x82>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004928:	e013      	b.n	8004952 <HAL_TIM_PWM_Start+0xaa>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b04      	cmp	r3, #4
 800492e:	d104      	bne.n	800493a <HAL_TIM_PWM_Start+0x92>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004938:	e00b      	b.n	8004952 <HAL_TIM_PWM_Start+0xaa>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b08      	cmp	r3, #8
 800493e:	d104      	bne.n	800494a <HAL_TIM_PWM_Start+0xa2>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004948:	e003      	b.n	8004952 <HAL_TIM_PWM_Start+0xaa>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2202      	movs	r2, #2
 800494e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2201      	movs	r2, #1
 8004958:	6839      	ldr	r1, [r7, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fda2 	bl	80054a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a23      	ldr	r2, [pc, #140]	@ (80049f4 <HAL_TIM_PWM_Start+0x14c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d107      	bne.n	800497a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004978:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a1d      	ldr	r2, [pc, #116]	@ (80049f4 <HAL_TIM_PWM_Start+0x14c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d018      	beq.n	80049b6 <HAL_TIM_PWM_Start+0x10e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800498c:	d013      	beq.n	80049b6 <HAL_TIM_PWM_Start+0x10e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a19      	ldr	r2, [pc, #100]	@ (80049f8 <HAL_TIM_PWM_Start+0x150>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00e      	beq.n	80049b6 <HAL_TIM_PWM_Start+0x10e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a17      	ldr	r2, [pc, #92]	@ (80049fc <HAL_TIM_PWM_Start+0x154>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d009      	beq.n	80049b6 <HAL_TIM_PWM_Start+0x10e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a16      	ldr	r2, [pc, #88]	@ (8004a00 <HAL_TIM_PWM_Start+0x158>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d004      	beq.n	80049b6 <HAL_TIM_PWM_Start+0x10e>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a14      	ldr	r2, [pc, #80]	@ (8004a04 <HAL_TIM_PWM_Start+0x15c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d111      	bne.n	80049da <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b06      	cmp	r3, #6
 80049c6:	d010      	beq.n	80049ea <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d8:	e007      	b.n	80049ea <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0201 	orr.w	r2, r2, #1
 80049e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40010000 	.word	0x40010000
 80049f8:	40000400 	.word	0x40000400
 80049fc:	40000800 	.word	0x40000800
 8004a00:	40000c00 	.word	0x40000c00
 8004a04:	40014000 	.word	0x40014000

08004a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d020      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01b      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0202 	mvn.w	r2, #2
 8004a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fa5b 	bl	8004f0e <HAL_TIM_IC_CaptureCallback>
 8004a58:	e005      	b.n	8004a66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fa4d 	bl	8004efa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fa5e 	bl	8004f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d020      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01b      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0204 	mvn.w	r2, #4
 8004a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fa35 	bl	8004f0e <HAL_TIM_IC_CaptureCallback>
 8004aa4:	e005      	b.n	8004ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fa27 	bl	8004efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 fa38 	bl	8004f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d020      	beq.n	8004b04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01b      	beq.n	8004b04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0208 	mvn.w	r2, #8
 8004ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2204      	movs	r2, #4
 8004ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fa0f 	bl	8004f0e <HAL_TIM_IC_CaptureCallback>
 8004af0:	e005      	b.n	8004afe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fa01 	bl	8004efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fa12 	bl	8004f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d020      	beq.n	8004b50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01b      	beq.n	8004b50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0210 	mvn.w	r2, #16
 8004b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2208      	movs	r2, #8
 8004b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f9e9 	bl	8004f0e <HAL_TIM_IC_CaptureCallback>
 8004b3c:	e005      	b.n	8004b4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f9db 	bl	8004efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f9ec 	bl	8004f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00c      	beq.n	8004b74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d007      	beq.n	8004b74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0201 	mvn.w	r2, #1
 8004b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fc ff1c 	bl	80019ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00c      	beq.n	8004b98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fd76 	bl	8005684 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00c      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f9bd 	bl	8004f36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00c      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d007      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0220 	mvn.w	r2, #32
 8004bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fd48 	bl	8005670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004be0:	bf00      	nop
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e0ae      	b.n	8004d64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b0c      	cmp	r3, #12
 8004c12:	f200 809f 	bhi.w	8004d54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c16:	a201      	add	r2, pc, #4	@ (adr r2, 8004c1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1c:	08004c51 	.word	0x08004c51
 8004c20:	08004d55 	.word	0x08004d55
 8004c24:	08004d55 	.word	0x08004d55
 8004c28:	08004d55 	.word	0x08004d55
 8004c2c:	08004c91 	.word	0x08004c91
 8004c30:	08004d55 	.word	0x08004d55
 8004c34:	08004d55 	.word	0x08004d55
 8004c38:	08004d55 	.word	0x08004d55
 8004c3c:	08004cd3 	.word	0x08004cd3
 8004c40:	08004d55 	.word	0x08004d55
 8004c44:	08004d55 	.word	0x08004d55
 8004c48:	08004d55 	.word	0x08004d55
 8004c4c:	08004d13 	.word	0x08004d13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 f9fe 	bl	8005058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699a      	ldr	r2, [r3, #24]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0208 	orr.w	r2, r2, #8
 8004c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699a      	ldr	r2, [r3, #24]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0204 	bic.w	r2, r2, #4
 8004c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6999      	ldr	r1, [r3, #24]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	619a      	str	r2, [r3, #24]
      break;
 8004c8e:	e064      	b.n	8004d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fa44 	bl	8005124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6999      	ldr	r1, [r3, #24]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	021a      	lsls	r2, r3, #8
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	619a      	str	r2, [r3, #24]
      break;
 8004cd0:	e043      	b.n	8004d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 fa8f 	bl	80051fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69da      	ldr	r2, [r3, #28]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0208 	orr.w	r2, r2, #8
 8004cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69da      	ldr	r2, [r3, #28]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0204 	bic.w	r2, r2, #4
 8004cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69d9      	ldr	r1, [r3, #28]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	61da      	str	r2, [r3, #28]
      break;
 8004d10:	e023      	b.n	8004d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68b9      	ldr	r1, [r7, #8]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fad9 	bl	80052d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69d9      	ldr	r1, [r3, #28]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	021a      	lsls	r2, r3, #8
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	61da      	str	r2, [r3, #28]
      break;
 8004d52:	e002      	b.n	8004d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	75fb      	strb	r3, [r7, #23]
      break;
 8004d58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_TIM_ConfigClockSource+0x1c>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e0b4      	b.n	8004ef2 <HAL_TIM_ConfigClockSource+0x186>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dc0:	d03e      	beq.n	8004e40 <HAL_TIM_ConfigClockSource+0xd4>
 8004dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dc6:	f200 8087 	bhi.w	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dce:	f000 8086 	beq.w	8004ede <HAL_TIM_ConfigClockSource+0x172>
 8004dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd6:	d87f      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd8:	2b70      	cmp	r3, #112	@ 0x70
 8004dda:	d01a      	beq.n	8004e12 <HAL_TIM_ConfigClockSource+0xa6>
 8004ddc:	2b70      	cmp	r3, #112	@ 0x70
 8004dde:	d87b      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004de0:	2b60      	cmp	r3, #96	@ 0x60
 8004de2:	d050      	beq.n	8004e86 <HAL_TIM_ConfigClockSource+0x11a>
 8004de4:	2b60      	cmp	r3, #96	@ 0x60
 8004de6:	d877      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004de8:	2b50      	cmp	r3, #80	@ 0x50
 8004dea:	d03c      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0xfa>
 8004dec:	2b50      	cmp	r3, #80	@ 0x50
 8004dee:	d873      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004df0:	2b40      	cmp	r3, #64	@ 0x40
 8004df2:	d058      	beq.n	8004ea6 <HAL_TIM_ConfigClockSource+0x13a>
 8004df4:	2b40      	cmp	r3, #64	@ 0x40
 8004df6:	d86f      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004df8:	2b30      	cmp	r3, #48	@ 0x30
 8004dfa:	d064      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8004dfc:	2b30      	cmp	r3, #48	@ 0x30
 8004dfe:	d86b      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	d060      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d867      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d05c      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8004e0c:	2b10      	cmp	r3, #16
 8004e0e:	d05a      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8004e10:	e062      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e22:	f000 fb1f 	bl	8005464 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	609a      	str	r2, [r3, #8]
      break;
 8004e3e:	e04f      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e50:	f000 fb08 	bl	8005464 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e62:	609a      	str	r2, [r3, #8]
      break;
 8004e64:	e03c      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e72:	461a      	mov	r2, r3
 8004e74:	f000 fa7c 	bl	8005370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2150      	movs	r1, #80	@ 0x50
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fad5 	bl	800542e <TIM_ITRx_SetConfig>
      break;
 8004e84:	e02c      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e92:	461a      	mov	r2, r3
 8004e94:	f000 fa9b 	bl	80053ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2160      	movs	r1, #96	@ 0x60
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fac5 	bl	800542e <TIM_ITRx_SetConfig>
      break;
 8004ea4:	e01c      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f000 fa5c 	bl	8005370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2140      	movs	r1, #64	@ 0x40
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fab5 	bl	800542e <TIM_ITRx_SetConfig>
      break;
 8004ec4:	e00c      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	f000 faac 	bl	800542e <TIM_ITRx_SetConfig>
      break;
 8004ed6:	e003      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	73fb      	strb	r3, [r7, #15]
      break;
 8004edc:	e000      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ede:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
	...

08004f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a37      	ldr	r2, [pc, #220]	@ (800503c <TIM_Base_SetConfig+0xf0>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00f      	beq.n	8004f84 <TIM_Base_SetConfig+0x38>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f6a:	d00b      	beq.n	8004f84 <TIM_Base_SetConfig+0x38>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a34      	ldr	r2, [pc, #208]	@ (8005040 <TIM_Base_SetConfig+0xf4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d007      	beq.n	8004f84 <TIM_Base_SetConfig+0x38>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a33      	ldr	r2, [pc, #204]	@ (8005044 <TIM_Base_SetConfig+0xf8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_Base_SetConfig+0x38>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a32      	ldr	r2, [pc, #200]	@ (8005048 <TIM_Base_SetConfig+0xfc>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d108      	bne.n	8004f96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a28      	ldr	r2, [pc, #160]	@ (800503c <TIM_Base_SetConfig+0xf0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01b      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa4:	d017      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a25      	ldr	r2, [pc, #148]	@ (8005040 <TIM_Base_SetConfig+0xf4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d013      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a24      	ldr	r2, [pc, #144]	@ (8005044 <TIM_Base_SetConfig+0xf8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00f      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a23      	ldr	r2, [pc, #140]	@ (8005048 <TIM_Base_SetConfig+0xfc>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00b      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a22      	ldr	r2, [pc, #136]	@ (800504c <TIM_Base_SetConfig+0x100>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d007      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a21      	ldr	r2, [pc, #132]	@ (8005050 <TIM_Base_SetConfig+0x104>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d003      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a20      	ldr	r2, [pc, #128]	@ (8005054 <TIM_Base_SetConfig+0x108>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d108      	bne.n	8004fe8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a0c      	ldr	r2, [pc, #48]	@ (800503c <TIM_Base_SetConfig+0xf0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d103      	bne.n	8005016 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f043 0204 	orr.w	r2, r3, #4
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	601a      	str	r2, [r3, #0]
}
 800502e:	bf00      	nop
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40010000 	.word	0x40010000
 8005040:	40000400 	.word	0x40000400
 8005044:	40000800 	.word	0x40000800
 8005048:	40000c00 	.word	0x40000c00
 800504c:	40014000 	.word	0x40014000
 8005050:	40014400 	.word	0x40014400
 8005054:	40014800 	.word	0x40014800

08005058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	f023 0201 	bic.w	r2, r3, #1
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0303 	bic.w	r3, r3, #3
 800508e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f023 0302 	bic.w	r3, r3, #2
 80050a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005120 <TIM_OC1_SetConfig+0xc8>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d10c      	bne.n	80050ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f023 0308 	bic.w	r3, r3, #8
 80050ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f023 0304 	bic.w	r3, r3, #4
 80050cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a13      	ldr	r2, [pc, #76]	@ (8005120 <TIM_OC1_SetConfig+0xc8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d111      	bne.n	80050fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	621a      	str	r2, [r3, #32]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	40010000 	.word	0x40010000

08005124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	f023 0210 	bic.w	r2, r3, #16
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800515a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	021b      	lsls	r3, r3, #8
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f023 0320 	bic.w	r3, r3, #32
 800516e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a1e      	ldr	r2, [pc, #120]	@ (80051f8 <TIM_OC2_SetConfig+0xd4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d10d      	bne.n	80051a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800518a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4313      	orrs	r3, r2
 8005196:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800519e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a15      	ldr	r2, [pc, #84]	@ (80051f8 <TIM_OC2_SetConfig+0xd4>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d113      	bne.n	80051d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	621a      	str	r2, [r3, #32]
}
 80051ea:	bf00      	nop
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40010000 	.word	0x40010000

080051fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800522a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0303 	bic.w	r3, r3, #3
 8005232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	021b      	lsls	r3, r3, #8
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	4313      	orrs	r3, r2
 8005250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a1d      	ldr	r2, [pc, #116]	@ (80052cc <TIM_OC3_SetConfig+0xd0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d10d      	bne.n	8005276 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a14      	ldr	r2, [pc, #80]	@ (80052cc <TIM_OC3_SetConfig+0xd0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d113      	bne.n	80052a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800528c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	4313      	orrs	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	621a      	str	r2, [r3, #32]
}
 80052c0:	bf00      	nop
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	40010000 	.word	0x40010000

080052d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800531a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	031b      	lsls	r3, r3, #12
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a10      	ldr	r2, [pc, #64]	@ (800536c <TIM_OC4_SetConfig+0x9c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d109      	bne.n	8005344 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005336:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	019b      	lsls	r3, r3, #6
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40010000 	.word	0x40010000

08005370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f023 0201 	bic.w	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800539a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f023 030a 	bic.w	r3, r3, #10
 80053ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	621a      	str	r2, [r3, #32]
}
 80053c2:	bf00      	nop
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b087      	sub	sp, #28
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	f023 0210 	bic.w	r2, r3, #16
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	031b      	lsls	r3, r3, #12
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800540a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	621a      	str	r2, [r3, #32]
}
 8005422:	bf00      	nop
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800542e:	b480      	push	{r7}
 8005430:	b085      	sub	sp, #20
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005444:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	f043 0307 	orr.w	r3, r3, #7
 8005450:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	609a      	str	r2, [r3, #8]
}
 8005458:	bf00      	nop
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800547e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	021a      	lsls	r2, r3, #8
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	431a      	orrs	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4313      	orrs	r3, r2
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	4313      	orrs	r3, r2
 8005490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	609a      	str	r2, [r3, #8]
}
 8005498:	bf00      	nop
 800549a:	371c      	adds	r7, #28
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f003 031f 	and.w	r3, r3, #31
 80054b6:	2201      	movs	r2, #1
 80054b8:	fa02 f303 	lsl.w	r3, r2, r3
 80054bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a1a      	ldr	r2, [r3, #32]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	43db      	mvns	r3, r3
 80054c6:	401a      	ands	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a1a      	ldr	r2, [r3, #32]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f003 031f 	and.w	r3, r3, #31
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	fa01 f303 	lsl.w	r3, r1, r3
 80054dc:	431a      	orrs	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	621a      	str	r2, [r3, #32]
}
 80054e2:	bf00      	nop
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
	...

080054f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005504:	2302      	movs	r3, #2
 8005506:	e050      	b.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800552e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1c      	ldr	r2, [pc, #112]	@ (80055b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d018      	beq.n	800557e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005554:	d013      	beq.n	800557e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a18      	ldr	r2, [pc, #96]	@ (80055bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00e      	beq.n	800557e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a16      	ldr	r2, [pc, #88]	@ (80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d009      	beq.n	800557e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a15      	ldr	r2, [pc, #84]	@ (80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d004      	beq.n	800557e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a13      	ldr	r2, [pc, #76]	@ (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d10c      	bne.n	8005598 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005584:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	4313      	orrs	r3, r2
 800558e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40010000 	.word	0x40010000
 80055bc:	40000400 	.word	0x40000400
 80055c0:	40000800 	.word	0x40000800
 80055c4:	40000c00 	.word	0x40000c00
 80055c8:	40014000 	.word	0x40014000

080055cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e03d      	b.n	8005664 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e042      	b.n	8005730 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d106      	bne.n	80056c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fc fc78 	bl	8001fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2224      	movs	r2, #36	@ 0x24
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fdd3 	bl	8006288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	691a      	ldr	r2, [r3, #16]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695a      	ldr	r2, [r3, #20]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005700:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005710:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08a      	sub	sp, #40	@ 0x28
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	4613      	mov	r3, r2
 8005746:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b20      	cmp	r3, #32
 8005756:	d175      	bne.n	8005844 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_UART_Transmit+0x2c>
 800575e:	88fb      	ldrh	r3, [r7, #6]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e06e      	b.n	8005846 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2221      	movs	r2, #33	@ 0x21
 8005772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005776:	f7fc fe35 	bl	80023e4 <HAL_GetTick>
 800577a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	88fa      	ldrh	r2, [r7, #6]
 8005780:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	88fa      	ldrh	r2, [r7, #6]
 8005786:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005790:	d108      	bne.n	80057a4 <HAL_UART_Transmit+0x6c>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d104      	bne.n	80057a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800579a:	2300      	movs	r3, #0
 800579c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	e003      	b.n	80057ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057a8:	2300      	movs	r3, #0
 80057aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057ac:	e02e      	b.n	800580c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2200      	movs	r2, #0
 80057b6:	2180      	movs	r1, #128	@ 0x80
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 fb37 	bl	8005e2c <UART_WaitOnFlagUntilTimeout>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e03a      	b.n	8005846 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10b      	bne.n	80057ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	3302      	adds	r3, #2
 80057ea:	61bb      	str	r3, [r7, #24]
 80057ec:	e007      	b.n	80057fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	781a      	ldrb	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	3301      	adds	r3, #1
 80057fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005802:	b29b      	uxth	r3, r3
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1cb      	bne.n	80057ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2200      	movs	r2, #0
 800581e:	2140      	movs	r1, #64	@ 0x40
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 fb03 	bl	8005e2c <UART_WaitOnFlagUntilTimeout>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d005      	beq.n	8005838 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e006      	b.n	8005846 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	e000      	b.n	8005846 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005844:	2302      	movs	r3, #2
  }
}
 8005846:	4618      	mov	r0, r3
 8005848:	3720      	adds	r7, #32
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	4613      	mov	r3, r2
 800585a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b20      	cmp	r3, #32
 8005866:	d112      	bne.n	800588e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d002      	beq.n	8005874 <HAL_UART_Receive_IT+0x26>
 800586e:	88fb      	ldrh	r3, [r7, #6]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e00b      	b.n	8005890 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	461a      	mov	r2, r3
 8005882:	68b9      	ldr	r1, [r7, #8]
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 fb2a 	bl	8005ede <UART_Start_Receive_IT>
 800588a:	4603      	mov	r3, r0
 800588c:	e000      	b.n	8005890 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800588e:	2302      	movs	r3, #2
  }
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b0ba      	sub	sp, #232	@ 0xe8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80058be:	2300      	movs	r3, #0
 80058c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ce:	f003 030f 	and.w	r3, r3, #15
 80058d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80058d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10f      	bne.n	80058fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d009      	beq.n	80058fe <HAL_UART_IRQHandler+0x66>
 80058ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fc07 	bl	800610a <UART_Receive_IT>
      return;
 80058fc:	e273      	b.n	8005de6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 80de 	beq.w	8005ac4 <HAL_UART_IRQHandler+0x22c>
 8005908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d106      	bne.n	8005922 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005918:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 80d1 	beq.w	8005ac4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00b      	beq.n	8005946 <HAL_UART_IRQHandler+0xae>
 800592e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005936:	2b00      	cmp	r3, #0
 8005938:	d005      	beq.n	8005946 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593e:	f043 0201 	orr.w	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00b      	beq.n	800596a <HAL_UART_IRQHandler+0xd2>
 8005952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d005      	beq.n	800596a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005962:	f043 0202 	orr.w	r2, r3, #2
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800596a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00b      	beq.n	800598e <HAL_UART_IRQHandler+0xf6>
 8005976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d005      	beq.n	800598e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005986:	f043 0204 	orr.w	r2, r3, #4
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800598e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d011      	beq.n	80059be <HAL_UART_IRQHandler+0x126>
 800599a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d105      	bne.n	80059b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b6:	f043 0208 	orr.w	r2, r3, #8
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 820a 	beq.w	8005ddc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059cc:	f003 0320 	and.w	r3, r3, #32
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <HAL_UART_IRQHandler+0x14e>
 80059d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059d8:	f003 0320 	and.w	r3, r3, #32
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fb92 	bl	800610a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f0:	2b40      	cmp	r3, #64	@ 0x40
 80059f2:	bf0c      	ite	eq
 80059f4:	2301      	moveq	r3, #1
 80059f6:	2300      	movne	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d103      	bne.n	8005a12 <HAL_UART_IRQHandler+0x17a>
 8005a0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d04f      	beq.n	8005ab2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fa9d 	bl	8005f52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a22:	2b40      	cmp	r3, #64	@ 0x40
 8005a24:	d141      	bne.n	8005aaa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3314      	adds	r3, #20
 8005a2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a34:	e853 3f00 	ldrex	r3, [r3]
 8005a38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3314      	adds	r3, #20
 8005a4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1d9      	bne.n	8005a26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d013      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a7e:	4a8a      	ldr	r2, [pc, #552]	@ (8005ca8 <HAL_UART_IRQHandler+0x410>)
 8005a80:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fd fd28 	bl	80034dc <HAL_DMA_Abort_IT>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d016      	beq.n	8005ac0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa0:	e00e      	b.n	8005ac0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f9ac 	bl	8005e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa8:	e00a      	b.n	8005ac0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f9a8 	bl	8005e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab0:	e006      	b.n	8005ac0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f9a4 	bl	8005e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005abe:	e18d      	b.n	8005ddc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac0:	bf00      	nop
    return;
 8005ac2:	e18b      	b.n	8005ddc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	f040 8167 	bne.w	8005d9c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ad2:	f003 0310 	and.w	r3, r3, #16
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 8160 	beq.w	8005d9c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ae0:	f003 0310 	and.w	r3, r3, #16
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 8159 	beq.w	8005d9c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aea:	2300      	movs	r3, #0
 8005aec:	60bb      	str	r3, [r7, #8]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	60bb      	str	r3, [r7, #8]
 8005afe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b0a:	2b40      	cmp	r3, #64	@ 0x40
 8005b0c:	f040 80ce 	bne.w	8005cac <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 80a9 	beq.w	8005c78 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	f080 80a2 	bcs.w	8005c78 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b46:	f000 8088 	beq.w	8005c5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	330c      	adds	r3, #12
 8005b50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	330c      	adds	r3, #12
 8005b72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005b76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1d9      	bne.n	8005b4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3314      	adds	r3, #20
 8005b9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005ba6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ba8:	f023 0301 	bic.w	r3, r3, #1
 8005bac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3314      	adds	r3, #20
 8005bb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005bba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005bbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005bc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005bcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e1      	bne.n	8005b96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3314      	adds	r3, #20
 8005bd8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005be2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005be4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005be8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3314      	adds	r3, #20
 8005bf2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005bf6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005bf8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005bfc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005bfe:	e841 2300 	strex	r3, r2, [r1]
 8005c02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1e3      	bne.n	8005bd2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	330c      	adds	r3, #12
 8005c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c22:	e853 3f00 	ldrex	r3, [r3]
 8005c26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c2a:	f023 0310 	bic.w	r3, r3, #16
 8005c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	330c      	adds	r3, #12
 8005c38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005c3c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005c3e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c44:	e841 2300 	strex	r3, r2, [r1]
 8005c48:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e3      	bne.n	8005c18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fd fbd1 	bl	80033fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	4619      	mov	r1, r3
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f8cf 	bl	8005e14 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005c76:	e0b3      	b.n	8005de0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c80:	429a      	cmp	r2, r3
 8005c82:	f040 80ad 	bne.w	8005de0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c90:	f040 80a6 	bne.w	8005de0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f8b7 	bl	8005e14 <HAL_UARTEx_RxEventCallback>
      return;
 8005ca6:	e09b      	b.n	8005de0 <HAL_UART_IRQHandler+0x548>
 8005ca8:	08006019 	.word	0x08006019
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 808e 	beq.w	8005de4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 8089 	beq.w	8005de4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	330c      	adds	r3, #12
 8005cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cdc:	e853 3f00 	ldrex	r3, [r3]
 8005ce0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ce4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ce8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005cf6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005cf8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cfe:	e841 2300 	strex	r3, r2, [r1]
 8005d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1e3      	bne.n	8005cd2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3314      	adds	r3, #20
 8005d10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d14:	e853 3f00 	ldrex	r3, [r3]
 8005d18:	623b      	str	r3, [r7, #32]
   return(result);
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	f023 0301 	bic.w	r3, r3, #1
 8005d20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3314      	adds	r3, #20
 8005d2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d36:	e841 2300 	strex	r3, r2, [r1]
 8005d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1e3      	bne.n	8005d0a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	330c      	adds	r3, #12
 8005d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0310 	bic.w	r3, r3, #16
 8005d66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	330c      	adds	r3, #12
 8005d70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005d74:	61fa      	str	r2, [r7, #28]
 8005d76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	69b9      	ldr	r1, [r7, #24]
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	617b      	str	r3, [r7, #20]
   return(result);
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e3      	bne.n	8005d50 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d92:	4619      	mov	r1, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f83d 	bl	8005e14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d9a:	e023      	b.n	8005de4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d009      	beq.n	8005dbc <HAL_UART_IRQHandler+0x524>
 8005da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f940 	bl	800603a <UART_Transmit_IT>
    return;
 8005dba:	e014      	b.n	8005de6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00e      	beq.n	8005de6 <HAL_UART_IRQHandler+0x54e>
 8005dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d008      	beq.n	8005de6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f980 	bl	80060da <UART_EndTransmit_IT>
    return;
 8005dda:	e004      	b.n	8005de6 <HAL_UART_IRQHandler+0x54e>
    return;
 8005ddc:	bf00      	nop
 8005dde:	e002      	b.n	8005de6 <HAL_UART_IRQHandler+0x54e>
      return;
 8005de0:	bf00      	nop
 8005de2:	e000      	b.n	8005de6 <HAL_UART_IRQHandler+0x54e>
      return;
 8005de4:	bf00      	nop
  }
}
 8005de6:	37e8      	adds	r7, #232	@ 0xe8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	603b      	str	r3, [r7, #0]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e3c:	e03b      	b.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e44:	d037      	beq.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e46:	f7fc facd 	bl	80023e4 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	6a3a      	ldr	r2, [r7, #32]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d302      	bcc.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e03a      	b.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f003 0304 	and.w	r3, r3, #4
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d023      	beq.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2b80      	cmp	r3, #128	@ 0x80
 8005e72:	d020      	beq.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2b40      	cmp	r3, #64	@ 0x40
 8005e78:	d01d      	beq.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d116      	bne.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005e88:	2300      	movs	r3, #0
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 f857 	bl	8005f52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2208      	movs	r2, #8
 8005ea8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e00f      	b.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	bf0c      	ite	eq
 8005ec6:	2301      	moveq	r3, #1
 8005ec8:	2300      	movne	r3, #0
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	79fb      	ldrb	r3, [r7, #7]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d0b4      	beq.n	8005e3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	88fa      	ldrh	r2, [r7, #6]
 8005ef6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	88fa      	ldrh	r2, [r7, #6]
 8005efc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2222      	movs	r2, #34	@ 0x22
 8005f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d007      	beq.n	8005f24 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68da      	ldr	r2, [r3, #12]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f22:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	695a      	ldr	r2, [r3, #20]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0201 	orr.w	r2, r2, #1
 8005f32:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0220 	orr.w	r2, r2, #32
 8005f42:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b095      	sub	sp, #84	@ 0x54
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	330c      	adds	r3, #12
 8005f60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	330c      	adds	r3, #12
 8005f78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e5      	bne.n	8005f5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3314      	adds	r3, #20
 8005f94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	f023 0301 	bic.w	r3, r3, #1
 8005fa4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3314      	adds	r3, #20
 8005fac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e5      	bne.n	8005f8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d119      	bne.n	8005ffe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	330c      	adds	r3, #12
 8005fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f023 0310 	bic.w	r3, r3, #16
 8005fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	330c      	adds	r3, #12
 8005fe8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fea:	61ba      	str	r2, [r7, #24]
 8005fec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fee:	6979      	ldr	r1, [r7, #20]
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	e841 2300 	strex	r3, r2, [r1]
 8005ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1e5      	bne.n	8005fca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2220      	movs	r2, #32
 8006002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800600c:	bf00      	nop
 800600e:	3754      	adds	r7, #84	@ 0x54
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006024:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f7ff fee7 	bl	8005e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006032:	bf00      	nop
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800603a:	b480      	push	{r7}
 800603c:	b085      	sub	sp, #20
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b21      	cmp	r3, #33	@ 0x21
 800604c:	d13e      	bne.n	80060cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006056:	d114      	bne.n	8006082 <UART_Transmit_IT+0x48>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d110      	bne.n	8006082 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006074:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	1c9a      	adds	r2, r3, #2
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	621a      	str	r2, [r3, #32]
 8006080:	e008      	b.n	8006094 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	1c59      	adds	r1, r3, #1
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	6211      	str	r1, [r2, #32]
 800608c:	781a      	ldrb	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006098:	b29b      	uxth	r3, r3
 800609a:	3b01      	subs	r3, #1
 800609c:	b29b      	uxth	r3, r3
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	4619      	mov	r1, r3
 80060a2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10f      	bne.n	80060c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	e000      	b.n	80060ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060cc:	2302      	movs	r3, #2
  }
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b082      	sub	sp, #8
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7ff fe76 	bl	8005dec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b08c      	sub	sp, #48	@ 0x30
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006112:	2300      	movs	r3, #0
 8006114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006116:	2300      	movs	r3, #0
 8006118:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b22      	cmp	r3, #34	@ 0x22
 8006124:	f040 80aa 	bne.w	800627c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006130:	d115      	bne.n	800615e <UART_Receive_IT+0x54>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d111      	bne.n	800615e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	b29b      	uxth	r3, r3
 8006148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800614c:	b29a      	uxth	r2, r3
 800614e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006150:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006156:	1c9a      	adds	r2, r3, #2
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	629a      	str	r2, [r3, #40]	@ 0x28
 800615c:	e024      	b.n	80061a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006162:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800616c:	d007      	beq.n	800617e <UART_Receive_IT+0x74>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10a      	bne.n	800618c <UART_Receive_IT+0x82>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	b2da      	uxtb	r2, r3
 8006186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006188:	701a      	strb	r2, [r3, #0]
 800618a:	e008      	b.n	800619e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	b2db      	uxtb	r3, r3
 8006194:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006198:	b2da      	uxtb	r2, r3
 800619a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	3b01      	subs	r3, #1
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	4619      	mov	r1, r3
 80061b6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d15d      	bne.n	8006278 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68da      	ldr	r2, [r3, #12]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 0220 	bic.w	r2, r2, #32
 80061ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	695a      	ldr	r2, [r3, #20]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0201 	bic.w	r2, r2, #1
 80061ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d135      	bne.n	800626e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	330c      	adds	r3, #12
 800620e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	e853 3f00 	ldrex	r3, [r3]
 8006216:	613b      	str	r3, [r7, #16]
   return(result);
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	f023 0310 	bic.w	r3, r3, #16
 800621e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	330c      	adds	r3, #12
 8006226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006228:	623a      	str	r2, [r7, #32]
 800622a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622c:	69f9      	ldr	r1, [r7, #28]
 800622e:	6a3a      	ldr	r2, [r7, #32]
 8006230:	e841 2300 	strex	r3, r2, [r1]
 8006234:	61bb      	str	r3, [r7, #24]
   return(result);
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1e5      	bne.n	8006208 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0310 	and.w	r3, r3, #16
 8006246:	2b10      	cmp	r3, #16
 8006248:	d10a      	bne.n	8006260 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006264:	4619      	mov	r1, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7ff fdd4 	bl	8005e14 <HAL_UARTEx_RxEventCallback>
 800626c:	e002      	b.n	8006274 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7fb fcf6 	bl	8001c60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006274:	2300      	movs	r3, #0
 8006276:	e002      	b.n	800627e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	e000      	b.n	800627e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800627c:	2302      	movs	r3, #2
  }
}
 800627e:	4618      	mov	r0, r3
 8006280:	3730      	adds	r7, #48	@ 0x30
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800628c:	b0c0      	sub	sp, #256	@ 0x100
 800628e:	af00      	add	r7, sp, #0
 8006290:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80062a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a4:	68d9      	ldr	r1, [r3, #12]
 80062a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	ea40 0301 	orr.w	r3, r0, r1
 80062b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	431a      	orrs	r2, r3
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	431a      	orrs	r2, r3
 80062c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80062e0:	f021 010c 	bic.w	r1, r1, #12
 80062e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80062ee:	430b      	orrs	r3, r1
 80062f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80062fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006302:	6999      	ldr	r1, [r3, #24]
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	ea40 0301 	orr.w	r3, r0, r1
 800630e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	4b8f      	ldr	r3, [pc, #572]	@ (8006554 <UART_SetConfig+0x2cc>)
 8006318:	429a      	cmp	r2, r3
 800631a:	d005      	beq.n	8006328 <UART_SetConfig+0xa0>
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	4b8d      	ldr	r3, [pc, #564]	@ (8006558 <UART_SetConfig+0x2d0>)
 8006324:	429a      	cmp	r2, r3
 8006326:	d104      	bne.n	8006332 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006328:	f7fe f99e 	bl	8004668 <HAL_RCC_GetPCLK2Freq>
 800632c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006330:	e003      	b.n	800633a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006332:	f7fe f985 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 8006336:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800633a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006344:	f040 810c 	bne.w	8006560 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800634c:	2200      	movs	r2, #0
 800634e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006352:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006356:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800635a:	4622      	mov	r2, r4
 800635c:	462b      	mov	r3, r5
 800635e:	1891      	adds	r1, r2, r2
 8006360:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006362:	415b      	adcs	r3, r3
 8006364:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006366:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800636a:	4621      	mov	r1, r4
 800636c:	eb12 0801 	adds.w	r8, r2, r1
 8006370:	4629      	mov	r1, r5
 8006372:	eb43 0901 	adc.w	r9, r3, r1
 8006376:	f04f 0200 	mov.w	r2, #0
 800637a:	f04f 0300 	mov.w	r3, #0
 800637e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006382:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006386:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800638a:	4690      	mov	r8, r2
 800638c:	4699      	mov	r9, r3
 800638e:	4623      	mov	r3, r4
 8006390:	eb18 0303 	adds.w	r3, r8, r3
 8006394:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006398:	462b      	mov	r3, r5
 800639a:	eb49 0303 	adc.w	r3, r9, r3
 800639e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80063a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80063b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80063b6:	460b      	mov	r3, r1
 80063b8:	18db      	adds	r3, r3, r3
 80063ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80063bc:	4613      	mov	r3, r2
 80063be:	eb42 0303 	adc.w	r3, r2, r3
 80063c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80063c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80063c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80063cc:	f7fa fc64 	bl	8000c98 <__aeabi_uldivmod>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4b61      	ldr	r3, [pc, #388]	@ (800655c <UART_SetConfig+0x2d4>)
 80063d6:	fba3 2302 	umull	r2, r3, r3, r2
 80063da:	095b      	lsrs	r3, r3, #5
 80063dc:	011c      	lsls	r4, r3, #4
 80063de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80063ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80063f0:	4642      	mov	r2, r8
 80063f2:	464b      	mov	r3, r9
 80063f4:	1891      	adds	r1, r2, r2
 80063f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80063f8:	415b      	adcs	r3, r3
 80063fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006400:	4641      	mov	r1, r8
 8006402:	eb12 0a01 	adds.w	sl, r2, r1
 8006406:	4649      	mov	r1, r9
 8006408:	eb43 0b01 	adc.w	fp, r3, r1
 800640c:	f04f 0200 	mov.w	r2, #0
 8006410:	f04f 0300 	mov.w	r3, #0
 8006414:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006418:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800641c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006420:	4692      	mov	sl, r2
 8006422:	469b      	mov	fp, r3
 8006424:	4643      	mov	r3, r8
 8006426:	eb1a 0303 	adds.w	r3, sl, r3
 800642a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800642e:	464b      	mov	r3, r9
 8006430:	eb4b 0303 	adc.w	r3, fp, r3
 8006434:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006444:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006448:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800644c:	460b      	mov	r3, r1
 800644e:	18db      	adds	r3, r3, r3
 8006450:	643b      	str	r3, [r7, #64]	@ 0x40
 8006452:	4613      	mov	r3, r2
 8006454:	eb42 0303 	adc.w	r3, r2, r3
 8006458:	647b      	str	r3, [r7, #68]	@ 0x44
 800645a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800645e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006462:	f7fa fc19 	bl	8000c98 <__aeabi_uldivmod>
 8006466:	4602      	mov	r2, r0
 8006468:	460b      	mov	r3, r1
 800646a:	4611      	mov	r1, r2
 800646c:	4b3b      	ldr	r3, [pc, #236]	@ (800655c <UART_SetConfig+0x2d4>)
 800646e:	fba3 2301 	umull	r2, r3, r3, r1
 8006472:	095b      	lsrs	r3, r3, #5
 8006474:	2264      	movs	r2, #100	@ 0x64
 8006476:	fb02 f303 	mul.w	r3, r2, r3
 800647a:	1acb      	subs	r3, r1, r3
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006482:	4b36      	ldr	r3, [pc, #216]	@ (800655c <UART_SetConfig+0x2d4>)
 8006484:	fba3 2302 	umull	r2, r3, r3, r2
 8006488:	095b      	lsrs	r3, r3, #5
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006490:	441c      	add	r4, r3
 8006492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006496:	2200      	movs	r2, #0
 8006498:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800649c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80064a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80064a4:	4642      	mov	r2, r8
 80064a6:	464b      	mov	r3, r9
 80064a8:	1891      	adds	r1, r2, r2
 80064aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80064ac:	415b      	adcs	r3, r3
 80064ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80064b4:	4641      	mov	r1, r8
 80064b6:	1851      	adds	r1, r2, r1
 80064b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80064ba:	4649      	mov	r1, r9
 80064bc:	414b      	adcs	r3, r1
 80064be:	637b      	str	r3, [r7, #52]	@ 0x34
 80064c0:	f04f 0200 	mov.w	r2, #0
 80064c4:	f04f 0300 	mov.w	r3, #0
 80064c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80064cc:	4659      	mov	r1, fp
 80064ce:	00cb      	lsls	r3, r1, #3
 80064d0:	4651      	mov	r1, sl
 80064d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064d6:	4651      	mov	r1, sl
 80064d8:	00ca      	lsls	r2, r1, #3
 80064da:	4610      	mov	r0, r2
 80064dc:	4619      	mov	r1, r3
 80064de:	4603      	mov	r3, r0
 80064e0:	4642      	mov	r2, r8
 80064e2:	189b      	adds	r3, r3, r2
 80064e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064e8:	464b      	mov	r3, r9
 80064ea:	460a      	mov	r2, r1
 80064ec:	eb42 0303 	adc.w	r3, r2, r3
 80064f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006500:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006504:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006508:	460b      	mov	r3, r1
 800650a:	18db      	adds	r3, r3, r3
 800650c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800650e:	4613      	mov	r3, r2
 8006510:	eb42 0303 	adc.w	r3, r2, r3
 8006514:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006516:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800651a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800651e:	f7fa fbbb 	bl	8000c98 <__aeabi_uldivmod>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4b0d      	ldr	r3, [pc, #52]	@ (800655c <UART_SetConfig+0x2d4>)
 8006528:	fba3 1302 	umull	r1, r3, r3, r2
 800652c:	095b      	lsrs	r3, r3, #5
 800652e:	2164      	movs	r1, #100	@ 0x64
 8006530:	fb01 f303 	mul.w	r3, r1, r3
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	3332      	adds	r3, #50	@ 0x32
 800653a:	4a08      	ldr	r2, [pc, #32]	@ (800655c <UART_SetConfig+0x2d4>)
 800653c:	fba2 2303 	umull	r2, r3, r2, r3
 8006540:	095b      	lsrs	r3, r3, #5
 8006542:	f003 0207 	and.w	r2, r3, #7
 8006546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4422      	add	r2, r4
 800654e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006550:	e106      	b.n	8006760 <UART_SetConfig+0x4d8>
 8006552:	bf00      	nop
 8006554:	40011000 	.word	0x40011000
 8006558:	40011400 	.word	0x40011400
 800655c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006564:	2200      	movs	r2, #0
 8006566:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800656a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800656e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006572:	4642      	mov	r2, r8
 8006574:	464b      	mov	r3, r9
 8006576:	1891      	adds	r1, r2, r2
 8006578:	6239      	str	r1, [r7, #32]
 800657a:	415b      	adcs	r3, r3
 800657c:	627b      	str	r3, [r7, #36]	@ 0x24
 800657e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006582:	4641      	mov	r1, r8
 8006584:	1854      	adds	r4, r2, r1
 8006586:	4649      	mov	r1, r9
 8006588:	eb43 0501 	adc.w	r5, r3, r1
 800658c:	f04f 0200 	mov.w	r2, #0
 8006590:	f04f 0300 	mov.w	r3, #0
 8006594:	00eb      	lsls	r3, r5, #3
 8006596:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800659a:	00e2      	lsls	r2, r4, #3
 800659c:	4614      	mov	r4, r2
 800659e:	461d      	mov	r5, r3
 80065a0:	4643      	mov	r3, r8
 80065a2:	18e3      	adds	r3, r4, r3
 80065a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065a8:	464b      	mov	r3, r9
 80065aa:	eb45 0303 	adc.w	r3, r5, r3
 80065ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80065b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80065c2:	f04f 0200 	mov.w	r2, #0
 80065c6:	f04f 0300 	mov.w	r3, #0
 80065ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80065ce:	4629      	mov	r1, r5
 80065d0:	008b      	lsls	r3, r1, #2
 80065d2:	4621      	mov	r1, r4
 80065d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065d8:	4621      	mov	r1, r4
 80065da:	008a      	lsls	r2, r1, #2
 80065dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80065e0:	f7fa fb5a 	bl	8000c98 <__aeabi_uldivmod>
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	4b60      	ldr	r3, [pc, #384]	@ (800676c <UART_SetConfig+0x4e4>)
 80065ea:	fba3 2302 	umull	r2, r3, r3, r2
 80065ee:	095b      	lsrs	r3, r3, #5
 80065f0:	011c      	lsls	r4, r3, #4
 80065f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006600:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006604:	4642      	mov	r2, r8
 8006606:	464b      	mov	r3, r9
 8006608:	1891      	adds	r1, r2, r2
 800660a:	61b9      	str	r1, [r7, #24]
 800660c:	415b      	adcs	r3, r3
 800660e:	61fb      	str	r3, [r7, #28]
 8006610:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006614:	4641      	mov	r1, r8
 8006616:	1851      	adds	r1, r2, r1
 8006618:	6139      	str	r1, [r7, #16]
 800661a:	4649      	mov	r1, r9
 800661c:	414b      	adcs	r3, r1
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	f04f 0200 	mov.w	r2, #0
 8006624:	f04f 0300 	mov.w	r3, #0
 8006628:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800662c:	4659      	mov	r1, fp
 800662e:	00cb      	lsls	r3, r1, #3
 8006630:	4651      	mov	r1, sl
 8006632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006636:	4651      	mov	r1, sl
 8006638:	00ca      	lsls	r2, r1, #3
 800663a:	4610      	mov	r0, r2
 800663c:	4619      	mov	r1, r3
 800663e:	4603      	mov	r3, r0
 8006640:	4642      	mov	r2, r8
 8006642:	189b      	adds	r3, r3, r2
 8006644:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006648:	464b      	mov	r3, r9
 800664a:	460a      	mov	r2, r1
 800664c:	eb42 0303 	adc.w	r3, r2, r3
 8006650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800665e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006660:	f04f 0200 	mov.w	r2, #0
 8006664:	f04f 0300 	mov.w	r3, #0
 8006668:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800666c:	4649      	mov	r1, r9
 800666e:	008b      	lsls	r3, r1, #2
 8006670:	4641      	mov	r1, r8
 8006672:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006676:	4641      	mov	r1, r8
 8006678:	008a      	lsls	r2, r1, #2
 800667a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800667e:	f7fa fb0b 	bl	8000c98 <__aeabi_uldivmod>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4611      	mov	r1, r2
 8006688:	4b38      	ldr	r3, [pc, #224]	@ (800676c <UART_SetConfig+0x4e4>)
 800668a:	fba3 2301 	umull	r2, r3, r3, r1
 800668e:	095b      	lsrs	r3, r3, #5
 8006690:	2264      	movs	r2, #100	@ 0x64
 8006692:	fb02 f303 	mul.w	r3, r2, r3
 8006696:	1acb      	subs	r3, r1, r3
 8006698:	011b      	lsls	r3, r3, #4
 800669a:	3332      	adds	r3, #50	@ 0x32
 800669c:	4a33      	ldr	r2, [pc, #204]	@ (800676c <UART_SetConfig+0x4e4>)
 800669e:	fba2 2303 	umull	r2, r3, r2, r3
 80066a2:	095b      	lsrs	r3, r3, #5
 80066a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80066a8:	441c      	add	r4, r3
 80066aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066ae:	2200      	movs	r2, #0
 80066b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80066b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80066b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80066b8:	4642      	mov	r2, r8
 80066ba:	464b      	mov	r3, r9
 80066bc:	1891      	adds	r1, r2, r2
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	415b      	adcs	r3, r3
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066c8:	4641      	mov	r1, r8
 80066ca:	1851      	adds	r1, r2, r1
 80066cc:	6039      	str	r1, [r7, #0]
 80066ce:	4649      	mov	r1, r9
 80066d0:	414b      	adcs	r3, r1
 80066d2:	607b      	str	r3, [r7, #4]
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	f04f 0300 	mov.w	r3, #0
 80066dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066e0:	4659      	mov	r1, fp
 80066e2:	00cb      	lsls	r3, r1, #3
 80066e4:	4651      	mov	r1, sl
 80066e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066ea:	4651      	mov	r1, sl
 80066ec:	00ca      	lsls	r2, r1, #3
 80066ee:	4610      	mov	r0, r2
 80066f0:	4619      	mov	r1, r3
 80066f2:	4603      	mov	r3, r0
 80066f4:	4642      	mov	r2, r8
 80066f6:	189b      	adds	r3, r3, r2
 80066f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066fa:	464b      	mov	r3, r9
 80066fc:	460a      	mov	r2, r1
 80066fe:	eb42 0303 	adc.w	r3, r2, r3
 8006702:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	663b      	str	r3, [r7, #96]	@ 0x60
 800670e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	f04f 0300 	mov.w	r3, #0
 8006718:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800671c:	4649      	mov	r1, r9
 800671e:	008b      	lsls	r3, r1, #2
 8006720:	4641      	mov	r1, r8
 8006722:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006726:	4641      	mov	r1, r8
 8006728:	008a      	lsls	r2, r1, #2
 800672a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800672e:	f7fa fab3 	bl	8000c98 <__aeabi_uldivmod>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	4b0d      	ldr	r3, [pc, #52]	@ (800676c <UART_SetConfig+0x4e4>)
 8006738:	fba3 1302 	umull	r1, r3, r3, r2
 800673c:	095b      	lsrs	r3, r3, #5
 800673e:	2164      	movs	r1, #100	@ 0x64
 8006740:	fb01 f303 	mul.w	r3, r1, r3
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	3332      	adds	r3, #50	@ 0x32
 800674a:	4a08      	ldr	r2, [pc, #32]	@ (800676c <UART_SetConfig+0x4e4>)
 800674c:	fba2 2303 	umull	r2, r3, r2, r3
 8006750:	095b      	lsrs	r3, r3, #5
 8006752:	f003 020f 	and.w	r2, r3, #15
 8006756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4422      	add	r2, r4
 800675e:	609a      	str	r2, [r3, #8]
}
 8006760:	bf00      	nop
 8006762:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006766:	46bd      	mov	sp, r7
 8006768:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800676c:	51eb851f 	.word	0x51eb851f

08006770 <atof>:
 8006770:	2100      	movs	r1, #0
 8006772:	f000 be05 	b.w	8007380 <strtod>

08006776 <sulp>:
 8006776:	b570      	push	{r4, r5, r6, lr}
 8006778:	4604      	mov	r4, r0
 800677a:	460d      	mov	r5, r1
 800677c:	ec45 4b10 	vmov	d0, r4, r5
 8006780:	4616      	mov	r6, r2
 8006782:	f003 fa41 	bl	8009c08 <__ulp>
 8006786:	ec51 0b10 	vmov	r0, r1, d0
 800678a:	b17e      	cbz	r6, 80067ac <sulp+0x36>
 800678c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006790:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006794:	2b00      	cmp	r3, #0
 8006796:	dd09      	ble.n	80067ac <sulp+0x36>
 8006798:	051b      	lsls	r3, r3, #20
 800679a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800679e:	2400      	movs	r4, #0
 80067a0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80067a4:	4622      	mov	r2, r4
 80067a6:	462b      	mov	r3, r5
 80067a8:	f7f9 ff2e 	bl	8000608 <__aeabi_dmul>
 80067ac:	ec41 0b10 	vmov	d0, r0, r1
 80067b0:	bd70      	pop	{r4, r5, r6, pc}
 80067b2:	0000      	movs	r0, r0
 80067b4:	0000      	movs	r0, r0
	...

080067b8 <_strtod_l>:
 80067b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067bc:	b09f      	sub	sp, #124	@ 0x7c
 80067be:	460c      	mov	r4, r1
 80067c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80067c2:	2200      	movs	r2, #0
 80067c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80067c6:	9005      	str	r0, [sp, #20]
 80067c8:	f04f 0a00 	mov.w	sl, #0
 80067cc:	f04f 0b00 	mov.w	fp, #0
 80067d0:	460a      	mov	r2, r1
 80067d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80067d4:	7811      	ldrb	r1, [r2, #0]
 80067d6:	292b      	cmp	r1, #43	@ 0x2b
 80067d8:	d04a      	beq.n	8006870 <_strtod_l+0xb8>
 80067da:	d838      	bhi.n	800684e <_strtod_l+0x96>
 80067dc:	290d      	cmp	r1, #13
 80067de:	d832      	bhi.n	8006846 <_strtod_l+0x8e>
 80067e0:	2908      	cmp	r1, #8
 80067e2:	d832      	bhi.n	800684a <_strtod_l+0x92>
 80067e4:	2900      	cmp	r1, #0
 80067e6:	d03b      	beq.n	8006860 <_strtod_l+0xa8>
 80067e8:	2200      	movs	r2, #0
 80067ea:	920e      	str	r2, [sp, #56]	@ 0x38
 80067ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80067ee:	782a      	ldrb	r2, [r5, #0]
 80067f0:	2a30      	cmp	r2, #48	@ 0x30
 80067f2:	f040 80b2 	bne.w	800695a <_strtod_l+0x1a2>
 80067f6:	786a      	ldrb	r2, [r5, #1]
 80067f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80067fc:	2a58      	cmp	r2, #88	@ 0x58
 80067fe:	d16e      	bne.n	80068de <_strtod_l+0x126>
 8006800:	9302      	str	r3, [sp, #8]
 8006802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006804:	9301      	str	r3, [sp, #4]
 8006806:	ab1a      	add	r3, sp, #104	@ 0x68
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	4a8f      	ldr	r2, [pc, #572]	@ (8006a48 <_strtod_l+0x290>)
 800680c:	9805      	ldr	r0, [sp, #20]
 800680e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006810:	a919      	add	r1, sp, #100	@ 0x64
 8006812:	f002 faf3 	bl	8008dfc <__gethex>
 8006816:	f010 060f 	ands.w	r6, r0, #15
 800681a:	4604      	mov	r4, r0
 800681c:	d005      	beq.n	800682a <_strtod_l+0x72>
 800681e:	2e06      	cmp	r6, #6
 8006820:	d128      	bne.n	8006874 <_strtod_l+0xbc>
 8006822:	3501      	adds	r5, #1
 8006824:	2300      	movs	r3, #0
 8006826:	9519      	str	r5, [sp, #100]	@ 0x64
 8006828:	930e      	str	r3, [sp, #56]	@ 0x38
 800682a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800682c:	2b00      	cmp	r3, #0
 800682e:	f040 858e 	bne.w	800734e <_strtod_l+0xb96>
 8006832:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006834:	b1cb      	cbz	r3, 800686a <_strtod_l+0xb2>
 8006836:	4652      	mov	r2, sl
 8006838:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800683c:	ec43 2b10 	vmov	d0, r2, r3
 8006840:	b01f      	add	sp, #124	@ 0x7c
 8006842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006846:	2920      	cmp	r1, #32
 8006848:	d1ce      	bne.n	80067e8 <_strtod_l+0x30>
 800684a:	3201      	adds	r2, #1
 800684c:	e7c1      	b.n	80067d2 <_strtod_l+0x1a>
 800684e:	292d      	cmp	r1, #45	@ 0x2d
 8006850:	d1ca      	bne.n	80067e8 <_strtod_l+0x30>
 8006852:	2101      	movs	r1, #1
 8006854:	910e      	str	r1, [sp, #56]	@ 0x38
 8006856:	1c51      	adds	r1, r2, #1
 8006858:	9119      	str	r1, [sp, #100]	@ 0x64
 800685a:	7852      	ldrb	r2, [r2, #1]
 800685c:	2a00      	cmp	r2, #0
 800685e:	d1c5      	bne.n	80067ec <_strtod_l+0x34>
 8006860:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006862:	9419      	str	r4, [sp, #100]	@ 0x64
 8006864:	2b00      	cmp	r3, #0
 8006866:	f040 8570 	bne.w	800734a <_strtod_l+0xb92>
 800686a:	4652      	mov	r2, sl
 800686c:	465b      	mov	r3, fp
 800686e:	e7e5      	b.n	800683c <_strtod_l+0x84>
 8006870:	2100      	movs	r1, #0
 8006872:	e7ef      	b.n	8006854 <_strtod_l+0x9c>
 8006874:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006876:	b13a      	cbz	r2, 8006888 <_strtod_l+0xd0>
 8006878:	2135      	movs	r1, #53	@ 0x35
 800687a:	a81c      	add	r0, sp, #112	@ 0x70
 800687c:	f003 fabe 	bl	8009dfc <__copybits>
 8006880:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006882:	9805      	ldr	r0, [sp, #20]
 8006884:	f002 fe94 	bl	80095b0 <_Bfree>
 8006888:	3e01      	subs	r6, #1
 800688a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800688c:	2e04      	cmp	r6, #4
 800688e:	d806      	bhi.n	800689e <_strtod_l+0xe6>
 8006890:	e8df f006 	tbb	[pc, r6]
 8006894:	201d0314 	.word	0x201d0314
 8006898:	14          	.byte	0x14
 8006899:	00          	.byte	0x00
 800689a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800689e:	05e1      	lsls	r1, r4, #23
 80068a0:	bf48      	it	mi
 80068a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80068a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80068aa:	0d1b      	lsrs	r3, r3, #20
 80068ac:	051b      	lsls	r3, r3, #20
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1bb      	bne.n	800682a <_strtod_l+0x72>
 80068b2:	f001 fb53 	bl	8007f5c <__errno>
 80068b6:	2322      	movs	r3, #34	@ 0x22
 80068b8:	6003      	str	r3, [r0, #0]
 80068ba:	e7b6      	b.n	800682a <_strtod_l+0x72>
 80068bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80068c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80068c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80068c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80068cc:	e7e7      	b.n	800689e <_strtod_l+0xe6>
 80068ce:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8006a50 <_strtod_l+0x298>
 80068d2:	e7e4      	b.n	800689e <_strtod_l+0xe6>
 80068d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80068d8:	f04f 3aff 	mov.w	sl, #4294967295
 80068dc:	e7df      	b.n	800689e <_strtod_l+0xe6>
 80068de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80068e4:	785b      	ldrb	r3, [r3, #1]
 80068e6:	2b30      	cmp	r3, #48	@ 0x30
 80068e8:	d0f9      	beq.n	80068de <_strtod_l+0x126>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d09d      	beq.n	800682a <_strtod_l+0x72>
 80068ee:	2301      	movs	r3, #1
 80068f0:	2700      	movs	r7, #0
 80068f2:	9308      	str	r3, [sp, #32]
 80068f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068f6:	930c      	str	r3, [sp, #48]	@ 0x30
 80068f8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80068fa:	46b9      	mov	r9, r7
 80068fc:	220a      	movs	r2, #10
 80068fe:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006900:	7805      	ldrb	r5, [r0, #0]
 8006902:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006906:	b2d9      	uxtb	r1, r3
 8006908:	2909      	cmp	r1, #9
 800690a:	d928      	bls.n	800695e <_strtod_l+0x1a6>
 800690c:	494f      	ldr	r1, [pc, #316]	@ (8006a4c <_strtod_l+0x294>)
 800690e:	2201      	movs	r2, #1
 8006910:	f001 fac7 	bl	8007ea2 <strncmp>
 8006914:	2800      	cmp	r0, #0
 8006916:	d032      	beq.n	800697e <_strtod_l+0x1c6>
 8006918:	2000      	movs	r0, #0
 800691a:	462a      	mov	r2, r5
 800691c:	900a      	str	r0, [sp, #40]	@ 0x28
 800691e:	464d      	mov	r5, r9
 8006920:	4603      	mov	r3, r0
 8006922:	2a65      	cmp	r2, #101	@ 0x65
 8006924:	d001      	beq.n	800692a <_strtod_l+0x172>
 8006926:	2a45      	cmp	r2, #69	@ 0x45
 8006928:	d114      	bne.n	8006954 <_strtod_l+0x19c>
 800692a:	b91d      	cbnz	r5, 8006934 <_strtod_l+0x17c>
 800692c:	9a08      	ldr	r2, [sp, #32]
 800692e:	4302      	orrs	r2, r0
 8006930:	d096      	beq.n	8006860 <_strtod_l+0xa8>
 8006932:	2500      	movs	r5, #0
 8006934:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006936:	1c62      	adds	r2, r4, #1
 8006938:	9219      	str	r2, [sp, #100]	@ 0x64
 800693a:	7862      	ldrb	r2, [r4, #1]
 800693c:	2a2b      	cmp	r2, #43	@ 0x2b
 800693e:	d07a      	beq.n	8006a36 <_strtod_l+0x27e>
 8006940:	2a2d      	cmp	r2, #45	@ 0x2d
 8006942:	d07e      	beq.n	8006a42 <_strtod_l+0x28a>
 8006944:	f04f 0c00 	mov.w	ip, #0
 8006948:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800694c:	2909      	cmp	r1, #9
 800694e:	f240 8085 	bls.w	8006a5c <_strtod_l+0x2a4>
 8006952:	9419      	str	r4, [sp, #100]	@ 0x64
 8006954:	f04f 0800 	mov.w	r8, #0
 8006958:	e0a5      	b.n	8006aa6 <_strtod_l+0x2ee>
 800695a:	2300      	movs	r3, #0
 800695c:	e7c8      	b.n	80068f0 <_strtod_l+0x138>
 800695e:	f1b9 0f08 	cmp.w	r9, #8
 8006962:	bfd8      	it	le
 8006964:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006966:	f100 0001 	add.w	r0, r0, #1
 800696a:	bfda      	itte	le
 800696c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006970:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006972:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006976:	f109 0901 	add.w	r9, r9, #1
 800697a:	9019      	str	r0, [sp, #100]	@ 0x64
 800697c:	e7bf      	b.n	80068fe <_strtod_l+0x146>
 800697e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	9219      	str	r2, [sp, #100]	@ 0x64
 8006984:	785a      	ldrb	r2, [r3, #1]
 8006986:	f1b9 0f00 	cmp.w	r9, #0
 800698a:	d03b      	beq.n	8006a04 <_strtod_l+0x24c>
 800698c:	900a      	str	r0, [sp, #40]	@ 0x28
 800698e:	464d      	mov	r5, r9
 8006990:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006994:	2b09      	cmp	r3, #9
 8006996:	d912      	bls.n	80069be <_strtod_l+0x206>
 8006998:	2301      	movs	r3, #1
 800699a:	e7c2      	b.n	8006922 <_strtod_l+0x16a>
 800699c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80069a2:	785a      	ldrb	r2, [r3, #1]
 80069a4:	3001      	adds	r0, #1
 80069a6:	2a30      	cmp	r2, #48	@ 0x30
 80069a8:	d0f8      	beq.n	800699c <_strtod_l+0x1e4>
 80069aa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80069ae:	2b08      	cmp	r3, #8
 80069b0:	f200 84d2 	bhi.w	8007358 <_strtod_l+0xba0>
 80069b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069b6:	900a      	str	r0, [sp, #40]	@ 0x28
 80069b8:	2000      	movs	r0, #0
 80069ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80069bc:	4605      	mov	r5, r0
 80069be:	3a30      	subs	r2, #48	@ 0x30
 80069c0:	f100 0301 	add.w	r3, r0, #1
 80069c4:	d018      	beq.n	80069f8 <_strtod_l+0x240>
 80069c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069c8:	4419      	add	r1, r3
 80069ca:	910a      	str	r1, [sp, #40]	@ 0x28
 80069cc:	462e      	mov	r6, r5
 80069ce:	f04f 0e0a 	mov.w	lr, #10
 80069d2:	1c71      	adds	r1, r6, #1
 80069d4:	eba1 0c05 	sub.w	ip, r1, r5
 80069d8:	4563      	cmp	r3, ip
 80069da:	dc15      	bgt.n	8006a08 <_strtod_l+0x250>
 80069dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80069e0:	182b      	adds	r3, r5, r0
 80069e2:	2b08      	cmp	r3, #8
 80069e4:	f105 0501 	add.w	r5, r5, #1
 80069e8:	4405      	add	r5, r0
 80069ea:	dc1a      	bgt.n	8006a22 <_strtod_l+0x26a>
 80069ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80069ee:	230a      	movs	r3, #10
 80069f0:	fb03 2301 	mla	r3, r3, r1, r2
 80069f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069f6:	2300      	movs	r3, #0
 80069f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80069fa:	1c51      	adds	r1, r2, #1
 80069fc:	9119      	str	r1, [sp, #100]	@ 0x64
 80069fe:	7852      	ldrb	r2, [r2, #1]
 8006a00:	4618      	mov	r0, r3
 8006a02:	e7c5      	b.n	8006990 <_strtod_l+0x1d8>
 8006a04:	4648      	mov	r0, r9
 8006a06:	e7ce      	b.n	80069a6 <_strtod_l+0x1ee>
 8006a08:	2e08      	cmp	r6, #8
 8006a0a:	dc05      	bgt.n	8006a18 <_strtod_l+0x260>
 8006a0c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006a0e:	fb0e f606 	mul.w	r6, lr, r6
 8006a12:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006a14:	460e      	mov	r6, r1
 8006a16:	e7dc      	b.n	80069d2 <_strtod_l+0x21a>
 8006a18:	2910      	cmp	r1, #16
 8006a1a:	bfd8      	it	le
 8006a1c:	fb0e f707 	mulle.w	r7, lr, r7
 8006a20:	e7f8      	b.n	8006a14 <_strtod_l+0x25c>
 8006a22:	2b0f      	cmp	r3, #15
 8006a24:	bfdc      	itt	le
 8006a26:	230a      	movle	r3, #10
 8006a28:	fb03 2707 	mlale	r7, r3, r7, r2
 8006a2c:	e7e3      	b.n	80069f6 <_strtod_l+0x23e>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a32:	2301      	movs	r3, #1
 8006a34:	e77a      	b.n	800692c <_strtod_l+0x174>
 8006a36:	f04f 0c00 	mov.w	ip, #0
 8006a3a:	1ca2      	adds	r2, r4, #2
 8006a3c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a3e:	78a2      	ldrb	r2, [r4, #2]
 8006a40:	e782      	b.n	8006948 <_strtod_l+0x190>
 8006a42:	f04f 0c01 	mov.w	ip, #1
 8006a46:	e7f8      	b.n	8006a3a <_strtod_l+0x282>
 8006a48:	0800ab74 	.word	0x0800ab74
 8006a4c:	0800a98c 	.word	0x0800a98c
 8006a50:	7ff00000 	.word	0x7ff00000
 8006a54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a56:	1c51      	adds	r1, r2, #1
 8006a58:	9119      	str	r1, [sp, #100]	@ 0x64
 8006a5a:	7852      	ldrb	r2, [r2, #1]
 8006a5c:	2a30      	cmp	r2, #48	@ 0x30
 8006a5e:	d0f9      	beq.n	8006a54 <_strtod_l+0x29c>
 8006a60:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006a64:	2908      	cmp	r1, #8
 8006a66:	f63f af75 	bhi.w	8006954 <_strtod_l+0x19c>
 8006a6a:	3a30      	subs	r2, #48	@ 0x30
 8006a6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a6e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a70:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006a72:	f04f 080a 	mov.w	r8, #10
 8006a76:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a78:	1c56      	adds	r6, r2, #1
 8006a7a:	9619      	str	r6, [sp, #100]	@ 0x64
 8006a7c:	7852      	ldrb	r2, [r2, #1]
 8006a7e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006a82:	f1be 0f09 	cmp.w	lr, #9
 8006a86:	d939      	bls.n	8006afc <_strtod_l+0x344>
 8006a88:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006a8a:	1a76      	subs	r6, r6, r1
 8006a8c:	2e08      	cmp	r6, #8
 8006a8e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006a92:	dc03      	bgt.n	8006a9c <_strtod_l+0x2e4>
 8006a94:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a96:	4588      	cmp	r8, r1
 8006a98:	bfa8      	it	ge
 8006a9a:	4688      	movge	r8, r1
 8006a9c:	f1bc 0f00 	cmp.w	ip, #0
 8006aa0:	d001      	beq.n	8006aa6 <_strtod_l+0x2ee>
 8006aa2:	f1c8 0800 	rsb	r8, r8, #0
 8006aa6:	2d00      	cmp	r5, #0
 8006aa8:	d14e      	bne.n	8006b48 <_strtod_l+0x390>
 8006aaa:	9908      	ldr	r1, [sp, #32]
 8006aac:	4308      	orrs	r0, r1
 8006aae:	f47f aebc 	bne.w	800682a <_strtod_l+0x72>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f47f aed4 	bne.w	8006860 <_strtod_l+0xa8>
 8006ab8:	2a69      	cmp	r2, #105	@ 0x69
 8006aba:	d028      	beq.n	8006b0e <_strtod_l+0x356>
 8006abc:	dc25      	bgt.n	8006b0a <_strtod_l+0x352>
 8006abe:	2a49      	cmp	r2, #73	@ 0x49
 8006ac0:	d025      	beq.n	8006b0e <_strtod_l+0x356>
 8006ac2:	2a4e      	cmp	r2, #78	@ 0x4e
 8006ac4:	f47f aecc 	bne.w	8006860 <_strtod_l+0xa8>
 8006ac8:	499a      	ldr	r1, [pc, #616]	@ (8006d34 <_strtod_l+0x57c>)
 8006aca:	a819      	add	r0, sp, #100	@ 0x64
 8006acc:	f002 fbb8 	bl	8009240 <__match>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	f43f aec5 	beq.w	8006860 <_strtod_l+0xa8>
 8006ad6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b28      	cmp	r3, #40	@ 0x28
 8006adc:	d12e      	bne.n	8006b3c <_strtod_l+0x384>
 8006ade:	4996      	ldr	r1, [pc, #600]	@ (8006d38 <_strtod_l+0x580>)
 8006ae0:	aa1c      	add	r2, sp, #112	@ 0x70
 8006ae2:	a819      	add	r0, sp, #100	@ 0x64
 8006ae4:	f002 fbc0 	bl	8009268 <__hexnan>
 8006ae8:	2805      	cmp	r0, #5
 8006aea:	d127      	bne.n	8006b3c <_strtod_l+0x384>
 8006aec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006aee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006af2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006af6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006afa:	e696      	b.n	800682a <_strtod_l+0x72>
 8006afc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006afe:	fb08 2101 	mla	r1, r8, r1, r2
 8006b02:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006b06:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b08:	e7b5      	b.n	8006a76 <_strtod_l+0x2be>
 8006b0a:	2a6e      	cmp	r2, #110	@ 0x6e
 8006b0c:	e7da      	b.n	8006ac4 <_strtod_l+0x30c>
 8006b0e:	498b      	ldr	r1, [pc, #556]	@ (8006d3c <_strtod_l+0x584>)
 8006b10:	a819      	add	r0, sp, #100	@ 0x64
 8006b12:	f002 fb95 	bl	8009240 <__match>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	f43f aea2 	beq.w	8006860 <_strtod_l+0xa8>
 8006b1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b1e:	4988      	ldr	r1, [pc, #544]	@ (8006d40 <_strtod_l+0x588>)
 8006b20:	3b01      	subs	r3, #1
 8006b22:	a819      	add	r0, sp, #100	@ 0x64
 8006b24:	9319      	str	r3, [sp, #100]	@ 0x64
 8006b26:	f002 fb8b 	bl	8009240 <__match>
 8006b2a:	b910      	cbnz	r0, 8006b32 <_strtod_l+0x37a>
 8006b2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b2e:	3301      	adds	r3, #1
 8006b30:	9319      	str	r3, [sp, #100]	@ 0x64
 8006b32:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8006d50 <_strtod_l+0x598>
 8006b36:	f04f 0a00 	mov.w	sl, #0
 8006b3a:	e676      	b.n	800682a <_strtod_l+0x72>
 8006b3c:	4881      	ldr	r0, [pc, #516]	@ (8006d44 <_strtod_l+0x58c>)
 8006b3e:	f001 fa4b 	bl	8007fd8 <nan>
 8006b42:	ec5b ab10 	vmov	sl, fp, d0
 8006b46:	e670      	b.n	800682a <_strtod_l+0x72>
 8006b48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b4a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006b4c:	eba8 0303 	sub.w	r3, r8, r3
 8006b50:	f1b9 0f00 	cmp.w	r9, #0
 8006b54:	bf08      	it	eq
 8006b56:	46a9      	moveq	r9, r5
 8006b58:	2d10      	cmp	r5, #16
 8006b5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b5c:	462c      	mov	r4, r5
 8006b5e:	bfa8      	it	ge
 8006b60:	2410      	movge	r4, #16
 8006b62:	f7f9 fcd7 	bl	8000514 <__aeabi_ui2d>
 8006b66:	2d09      	cmp	r5, #9
 8006b68:	4682      	mov	sl, r0
 8006b6a:	468b      	mov	fp, r1
 8006b6c:	dc13      	bgt.n	8006b96 <_strtod_l+0x3de>
 8006b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f43f ae5a 	beq.w	800682a <_strtod_l+0x72>
 8006b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b78:	dd78      	ble.n	8006c6c <_strtod_l+0x4b4>
 8006b7a:	2b16      	cmp	r3, #22
 8006b7c:	dc5f      	bgt.n	8006c3e <_strtod_l+0x486>
 8006b7e:	4972      	ldr	r1, [pc, #456]	@ (8006d48 <_strtod_l+0x590>)
 8006b80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b88:	4652      	mov	r2, sl
 8006b8a:	465b      	mov	r3, fp
 8006b8c:	f7f9 fd3c 	bl	8000608 <__aeabi_dmul>
 8006b90:	4682      	mov	sl, r0
 8006b92:	468b      	mov	fp, r1
 8006b94:	e649      	b.n	800682a <_strtod_l+0x72>
 8006b96:	4b6c      	ldr	r3, [pc, #432]	@ (8006d48 <_strtod_l+0x590>)
 8006b98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006ba0:	f7f9 fd32 	bl	8000608 <__aeabi_dmul>
 8006ba4:	4682      	mov	sl, r0
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	468b      	mov	fp, r1
 8006baa:	f7f9 fcb3 	bl	8000514 <__aeabi_ui2d>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4650      	mov	r0, sl
 8006bb4:	4659      	mov	r1, fp
 8006bb6:	f7f9 fb71 	bl	800029c <__adddf3>
 8006bba:	2d0f      	cmp	r5, #15
 8006bbc:	4682      	mov	sl, r0
 8006bbe:	468b      	mov	fp, r1
 8006bc0:	ddd5      	ble.n	8006b6e <_strtod_l+0x3b6>
 8006bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bc4:	1b2c      	subs	r4, r5, r4
 8006bc6:	441c      	add	r4, r3
 8006bc8:	2c00      	cmp	r4, #0
 8006bca:	f340 8093 	ble.w	8006cf4 <_strtod_l+0x53c>
 8006bce:	f014 030f 	ands.w	r3, r4, #15
 8006bd2:	d00a      	beq.n	8006bea <_strtod_l+0x432>
 8006bd4:	495c      	ldr	r1, [pc, #368]	@ (8006d48 <_strtod_l+0x590>)
 8006bd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006bda:	4652      	mov	r2, sl
 8006bdc:	465b      	mov	r3, fp
 8006bde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006be2:	f7f9 fd11 	bl	8000608 <__aeabi_dmul>
 8006be6:	4682      	mov	sl, r0
 8006be8:	468b      	mov	fp, r1
 8006bea:	f034 040f 	bics.w	r4, r4, #15
 8006bee:	d073      	beq.n	8006cd8 <_strtod_l+0x520>
 8006bf0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006bf4:	dd49      	ble.n	8006c8a <_strtod_l+0x4d2>
 8006bf6:	2400      	movs	r4, #0
 8006bf8:	46a0      	mov	r8, r4
 8006bfa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006bfc:	46a1      	mov	r9, r4
 8006bfe:	9a05      	ldr	r2, [sp, #20]
 8006c00:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8006d50 <_strtod_l+0x598>
 8006c04:	2322      	movs	r3, #34	@ 0x22
 8006c06:	6013      	str	r3, [r2, #0]
 8006c08:	f04f 0a00 	mov.w	sl, #0
 8006c0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f43f ae0b 	beq.w	800682a <_strtod_l+0x72>
 8006c14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c16:	9805      	ldr	r0, [sp, #20]
 8006c18:	f002 fcca 	bl	80095b0 <_Bfree>
 8006c1c:	9805      	ldr	r0, [sp, #20]
 8006c1e:	4649      	mov	r1, r9
 8006c20:	f002 fcc6 	bl	80095b0 <_Bfree>
 8006c24:	9805      	ldr	r0, [sp, #20]
 8006c26:	4641      	mov	r1, r8
 8006c28:	f002 fcc2 	bl	80095b0 <_Bfree>
 8006c2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c2e:	9805      	ldr	r0, [sp, #20]
 8006c30:	f002 fcbe 	bl	80095b0 <_Bfree>
 8006c34:	9805      	ldr	r0, [sp, #20]
 8006c36:	4621      	mov	r1, r4
 8006c38:	f002 fcba 	bl	80095b0 <_Bfree>
 8006c3c:	e5f5      	b.n	800682a <_strtod_l+0x72>
 8006c3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006c44:	4293      	cmp	r3, r2
 8006c46:	dbbc      	blt.n	8006bc2 <_strtod_l+0x40a>
 8006c48:	4c3f      	ldr	r4, [pc, #252]	@ (8006d48 <_strtod_l+0x590>)
 8006c4a:	f1c5 050f 	rsb	r5, r5, #15
 8006c4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006c52:	4652      	mov	r2, sl
 8006c54:	465b      	mov	r3, fp
 8006c56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c5a:	f7f9 fcd5 	bl	8000608 <__aeabi_dmul>
 8006c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c60:	1b5d      	subs	r5, r3, r5
 8006c62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006c66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006c6a:	e78f      	b.n	8006b8c <_strtod_l+0x3d4>
 8006c6c:	3316      	adds	r3, #22
 8006c6e:	dba8      	blt.n	8006bc2 <_strtod_l+0x40a>
 8006c70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c72:	eba3 0808 	sub.w	r8, r3, r8
 8006c76:	4b34      	ldr	r3, [pc, #208]	@ (8006d48 <_strtod_l+0x590>)
 8006c78:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006c7c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006c80:	4650      	mov	r0, sl
 8006c82:	4659      	mov	r1, fp
 8006c84:	f7f9 fdea 	bl	800085c <__aeabi_ddiv>
 8006c88:	e782      	b.n	8006b90 <_strtod_l+0x3d8>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	4f2f      	ldr	r7, [pc, #188]	@ (8006d4c <_strtod_l+0x594>)
 8006c8e:	1124      	asrs	r4, r4, #4
 8006c90:	4650      	mov	r0, sl
 8006c92:	4659      	mov	r1, fp
 8006c94:	461e      	mov	r6, r3
 8006c96:	2c01      	cmp	r4, #1
 8006c98:	dc21      	bgt.n	8006cde <_strtod_l+0x526>
 8006c9a:	b10b      	cbz	r3, 8006ca0 <_strtod_l+0x4e8>
 8006c9c:	4682      	mov	sl, r0
 8006c9e:	468b      	mov	fp, r1
 8006ca0:	492a      	ldr	r1, [pc, #168]	@ (8006d4c <_strtod_l+0x594>)
 8006ca2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006ca6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006caa:	4652      	mov	r2, sl
 8006cac:	465b      	mov	r3, fp
 8006cae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cb2:	f7f9 fca9 	bl	8000608 <__aeabi_dmul>
 8006cb6:	4b26      	ldr	r3, [pc, #152]	@ (8006d50 <_strtod_l+0x598>)
 8006cb8:	460a      	mov	r2, r1
 8006cba:	400b      	ands	r3, r1
 8006cbc:	4925      	ldr	r1, [pc, #148]	@ (8006d54 <_strtod_l+0x59c>)
 8006cbe:	428b      	cmp	r3, r1
 8006cc0:	4682      	mov	sl, r0
 8006cc2:	d898      	bhi.n	8006bf6 <_strtod_l+0x43e>
 8006cc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006cc8:	428b      	cmp	r3, r1
 8006cca:	bf86      	itte	hi
 8006ccc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8006d58 <_strtod_l+0x5a0>
 8006cd0:	f04f 3aff 	movhi.w	sl, #4294967295
 8006cd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006cd8:	2300      	movs	r3, #0
 8006cda:	9308      	str	r3, [sp, #32]
 8006cdc:	e076      	b.n	8006dcc <_strtod_l+0x614>
 8006cde:	07e2      	lsls	r2, r4, #31
 8006ce0:	d504      	bpl.n	8006cec <_strtod_l+0x534>
 8006ce2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ce6:	f7f9 fc8f 	bl	8000608 <__aeabi_dmul>
 8006cea:	2301      	movs	r3, #1
 8006cec:	3601      	adds	r6, #1
 8006cee:	1064      	asrs	r4, r4, #1
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	e7d0      	b.n	8006c96 <_strtod_l+0x4de>
 8006cf4:	d0f0      	beq.n	8006cd8 <_strtod_l+0x520>
 8006cf6:	4264      	negs	r4, r4
 8006cf8:	f014 020f 	ands.w	r2, r4, #15
 8006cfc:	d00a      	beq.n	8006d14 <_strtod_l+0x55c>
 8006cfe:	4b12      	ldr	r3, [pc, #72]	@ (8006d48 <_strtod_l+0x590>)
 8006d00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d04:	4650      	mov	r0, sl
 8006d06:	4659      	mov	r1, fp
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f7f9 fda6 	bl	800085c <__aeabi_ddiv>
 8006d10:	4682      	mov	sl, r0
 8006d12:	468b      	mov	fp, r1
 8006d14:	1124      	asrs	r4, r4, #4
 8006d16:	d0df      	beq.n	8006cd8 <_strtod_l+0x520>
 8006d18:	2c1f      	cmp	r4, #31
 8006d1a:	dd1f      	ble.n	8006d5c <_strtod_l+0x5a4>
 8006d1c:	2400      	movs	r4, #0
 8006d1e:	46a0      	mov	r8, r4
 8006d20:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006d22:	46a1      	mov	r9, r4
 8006d24:	9a05      	ldr	r2, [sp, #20]
 8006d26:	2322      	movs	r3, #34	@ 0x22
 8006d28:	f04f 0a00 	mov.w	sl, #0
 8006d2c:	f04f 0b00 	mov.w	fp, #0
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	e76b      	b.n	8006c0c <_strtod_l+0x454>
 8006d34:	0800a99b 	.word	0x0800a99b
 8006d38:	0800ab60 	.word	0x0800ab60
 8006d3c:	0800a993 	.word	0x0800a993
 8006d40:	0800a9cd 	.word	0x0800a9cd
 8006d44:	0800ab5c 	.word	0x0800ab5c
 8006d48:	0800abe8 	.word	0x0800abe8
 8006d4c:	0800abc0 	.word	0x0800abc0
 8006d50:	7ff00000 	.word	0x7ff00000
 8006d54:	7ca00000 	.word	0x7ca00000
 8006d58:	7fefffff 	.word	0x7fefffff
 8006d5c:	f014 0310 	ands.w	r3, r4, #16
 8006d60:	bf18      	it	ne
 8006d62:	236a      	movne	r3, #106	@ 0x6a
 8006d64:	4ea9      	ldr	r6, [pc, #676]	@ (800700c <_strtod_l+0x854>)
 8006d66:	9308      	str	r3, [sp, #32]
 8006d68:	4650      	mov	r0, sl
 8006d6a:	4659      	mov	r1, fp
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	07e7      	lsls	r7, r4, #31
 8006d70:	d504      	bpl.n	8006d7c <_strtod_l+0x5c4>
 8006d72:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d76:	f7f9 fc47 	bl	8000608 <__aeabi_dmul>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	1064      	asrs	r4, r4, #1
 8006d7e:	f106 0608 	add.w	r6, r6, #8
 8006d82:	d1f4      	bne.n	8006d6e <_strtod_l+0x5b6>
 8006d84:	b10b      	cbz	r3, 8006d8a <_strtod_l+0x5d2>
 8006d86:	4682      	mov	sl, r0
 8006d88:	468b      	mov	fp, r1
 8006d8a:	9b08      	ldr	r3, [sp, #32]
 8006d8c:	b1b3      	cbz	r3, 8006dbc <_strtod_l+0x604>
 8006d8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006d92:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	4659      	mov	r1, fp
 8006d9a:	dd0f      	ble.n	8006dbc <_strtod_l+0x604>
 8006d9c:	2b1f      	cmp	r3, #31
 8006d9e:	dd56      	ble.n	8006e4e <_strtod_l+0x696>
 8006da0:	2b34      	cmp	r3, #52	@ 0x34
 8006da2:	bfde      	ittt	le
 8006da4:	f04f 33ff 	movle.w	r3, #4294967295
 8006da8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006dac:	4093      	lslle	r3, r2
 8006dae:	f04f 0a00 	mov.w	sl, #0
 8006db2:	bfcc      	ite	gt
 8006db4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006db8:	ea03 0b01 	andle.w	fp, r3, r1
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	4650      	mov	r0, sl
 8006dc2:	4659      	mov	r1, fp
 8006dc4:	f7f9 fe88 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d1a7      	bne.n	8006d1c <_strtod_l+0x564>
 8006dcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006dd2:	9805      	ldr	r0, [sp, #20]
 8006dd4:	462b      	mov	r3, r5
 8006dd6:	464a      	mov	r2, r9
 8006dd8:	f002 fc52 	bl	8009680 <__s2b>
 8006ddc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006dde:	2800      	cmp	r0, #0
 8006de0:	f43f af09 	beq.w	8006bf6 <_strtod_l+0x43e>
 8006de4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006de6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006de8:	2a00      	cmp	r2, #0
 8006dea:	eba3 0308 	sub.w	r3, r3, r8
 8006dee:	bfa8      	it	ge
 8006df0:	2300      	movge	r3, #0
 8006df2:	9312      	str	r3, [sp, #72]	@ 0x48
 8006df4:	2400      	movs	r4, #0
 8006df6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006dfa:	9316      	str	r3, [sp, #88]	@ 0x58
 8006dfc:	46a0      	mov	r8, r4
 8006dfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e00:	9805      	ldr	r0, [sp, #20]
 8006e02:	6859      	ldr	r1, [r3, #4]
 8006e04:	f002 fb94 	bl	8009530 <_Balloc>
 8006e08:	4681      	mov	r9, r0
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	f43f aef7 	beq.w	8006bfe <_strtod_l+0x446>
 8006e10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e12:	691a      	ldr	r2, [r3, #16]
 8006e14:	3202      	adds	r2, #2
 8006e16:	f103 010c 	add.w	r1, r3, #12
 8006e1a:	0092      	lsls	r2, r2, #2
 8006e1c:	300c      	adds	r0, #12
 8006e1e:	f001 f8ca 	bl	8007fb6 <memcpy>
 8006e22:	ec4b ab10 	vmov	d0, sl, fp
 8006e26:	9805      	ldr	r0, [sp, #20]
 8006e28:	aa1c      	add	r2, sp, #112	@ 0x70
 8006e2a:	a91b      	add	r1, sp, #108	@ 0x6c
 8006e2c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006e30:	f002 ff5a 	bl	8009ce8 <__d2b>
 8006e34:	901a      	str	r0, [sp, #104]	@ 0x68
 8006e36:	2800      	cmp	r0, #0
 8006e38:	f43f aee1 	beq.w	8006bfe <_strtod_l+0x446>
 8006e3c:	9805      	ldr	r0, [sp, #20]
 8006e3e:	2101      	movs	r1, #1
 8006e40:	f002 fcb4 	bl	80097ac <__i2b>
 8006e44:	4680      	mov	r8, r0
 8006e46:	b948      	cbnz	r0, 8006e5c <_strtod_l+0x6a4>
 8006e48:	f04f 0800 	mov.w	r8, #0
 8006e4c:	e6d7      	b.n	8006bfe <_strtod_l+0x446>
 8006e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e52:	fa02 f303 	lsl.w	r3, r2, r3
 8006e56:	ea03 0a0a 	and.w	sl, r3, sl
 8006e5a:	e7af      	b.n	8006dbc <_strtod_l+0x604>
 8006e5c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006e5e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006e60:	2d00      	cmp	r5, #0
 8006e62:	bfab      	itete	ge
 8006e64:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006e66:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006e68:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006e6a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006e6c:	bfac      	ite	ge
 8006e6e:	18ef      	addge	r7, r5, r3
 8006e70:	1b5e      	sublt	r6, r3, r5
 8006e72:	9b08      	ldr	r3, [sp, #32]
 8006e74:	1aed      	subs	r5, r5, r3
 8006e76:	4415      	add	r5, r2
 8006e78:	4b65      	ldr	r3, [pc, #404]	@ (8007010 <_strtod_l+0x858>)
 8006e7a:	3d01      	subs	r5, #1
 8006e7c:	429d      	cmp	r5, r3
 8006e7e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006e82:	da50      	bge.n	8006f26 <_strtod_l+0x76e>
 8006e84:	1b5b      	subs	r3, r3, r5
 8006e86:	2b1f      	cmp	r3, #31
 8006e88:	eba2 0203 	sub.w	r2, r2, r3
 8006e8c:	f04f 0101 	mov.w	r1, #1
 8006e90:	dc3d      	bgt.n	8006f0e <_strtod_l+0x756>
 8006e92:	fa01 f303 	lsl.w	r3, r1, r3
 8006e96:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e98:	2300      	movs	r3, #0
 8006e9a:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e9c:	18bd      	adds	r5, r7, r2
 8006e9e:	9b08      	ldr	r3, [sp, #32]
 8006ea0:	42af      	cmp	r7, r5
 8006ea2:	4416      	add	r6, r2
 8006ea4:	441e      	add	r6, r3
 8006ea6:	463b      	mov	r3, r7
 8006ea8:	bfa8      	it	ge
 8006eaa:	462b      	movge	r3, r5
 8006eac:	42b3      	cmp	r3, r6
 8006eae:	bfa8      	it	ge
 8006eb0:	4633      	movge	r3, r6
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	bfc2      	ittt	gt
 8006eb6:	1aed      	subgt	r5, r5, r3
 8006eb8:	1af6      	subgt	r6, r6, r3
 8006eba:	1aff      	subgt	r7, r7, r3
 8006ebc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	dd16      	ble.n	8006ef0 <_strtod_l+0x738>
 8006ec2:	4641      	mov	r1, r8
 8006ec4:	9805      	ldr	r0, [sp, #20]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f002 fd28 	bl	800991c <__pow5mult>
 8006ecc:	4680      	mov	r8, r0
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	d0ba      	beq.n	8006e48 <_strtod_l+0x690>
 8006ed2:	4601      	mov	r1, r0
 8006ed4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006ed6:	9805      	ldr	r0, [sp, #20]
 8006ed8:	f002 fc7e 	bl	80097d8 <__multiply>
 8006edc:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	f43f ae8d 	beq.w	8006bfe <_strtod_l+0x446>
 8006ee4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ee6:	9805      	ldr	r0, [sp, #20]
 8006ee8:	f002 fb62 	bl	80095b0 <_Bfree>
 8006eec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eee:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ef0:	2d00      	cmp	r5, #0
 8006ef2:	dc1d      	bgt.n	8006f30 <_strtod_l+0x778>
 8006ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	dd23      	ble.n	8006f42 <_strtod_l+0x78a>
 8006efa:	4649      	mov	r1, r9
 8006efc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006efe:	9805      	ldr	r0, [sp, #20]
 8006f00:	f002 fd0c 	bl	800991c <__pow5mult>
 8006f04:	4681      	mov	r9, r0
 8006f06:	b9e0      	cbnz	r0, 8006f42 <_strtod_l+0x78a>
 8006f08:	f04f 0900 	mov.w	r9, #0
 8006f0c:	e677      	b.n	8006bfe <_strtod_l+0x446>
 8006f0e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006f12:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006f16:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006f1a:	35e2      	adds	r5, #226	@ 0xe2
 8006f1c:	fa01 f305 	lsl.w	r3, r1, r5
 8006f20:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f22:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006f24:	e7ba      	b.n	8006e9c <_strtod_l+0x6e4>
 8006f26:	2300      	movs	r3, #0
 8006f28:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f2e:	e7b5      	b.n	8006e9c <_strtod_l+0x6e4>
 8006f30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f32:	9805      	ldr	r0, [sp, #20]
 8006f34:	462a      	mov	r2, r5
 8006f36:	f002 fd4b 	bl	80099d0 <__lshift>
 8006f3a:	901a      	str	r0, [sp, #104]	@ 0x68
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d1d9      	bne.n	8006ef4 <_strtod_l+0x73c>
 8006f40:	e65d      	b.n	8006bfe <_strtod_l+0x446>
 8006f42:	2e00      	cmp	r6, #0
 8006f44:	dd07      	ble.n	8006f56 <_strtod_l+0x79e>
 8006f46:	4649      	mov	r1, r9
 8006f48:	9805      	ldr	r0, [sp, #20]
 8006f4a:	4632      	mov	r2, r6
 8006f4c:	f002 fd40 	bl	80099d0 <__lshift>
 8006f50:	4681      	mov	r9, r0
 8006f52:	2800      	cmp	r0, #0
 8006f54:	d0d8      	beq.n	8006f08 <_strtod_l+0x750>
 8006f56:	2f00      	cmp	r7, #0
 8006f58:	dd08      	ble.n	8006f6c <_strtod_l+0x7b4>
 8006f5a:	4641      	mov	r1, r8
 8006f5c:	9805      	ldr	r0, [sp, #20]
 8006f5e:	463a      	mov	r2, r7
 8006f60:	f002 fd36 	bl	80099d0 <__lshift>
 8006f64:	4680      	mov	r8, r0
 8006f66:	2800      	cmp	r0, #0
 8006f68:	f43f ae49 	beq.w	8006bfe <_strtod_l+0x446>
 8006f6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f6e:	9805      	ldr	r0, [sp, #20]
 8006f70:	464a      	mov	r2, r9
 8006f72:	f002 fdb5 	bl	8009ae0 <__mdiff>
 8006f76:	4604      	mov	r4, r0
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	f43f ae40 	beq.w	8006bfe <_strtod_l+0x446>
 8006f7e:	68c3      	ldr	r3, [r0, #12]
 8006f80:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f82:	2300      	movs	r3, #0
 8006f84:	60c3      	str	r3, [r0, #12]
 8006f86:	4641      	mov	r1, r8
 8006f88:	f002 fd8e 	bl	8009aa8 <__mcmp>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	da45      	bge.n	800701c <_strtod_l+0x864>
 8006f90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f92:	ea53 030a 	orrs.w	r3, r3, sl
 8006f96:	d16b      	bne.n	8007070 <_strtod_l+0x8b8>
 8006f98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d167      	bne.n	8007070 <_strtod_l+0x8b8>
 8006fa0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006fa4:	0d1b      	lsrs	r3, r3, #20
 8006fa6:	051b      	lsls	r3, r3, #20
 8006fa8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006fac:	d960      	bls.n	8007070 <_strtod_l+0x8b8>
 8006fae:	6963      	ldr	r3, [r4, #20]
 8006fb0:	b913      	cbnz	r3, 8006fb8 <_strtod_l+0x800>
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	dd5b      	ble.n	8007070 <_strtod_l+0x8b8>
 8006fb8:	4621      	mov	r1, r4
 8006fba:	2201      	movs	r2, #1
 8006fbc:	9805      	ldr	r0, [sp, #20]
 8006fbe:	f002 fd07 	bl	80099d0 <__lshift>
 8006fc2:	4641      	mov	r1, r8
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	f002 fd6f 	bl	8009aa8 <__mcmp>
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	dd50      	ble.n	8007070 <_strtod_l+0x8b8>
 8006fce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006fd2:	9a08      	ldr	r2, [sp, #32]
 8006fd4:	0d1b      	lsrs	r3, r3, #20
 8006fd6:	051b      	lsls	r3, r3, #20
 8006fd8:	2a00      	cmp	r2, #0
 8006fda:	d06a      	beq.n	80070b2 <_strtod_l+0x8fa>
 8006fdc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006fe0:	d867      	bhi.n	80070b2 <_strtod_l+0x8fa>
 8006fe2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006fe6:	f67f ae9d 	bls.w	8006d24 <_strtod_l+0x56c>
 8006fea:	4b0a      	ldr	r3, [pc, #40]	@ (8007014 <_strtod_l+0x85c>)
 8006fec:	4650      	mov	r0, sl
 8006fee:	4659      	mov	r1, fp
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f7f9 fb09 	bl	8000608 <__aeabi_dmul>
 8006ff6:	4b08      	ldr	r3, [pc, #32]	@ (8007018 <_strtod_l+0x860>)
 8006ff8:	400b      	ands	r3, r1
 8006ffa:	4682      	mov	sl, r0
 8006ffc:	468b      	mov	fp, r1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f47f ae08 	bne.w	8006c14 <_strtod_l+0x45c>
 8007004:	9a05      	ldr	r2, [sp, #20]
 8007006:	2322      	movs	r3, #34	@ 0x22
 8007008:	6013      	str	r3, [r2, #0]
 800700a:	e603      	b.n	8006c14 <_strtod_l+0x45c>
 800700c:	0800ab88 	.word	0x0800ab88
 8007010:	fffffc02 	.word	0xfffffc02
 8007014:	39500000 	.word	0x39500000
 8007018:	7ff00000 	.word	0x7ff00000
 800701c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007020:	d165      	bne.n	80070ee <_strtod_l+0x936>
 8007022:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007024:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007028:	b35a      	cbz	r2, 8007082 <_strtod_l+0x8ca>
 800702a:	4a9f      	ldr	r2, [pc, #636]	@ (80072a8 <_strtod_l+0xaf0>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d12b      	bne.n	8007088 <_strtod_l+0x8d0>
 8007030:	9b08      	ldr	r3, [sp, #32]
 8007032:	4651      	mov	r1, sl
 8007034:	b303      	cbz	r3, 8007078 <_strtod_l+0x8c0>
 8007036:	4b9d      	ldr	r3, [pc, #628]	@ (80072ac <_strtod_l+0xaf4>)
 8007038:	465a      	mov	r2, fp
 800703a:	4013      	ands	r3, r2
 800703c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007040:	f04f 32ff 	mov.w	r2, #4294967295
 8007044:	d81b      	bhi.n	800707e <_strtod_l+0x8c6>
 8007046:	0d1b      	lsrs	r3, r3, #20
 8007048:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800704c:	fa02 f303 	lsl.w	r3, r2, r3
 8007050:	4299      	cmp	r1, r3
 8007052:	d119      	bne.n	8007088 <_strtod_l+0x8d0>
 8007054:	4b96      	ldr	r3, [pc, #600]	@ (80072b0 <_strtod_l+0xaf8>)
 8007056:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007058:	429a      	cmp	r2, r3
 800705a:	d102      	bne.n	8007062 <_strtod_l+0x8aa>
 800705c:	3101      	adds	r1, #1
 800705e:	f43f adce 	beq.w	8006bfe <_strtod_l+0x446>
 8007062:	4b92      	ldr	r3, [pc, #584]	@ (80072ac <_strtod_l+0xaf4>)
 8007064:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007066:	401a      	ands	r2, r3
 8007068:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800706c:	f04f 0a00 	mov.w	sl, #0
 8007070:	9b08      	ldr	r3, [sp, #32]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1b9      	bne.n	8006fea <_strtod_l+0x832>
 8007076:	e5cd      	b.n	8006c14 <_strtod_l+0x45c>
 8007078:	f04f 33ff 	mov.w	r3, #4294967295
 800707c:	e7e8      	b.n	8007050 <_strtod_l+0x898>
 800707e:	4613      	mov	r3, r2
 8007080:	e7e6      	b.n	8007050 <_strtod_l+0x898>
 8007082:	ea53 030a 	orrs.w	r3, r3, sl
 8007086:	d0a2      	beq.n	8006fce <_strtod_l+0x816>
 8007088:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800708a:	b1db      	cbz	r3, 80070c4 <_strtod_l+0x90c>
 800708c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800708e:	4213      	tst	r3, r2
 8007090:	d0ee      	beq.n	8007070 <_strtod_l+0x8b8>
 8007092:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007094:	9a08      	ldr	r2, [sp, #32]
 8007096:	4650      	mov	r0, sl
 8007098:	4659      	mov	r1, fp
 800709a:	b1bb      	cbz	r3, 80070cc <_strtod_l+0x914>
 800709c:	f7ff fb6b 	bl	8006776 <sulp>
 80070a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070a4:	ec53 2b10 	vmov	r2, r3, d0
 80070a8:	f7f9 f8f8 	bl	800029c <__adddf3>
 80070ac:	4682      	mov	sl, r0
 80070ae:	468b      	mov	fp, r1
 80070b0:	e7de      	b.n	8007070 <_strtod_l+0x8b8>
 80070b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80070b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80070ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80070be:	f04f 3aff 	mov.w	sl, #4294967295
 80070c2:	e7d5      	b.n	8007070 <_strtod_l+0x8b8>
 80070c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80070c6:	ea13 0f0a 	tst.w	r3, sl
 80070ca:	e7e1      	b.n	8007090 <_strtod_l+0x8d8>
 80070cc:	f7ff fb53 	bl	8006776 <sulp>
 80070d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070d4:	ec53 2b10 	vmov	r2, r3, d0
 80070d8:	f7f9 f8de 	bl	8000298 <__aeabi_dsub>
 80070dc:	2200      	movs	r2, #0
 80070de:	2300      	movs	r3, #0
 80070e0:	4682      	mov	sl, r0
 80070e2:	468b      	mov	fp, r1
 80070e4:	f7f9 fcf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d0c1      	beq.n	8007070 <_strtod_l+0x8b8>
 80070ec:	e61a      	b.n	8006d24 <_strtod_l+0x56c>
 80070ee:	4641      	mov	r1, r8
 80070f0:	4620      	mov	r0, r4
 80070f2:	f002 fe51 	bl	8009d98 <__ratio>
 80070f6:	ec57 6b10 	vmov	r6, r7, d0
 80070fa:	2200      	movs	r2, #0
 80070fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007100:	4630      	mov	r0, r6
 8007102:	4639      	mov	r1, r7
 8007104:	f7f9 fcfc 	bl	8000b00 <__aeabi_dcmple>
 8007108:	2800      	cmp	r0, #0
 800710a:	d06f      	beq.n	80071ec <_strtod_l+0xa34>
 800710c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d17a      	bne.n	8007208 <_strtod_l+0xa50>
 8007112:	f1ba 0f00 	cmp.w	sl, #0
 8007116:	d158      	bne.n	80071ca <_strtod_l+0xa12>
 8007118:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800711a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800711e:	2b00      	cmp	r3, #0
 8007120:	d15a      	bne.n	80071d8 <_strtod_l+0xa20>
 8007122:	4b64      	ldr	r3, [pc, #400]	@ (80072b4 <_strtod_l+0xafc>)
 8007124:	2200      	movs	r2, #0
 8007126:	4630      	mov	r0, r6
 8007128:	4639      	mov	r1, r7
 800712a:	f7f9 fcdf 	bl	8000aec <__aeabi_dcmplt>
 800712e:	2800      	cmp	r0, #0
 8007130:	d159      	bne.n	80071e6 <_strtod_l+0xa2e>
 8007132:	4630      	mov	r0, r6
 8007134:	4639      	mov	r1, r7
 8007136:	4b60      	ldr	r3, [pc, #384]	@ (80072b8 <_strtod_l+0xb00>)
 8007138:	2200      	movs	r2, #0
 800713a:	f7f9 fa65 	bl	8000608 <__aeabi_dmul>
 800713e:	4606      	mov	r6, r0
 8007140:	460f      	mov	r7, r1
 8007142:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007146:	9606      	str	r6, [sp, #24]
 8007148:	9307      	str	r3, [sp, #28]
 800714a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800714e:	4d57      	ldr	r5, [pc, #348]	@ (80072ac <_strtod_l+0xaf4>)
 8007150:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007156:	401d      	ands	r5, r3
 8007158:	4b58      	ldr	r3, [pc, #352]	@ (80072bc <_strtod_l+0xb04>)
 800715a:	429d      	cmp	r5, r3
 800715c:	f040 80b2 	bne.w	80072c4 <_strtod_l+0xb0c>
 8007160:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007162:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007166:	ec4b ab10 	vmov	d0, sl, fp
 800716a:	f002 fd4d 	bl	8009c08 <__ulp>
 800716e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007172:	ec51 0b10 	vmov	r0, r1, d0
 8007176:	f7f9 fa47 	bl	8000608 <__aeabi_dmul>
 800717a:	4652      	mov	r2, sl
 800717c:	465b      	mov	r3, fp
 800717e:	f7f9 f88d 	bl	800029c <__adddf3>
 8007182:	460b      	mov	r3, r1
 8007184:	4949      	ldr	r1, [pc, #292]	@ (80072ac <_strtod_l+0xaf4>)
 8007186:	4a4e      	ldr	r2, [pc, #312]	@ (80072c0 <_strtod_l+0xb08>)
 8007188:	4019      	ands	r1, r3
 800718a:	4291      	cmp	r1, r2
 800718c:	4682      	mov	sl, r0
 800718e:	d942      	bls.n	8007216 <_strtod_l+0xa5e>
 8007190:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007192:	4b47      	ldr	r3, [pc, #284]	@ (80072b0 <_strtod_l+0xaf8>)
 8007194:	429a      	cmp	r2, r3
 8007196:	d103      	bne.n	80071a0 <_strtod_l+0x9e8>
 8007198:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800719a:	3301      	adds	r3, #1
 800719c:	f43f ad2f 	beq.w	8006bfe <_strtod_l+0x446>
 80071a0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80072b0 <_strtod_l+0xaf8>
 80071a4:	f04f 3aff 	mov.w	sl, #4294967295
 80071a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80071aa:	9805      	ldr	r0, [sp, #20]
 80071ac:	f002 fa00 	bl	80095b0 <_Bfree>
 80071b0:	9805      	ldr	r0, [sp, #20]
 80071b2:	4649      	mov	r1, r9
 80071b4:	f002 f9fc 	bl	80095b0 <_Bfree>
 80071b8:	9805      	ldr	r0, [sp, #20]
 80071ba:	4641      	mov	r1, r8
 80071bc:	f002 f9f8 	bl	80095b0 <_Bfree>
 80071c0:	9805      	ldr	r0, [sp, #20]
 80071c2:	4621      	mov	r1, r4
 80071c4:	f002 f9f4 	bl	80095b0 <_Bfree>
 80071c8:	e619      	b.n	8006dfe <_strtod_l+0x646>
 80071ca:	f1ba 0f01 	cmp.w	sl, #1
 80071ce:	d103      	bne.n	80071d8 <_strtod_l+0xa20>
 80071d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f43f ada6 	beq.w	8006d24 <_strtod_l+0x56c>
 80071d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007288 <_strtod_l+0xad0>
 80071dc:	4f35      	ldr	r7, [pc, #212]	@ (80072b4 <_strtod_l+0xafc>)
 80071de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80071e2:	2600      	movs	r6, #0
 80071e4:	e7b1      	b.n	800714a <_strtod_l+0x992>
 80071e6:	4f34      	ldr	r7, [pc, #208]	@ (80072b8 <_strtod_l+0xb00>)
 80071e8:	2600      	movs	r6, #0
 80071ea:	e7aa      	b.n	8007142 <_strtod_l+0x98a>
 80071ec:	4b32      	ldr	r3, [pc, #200]	@ (80072b8 <_strtod_l+0xb00>)
 80071ee:	4630      	mov	r0, r6
 80071f0:	4639      	mov	r1, r7
 80071f2:	2200      	movs	r2, #0
 80071f4:	f7f9 fa08 	bl	8000608 <__aeabi_dmul>
 80071f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071fa:	4606      	mov	r6, r0
 80071fc:	460f      	mov	r7, r1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d09f      	beq.n	8007142 <_strtod_l+0x98a>
 8007202:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007206:	e7a0      	b.n	800714a <_strtod_l+0x992>
 8007208:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007290 <_strtod_l+0xad8>
 800720c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007210:	ec57 6b17 	vmov	r6, r7, d7
 8007214:	e799      	b.n	800714a <_strtod_l+0x992>
 8007216:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800721a:	9b08      	ldr	r3, [sp, #32]
 800721c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1c1      	bne.n	80071a8 <_strtod_l+0x9f0>
 8007224:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007228:	0d1b      	lsrs	r3, r3, #20
 800722a:	051b      	lsls	r3, r3, #20
 800722c:	429d      	cmp	r5, r3
 800722e:	d1bb      	bne.n	80071a8 <_strtod_l+0x9f0>
 8007230:	4630      	mov	r0, r6
 8007232:	4639      	mov	r1, r7
 8007234:	f7f9 fd48 	bl	8000cc8 <__aeabi_d2lz>
 8007238:	f7f9 f9b8 	bl	80005ac <__aeabi_l2d>
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	4630      	mov	r0, r6
 8007242:	4639      	mov	r1, r7
 8007244:	f7f9 f828 	bl	8000298 <__aeabi_dsub>
 8007248:	460b      	mov	r3, r1
 800724a:	4602      	mov	r2, r0
 800724c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007250:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007256:	ea46 060a 	orr.w	r6, r6, sl
 800725a:	431e      	orrs	r6, r3
 800725c:	d06f      	beq.n	800733e <_strtod_l+0xb86>
 800725e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007298 <_strtod_l+0xae0>)
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	f7f9 fc42 	bl	8000aec <__aeabi_dcmplt>
 8007268:	2800      	cmp	r0, #0
 800726a:	f47f acd3 	bne.w	8006c14 <_strtod_l+0x45c>
 800726e:	a30c      	add	r3, pc, #48	@ (adr r3, 80072a0 <_strtod_l+0xae8>)
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007278:	f7f9 fc56 	bl	8000b28 <__aeabi_dcmpgt>
 800727c:	2800      	cmp	r0, #0
 800727e:	d093      	beq.n	80071a8 <_strtod_l+0x9f0>
 8007280:	e4c8      	b.n	8006c14 <_strtod_l+0x45c>
 8007282:	bf00      	nop
 8007284:	f3af 8000 	nop.w
 8007288:	00000000 	.word	0x00000000
 800728c:	bff00000 	.word	0xbff00000
 8007290:	00000000 	.word	0x00000000
 8007294:	3ff00000 	.word	0x3ff00000
 8007298:	94a03595 	.word	0x94a03595
 800729c:	3fdfffff 	.word	0x3fdfffff
 80072a0:	35afe535 	.word	0x35afe535
 80072a4:	3fe00000 	.word	0x3fe00000
 80072a8:	000fffff 	.word	0x000fffff
 80072ac:	7ff00000 	.word	0x7ff00000
 80072b0:	7fefffff 	.word	0x7fefffff
 80072b4:	3ff00000 	.word	0x3ff00000
 80072b8:	3fe00000 	.word	0x3fe00000
 80072bc:	7fe00000 	.word	0x7fe00000
 80072c0:	7c9fffff 	.word	0x7c9fffff
 80072c4:	9b08      	ldr	r3, [sp, #32]
 80072c6:	b323      	cbz	r3, 8007312 <_strtod_l+0xb5a>
 80072c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80072cc:	d821      	bhi.n	8007312 <_strtod_l+0xb5a>
 80072ce:	a328      	add	r3, pc, #160	@ (adr r3, 8007370 <_strtod_l+0xbb8>)
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	4630      	mov	r0, r6
 80072d6:	4639      	mov	r1, r7
 80072d8:	f7f9 fc12 	bl	8000b00 <__aeabi_dcmple>
 80072dc:	b1a0      	cbz	r0, 8007308 <_strtod_l+0xb50>
 80072de:	4639      	mov	r1, r7
 80072e0:	4630      	mov	r0, r6
 80072e2:	f7f9 fc69 	bl	8000bb8 <__aeabi_d2uiz>
 80072e6:	2801      	cmp	r0, #1
 80072e8:	bf38      	it	cc
 80072ea:	2001      	movcc	r0, #1
 80072ec:	f7f9 f912 	bl	8000514 <__aeabi_ui2d>
 80072f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072f2:	4606      	mov	r6, r0
 80072f4:	460f      	mov	r7, r1
 80072f6:	b9fb      	cbnz	r3, 8007338 <_strtod_l+0xb80>
 80072f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80072fc:	9014      	str	r0, [sp, #80]	@ 0x50
 80072fe:	9315      	str	r3, [sp, #84]	@ 0x54
 8007300:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007304:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007308:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800730a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800730e:	1b5b      	subs	r3, r3, r5
 8007310:	9311      	str	r3, [sp, #68]	@ 0x44
 8007312:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007316:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800731a:	f002 fc75 	bl	8009c08 <__ulp>
 800731e:	4650      	mov	r0, sl
 8007320:	ec53 2b10 	vmov	r2, r3, d0
 8007324:	4659      	mov	r1, fp
 8007326:	f7f9 f96f 	bl	8000608 <__aeabi_dmul>
 800732a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800732e:	f7f8 ffb5 	bl	800029c <__adddf3>
 8007332:	4682      	mov	sl, r0
 8007334:	468b      	mov	fp, r1
 8007336:	e770      	b.n	800721a <_strtod_l+0xa62>
 8007338:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800733c:	e7e0      	b.n	8007300 <_strtod_l+0xb48>
 800733e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007378 <_strtod_l+0xbc0>)
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	f7f9 fbd2 	bl	8000aec <__aeabi_dcmplt>
 8007348:	e798      	b.n	800727c <_strtod_l+0xac4>
 800734a:	2300      	movs	r3, #0
 800734c:	930e      	str	r3, [sp, #56]	@ 0x38
 800734e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007350:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	f7ff ba6d 	b.w	8006832 <_strtod_l+0x7a>
 8007358:	2a65      	cmp	r2, #101	@ 0x65
 800735a:	f43f ab68 	beq.w	8006a2e <_strtod_l+0x276>
 800735e:	2a45      	cmp	r2, #69	@ 0x45
 8007360:	f43f ab65 	beq.w	8006a2e <_strtod_l+0x276>
 8007364:	2301      	movs	r3, #1
 8007366:	f7ff bba0 	b.w	8006aaa <_strtod_l+0x2f2>
 800736a:	bf00      	nop
 800736c:	f3af 8000 	nop.w
 8007370:	ffc00000 	.word	0xffc00000
 8007374:	41dfffff 	.word	0x41dfffff
 8007378:	94a03595 	.word	0x94a03595
 800737c:	3fcfffff 	.word	0x3fcfffff

08007380 <strtod>:
 8007380:	460a      	mov	r2, r1
 8007382:	4601      	mov	r1, r0
 8007384:	4802      	ldr	r0, [pc, #8]	@ (8007390 <strtod+0x10>)
 8007386:	4b03      	ldr	r3, [pc, #12]	@ (8007394 <strtod+0x14>)
 8007388:	6800      	ldr	r0, [r0, #0]
 800738a:	f7ff ba15 	b.w	80067b8 <_strtod_l>
 800738e:	bf00      	nop
 8007390:	20000198 	.word	0x20000198
 8007394:	2000002c 	.word	0x2000002c

08007398 <__cvt>:
 8007398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800739c:	ec57 6b10 	vmov	r6, r7, d0
 80073a0:	2f00      	cmp	r7, #0
 80073a2:	460c      	mov	r4, r1
 80073a4:	4619      	mov	r1, r3
 80073a6:	463b      	mov	r3, r7
 80073a8:	bfbb      	ittet	lt
 80073aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80073ae:	461f      	movlt	r7, r3
 80073b0:	2300      	movge	r3, #0
 80073b2:	232d      	movlt	r3, #45	@ 0x2d
 80073b4:	700b      	strb	r3, [r1, #0]
 80073b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80073bc:	4691      	mov	r9, r2
 80073be:	f023 0820 	bic.w	r8, r3, #32
 80073c2:	bfbc      	itt	lt
 80073c4:	4632      	movlt	r2, r6
 80073c6:	4616      	movlt	r6, r2
 80073c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80073cc:	d005      	beq.n	80073da <__cvt+0x42>
 80073ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80073d2:	d100      	bne.n	80073d6 <__cvt+0x3e>
 80073d4:	3401      	adds	r4, #1
 80073d6:	2102      	movs	r1, #2
 80073d8:	e000      	b.n	80073dc <__cvt+0x44>
 80073da:	2103      	movs	r1, #3
 80073dc:	ab03      	add	r3, sp, #12
 80073de:	9301      	str	r3, [sp, #4]
 80073e0:	ab02      	add	r3, sp, #8
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	ec47 6b10 	vmov	d0, r6, r7
 80073e8:	4653      	mov	r3, sl
 80073ea:	4622      	mov	r2, r4
 80073ec:	f000 fe84 	bl	80080f8 <_dtoa_r>
 80073f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80073f4:	4605      	mov	r5, r0
 80073f6:	d119      	bne.n	800742c <__cvt+0x94>
 80073f8:	f019 0f01 	tst.w	r9, #1
 80073fc:	d00e      	beq.n	800741c <__cvt+0x84>
 80073fe:	eb00 0904 	add.w	r9, r0, r4
 8007402:	2200      	movs	r2, #0
 8007404:	2300      	movs	r3, #0
 8007406:	4630      	mov	r0, r6
 8007408:	4639      	mov	r1, r7
 800740a:	f7f9 fb65 	bl	8000ad8 <__aeabi_dcmpeq>
 800740e:	b108      	cbz	r0, 8007414 <__cvt+0x7c>
 8007410:	f8cd 900c 	str.w	r9, [sp, #12]
 8007414:	2230      	movs	r2, #48	@ 0x30
 8007416:	9b03      	ldr	r3, [sp, #12]
 8007418:	454b      	cmp	r3, r9
 800741a:	d31e      	bcc.n	800745a <__cvt+0xc2>
 800741c:	9b03      	ldr	r3, [sp, #12]
 800741e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007420:	1b5b      	subs	r3, r3, r5
 8007422:	4628      	mov	r0, r5
 8007424:	6013      	str	r3, [r2, #0]
 8007426:	b004      	add	sp, #16
 8007428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800742c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007430:	eb00 0904 	add.w	r9, r0, r4
 8007434:	d1e5      	bne.n	8007402 <__cvt+0x6a>
 8007436:	7803      	ldrb	r3, [r0, #0]
 8007438:	2b30      	cmp	r3, #48	@ 0x30
 800743a:	d10a      	bne.n	8007452 <__cvt+0xba>
 800743c:	2200      	movs	r2, #0
 800743e:	2300      	movs	r3, #0
 8007440:	4630      	mov	r0, r6
 8007442:	4639      	mov	r1, r7
 8007444:	f7f9 fb48 	bl	8000ad8 <__aeabi_dcmpeq>
 8007448:	b918      	cbnz	r0, 8007452 <__cvt+0xba>
 800744a:	f1c4 0401 	rsb	r4, r4, #1
 800744e:	f8ca 4000 	str.w	r4, [sl]
 8007452:	f8da 3000 	ldr.w	r3, [sl]
 8007456:	4499      	add	r9, r3
 8007458:	e7d3      	b.n	8007402 <__cvt+0x6a>
 800745a:	1c59      	adds	r1, r3, #1
 800745c:	9103      	str	r1, [sp, #12]
 800745e:	701a      	strb	r2, [r3, #0]
 8007460:	e7d9      	b.n	8007416 <__cvt+0x7e>

08007462 <__exponent>:
 8007462:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007464:	2900      	cmp	r1, #0
 8007466:	bfba      	itte	lt
 8007468:	4249      	neglt	r1, r1
 800746a:	232d      	movlt	r3, #45	@ 0x2d
 800746c:	232b      	movge	r3, #43	@ 0x2b
 800746e:	2909      	cmp	r1, #9
 8007470:	7002      	strb	r2, [r0, #0]
 8007472:	7043      	strb	r3, [r0, #1]
 8007474:	dd29      	ble.n	80074ca <__exponent+0x68>
 8007476:	f10d 0307 	add.w	r3, sp, #7
 800747a:	461d      	mov	r5, r3
 800747c:	270a      	movs	r7, #10
 800747e:	461a      	mov	r2, r3
 8007480:	fbb1 f6f7 	udiv	r6, r1, r7
 8007484:	fb07 1416 	mls	r4, r7, r6, r1
 8007488:	3430      	adds	r4, #48	@ 0x30
 800748a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800748e:	460c      	mov	r4, r1
 8007490:	2c63      	cmp	r4, #99	@ 0x63
 8007492:	f103 33ff 	add.w	r3, r3, #4294967295
 8007496:	4631      	mov	r1, r6
 8007498:	dcf1      	bgt.n	800747e <__exponent+0x1c>
 800749a:	3130      	adds	r1, #48	@ 0x30
 800749c:	1e94      	subs	r4, r2, #2
 800749e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80074a2:	1c41      	adds	r1, r0, #1
 80074a4:	4623      	mov	r3, r4
 80074a6:	42ab      	cmp	r3, r5
 80074a8:	d30a      	bcc.n	80074c0 <__exponent+0x5e>
 80074aa:	f10d 0309 	add.w	r3, sp, #9
 80074ae:	1a9b      	subs	r3, r3, r2
 80074b0:	42ac      	cmp	r4, r5
 80074b2:	bf88      	it	hi
 80074b4:	2300      	movhi	r3, #0
 80074b6:	3302      	adds	r3, #2
 80074b8:	4403      	add	r3, r0
 80074ba:	1a18      	subs	r0, r3, r0
 80074bc:	b003      	add	sp, #12
 80074be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80074c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80074c8:	e7ed      	b.n	80074a6 <__exponent+0x44>
 80074ca:	2330      	movs	r3, #48	@ 0x30
 80074cc:	3130      	adds	r1, #48	@ 0x30
 80074ce:	7083      	strb	r3, [r0, #2]
 80074d0:	70c1      	strb	r1, [r0, #3]
 80074d2:	1d03      	adds	r3, r0, #4
 80074d4:	e7f1      	b.n	80074ba <__exponent+0x58>
	...

080074d8 <_printf_float>:
 80074d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074dc:	b08d      	sub	sp, #52	@ 0x34
 80074de:	460c      	mov	r4, r1
 80074e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80074e4:	4616      	mov	r6, r2
 80074e6:	461f      	mov	r7, r3
 80074e8:	4605      	mov	r5, r0
 80074ea:	f000 fced 	bl	8007ec8 <_localeconv_r>
 80074ee:	6803      	ldr	r3, [r0, #0]
 80074f0:	9304      	str	r3, [sp, #16]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7f8 fec4 	bl	8000280 <strlen>
 80074f8:	2300      	movs	r3, #0
 80074fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80074fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007500:	9005      	str	r0, [sp, #20]
 8007502:	3307      	adds	r3, #7
 8007504:	f023 0307 	bic.w	r3, r3, #7
 8007508:	f103 0208 	add.w	r2, r3, #8
 800750c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007510:	f8d4 b000 	ldr.w	fp, [r4]
 8007514:	f8c8 2000 	str.w	r2, [r8]
 8007518:	e9d3 8900 	ldrd	r8, r9, [r3]
 800751c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007520:	9307      	str	r3, [sp, #28]
 8007522:	f8cd 8018 	str.w	r8, [sp, #24]
 8007526:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800752a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800752e:	4b9c      	ldr	r3, [pc, #624]	@ (80077a0 <_printf_float+0x2c8>)
 8007530:	f04f 32ff 	mov.w	r2, #4294967295
 8007534:	f7f9 fb02 	bl	8000b3c <__aeabi_dcmpun>
 8007538:	bb70      	cbnz	r0, 8007598 <_printf_float+0xc0>
 800753a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800753e:	4b98      	ldr	r3, [pc, #608]	@ (80077a0 <_printf_float+0x2c8>)
 8007540:	f04f 32ff 	mov.w	r2, #4294967295
 8007544:	f7f9 fadc 	bl	8000b00 <__aeabi_dcmple>
 8007548:	bb30      	cbnz	r0, 8007598 <_printf_float+0xc0>
 800754a:	2200      	movs	r2, #0
 800754c:	2300      	movs	r3, #0
 800754e:	4640      	mov	r0, r8
 8007550:	4649      	mov	r1, r9
 8007552:	f7f9 facb 	bl	8000aec <__aeabi_dcmplt>
 8007556:	b110      	cbz	r0, 800755e <_printf_float+0x86>
 8007558:	232d      	movs	r3, #45	@ 0x2d
 800755a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800755e:	4a91      	ldr	r2, [pc, #580]	@ (80077a4 <_printf_float+0x2cc>)
 8007560:	4b91      	ldr	r3, [pc, #580]	@ (80077a8 <_printf_float+0x2d0>)
 8007562:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007566:	bf8c      	ite	hi
 8007568:	4690      	movhi	r8, r2
 800756a:	4698      	movls	r8, r3
 800756c:	2303      	movs	r3, #3
 800756e:	6123      	str	r3, [r4, #16]
 8007570:	f02b 0304 	bic.w	r3, fp, #4
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	f04f 0900 	mov.w	r9, #0
 800757a:	9700      	str	r7, [sp, #0]
 800757c:	4633      	mov	r3, r6
 800757e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007580:	4621      	mov	r1, r4
 8007582:	4628      	mov	r0, r5
 8007584:	f000 f9d2 	bl	800792c <_printf_common>
 8007588:	3001      	adds	r0, #1
 800758a:	f040 808d 	bne.w	80076a8 <_printf_float+0x1d0>
 800758e:	f04f 30ff 	mov.w	r0, #4294967295
 8007592:	b00d      	add	sp, #52	@ 0x34
 8007594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007598:	4642      	mov	r2, r8
 800759a:	464b      	mov	r3, r9
 800759c:	4640      	mov	r0, r8
 800759e:	4649      	mov	r1, r9
 80075a0:	f7f9 facc 	bl	8000b3c <__aeabi_dcmpun>
 80075a4:	b140      	cbz	r0, 80075b8 <_printf_float+0xe0>
 80075a6:	464b      	mov	r3, r9
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	bfbc      	itt	lt
 80075ac:	232d      	movlt	r3, #45	@ 0x2d
 80075ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80075b2:	4a7e      	ldr	r2, [pc, #504]	@ (80077ac <_printf_float+0x2d4>)
 80075b4:	4b7e      	ldr	r3, [pc, #504]	@ (80077b0 <_printf_float+0x2d8>)
 80075b6:	e7d4      	b.n	8007562 <_printf_float+0x8a>
 80075b8:	6863      	ldr	r3, [r4, #4]
 80075ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80075be:	9206      	str	r2, [sp, #24]
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	d13b      	bne.n	800763c <_printf_float+0x164>
 80075c4:	2306      	movs	r3, #6
 80075c6:	6063      	str	r3, [r4, #4]
 80075c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80075cc:	2300      	movs	r3, #0
 80075ce:	6022      	str	r2, [r4, #0]
 80075d0:	9303      	str	r3, [sp, #12]
 80075d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80075d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80075d8:	ab09      	add	r3, sp, #36	@ 0x24
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	6861      	ldr	r1, [r4, #4]
 80075de:	ec49 8b10 	vmov	d0, r8, r9
 80075e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80075e6:	4628      	mov	r0, r5
 80075e8:	f7ff fed6 	bl	8007398 <__cvt>
 80075ec:	9b06      	ldr	r3, [sp, #24]
 80075ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075f0:	2b47      	cmp	r3, #71	@ 0x47
 80075f2:	4680      	mov	r8, r0
 80075f4:	d129      	bne.n	800764a <_printf_float+0x172>
 80075f6:	1cc8      	adds	r0, r1, #3
 80075f8:	db02      	blt.n	8007600 <_printf_float+0x128>
 80075fa:	6863      	ldr	r3, [r4, #4]
 80075fc:	4299      	cmp	r1, r3
 80075fe:	dd41      	ble.n	8007684 <_printf_float+0x1ac>
 8007600:	f1aa 0a02 	sub.w	sl, sl, #2
 8007604:	fa5f fa8a 	uxtb.w	sl, sl
 8007608:	3901      	subs	r1, #1
 800760a:	4652      	mov	r2, sl
 800760c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007610:	9109      	str	r1, [sp, #36]	@ 0x24
 8007612:	f7ff ff26 	bl	8007462 <__exponent>
 8007616:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007618:	1813      	adds	r3, r2, r0
 800761a:	2a01      	cmp	r2, #1
 800761c:	4681      	mov	r9, r0
 800761e:	6123      	str	r3, [r4, #16]
 8007620:	dc02      	bgt.n	8007628 <_printf_float+0x150>
 8007622:	6822      	ldr	r2, [r4, #0]
 8007624:	07d2      	lsls	r2, r2, #31
 8007626:	d501      	bpl.n	800762c <_printf_float+0x154>
 8007628:	3301      	adds	r3, #1
 800762a:	6123      	str	r3, [r4, #16]
 800762c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007630:	2b00      	cmp	r3, #0
 8007632:	d0a2      	beq.n	800757a <_printf_float+0xa2>
 8007634:	232d      	movs	r3, #45	@ 0x2d
 8007636:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800763a:	e79e      	b.n	800757a <_printf_float+0xa2>
 800763c:	9a06      	ldr	r2, [sp, #24]
 800763e:	2a47      	cmp	r2, #71	@ 0x47
 8007640:	d1c2      	bne.n	80075c8 <_printf_float+0xf0>
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1c0      	bne.n	80075c8 <_printf_float+0xf0>
 8007646:	2301      	movs	r3, #1
 8007648:	e7bd      	b.n	80075c6 <_printf_float+0xee>
 800764a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800764e:	d9db      	bls.n	8007608 <_printf_float+0x130>
 8007650:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007654:	d118      	bne.n	8007688 <_printf_float+0x1b0>
 8007656:	2900      	cmp	r1, #0
 8007658:	6863      	ldr	r3, [r4, #4]
 800765a:	dd0b      	ble.n	8007674 <_printf_float+0x19c>
 800765c:	6121      	str	r1, [r4, #16]
 800765e:	b913      	cbnz	r3, 8007666 <_printf_float+0x18e>
 8007660:	6822      	ldr	r2, [r4, #0]
 8007662:	07d0      	lsls	r0, r2, #31
 8007664:	d502      	bpl.n	800766c <_printf_float+0x194>
 8007666:	3301      	adds	r3, #1
 8007668:	440b      	add	r3, r1
 800766a:	6123      	str	r3, [r4, #16]
 800766c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800766e:	f04f 0900 	mov.w	r9, #0
 8007672:	e7db      	b.n	800762c <_printf_float+0x154>
 8007674:	b913      	cbnz	r3, 800767c <_printf_float+0x1a4>
 8007676:	6822      	ldr	r2, [r4, #0]
 8007678:	07d2      	lsls	r2, r2, #31
 800767a:	d501      	bpl.n	8007680 <_printf_float+0x1a8>
 800767c:	3302      	adds	r3, #2
 800767e:	e7f4      	b.n	800766a <_printf_float+0x192>
 8007680:	2301      	movs	r3, #1
 8007682:	e7f2      	b.n	800766a <_printf_float+0x192>
 8007684:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800768a:	4299      	cmp	r1, r3
 800768c:	db05      	blt.n	800769a <_printf_float+0x1c2>
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	6121      	str	r1, [r4, #16]
 8007692:	07d8      	lsls	r0, r3, #31
 8007694:	d5ea      	bpl.n	800766c <_printf_float+0x194>
 8007696:	1c4b      	adds	r3, r1, #1
 8007698:	e7e7      	b.n	800766a <_printf_float+0x192>
 800769a:	2900      	cmp	r1, #0
 800769c:	bfd4      	ite	le
 800769e:	f1c1 0202 	rsble	r2, r1, #2
 80076a2:	2201      	movgt	r2, #1
 80076a4:	4413      	add	r3, r2
 80076a6:	e7e0      	b.n	800766a <_printf_float+0x192>
 80076a8:	6823      	ldr	r3, [r4, #0]
 80076aa:	055a      	lsls	r2, r3, #21
 80076ac:	d407      	bmi.n	80076be <_printf_float+0x1e6>
 80076ae:	6923      	ldr	r3, [r4, #16]
 80076b0:	4642      	mov	r2, r8
 80076b2:	4631      	mov	r1, r6
 80076b4:	4628      	mov	r0, r5
 80076b6:	47b8      	blx	r7
 80076b8:	3001      	adds	r0, #1
 80076ba:	d12b      	bne.n	8007714 <_printf_float+0x23c>
 80076bc:	e767      	b.n	800758e <_printf_float+0xb6>
 80076be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80076c2:	f240 80dd 	bls.w	8007880 <_printf_float+0x3a8>
 80076c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80076ca:	2200      	movs	r2, #0
 80076cc:	2300      	movs	r3, #0
 80076ce:	f7f9 fa03 	bl	8000ad8 <__aeabi_dcmpeq>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d033      	beq.n	800773e <_printf_float+0x266>
 80076d6:	4a37      	ldr	r2, [pc, #220]	@ (80077b4 <_printf_float+0x2dc>)
 80076d8:	2301      	movs	r3, #1
 80076da:	4631      	mov	r1, r6
 80076dc:	4628      	mov	r0, r5
 80076de:	47b8      	blx	r7
 80076e0:	3001      	adds	r0, #1
 80076e2:	f43f af54 	beq.w	800758e <_printf_float+0xb6>
 80076e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80076ea:	4543      	cmp	r3, r8
 80076ec:	db02      	blt.n	80076f4 <_printf_float+0x21c>
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	07d8      	lsls	r0, r3, #31
 80076f2:	d50f      	bpl.n	8007714 <_printf_float+0x23c>
 80076f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076f8:	4631      	mov	r1, r6
 80076fa:	4628      	mov	r0, r5
 80076fc:	47b8      	blx	r7
 80076fe:	3001      	adds	r0, #1
 8007700:	f43f af45 	beq.w	800758e <_printf_float+0xb6>
 8007704:	f04f 0900 	mov.w	r9, #0
 8007708:	f108 38ff 	add.w	r8, r8, #4294967295
 800770c:	f104 0a1a 	add.w	sl, r4, #26
 8007710:	45c8      	cmp	r8, r9
 8007712:	dc09      	bgt.n	8007728 <_printf_float+0x250>
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	079b      	lsls	r3, r3, #30
 8007718:	f100 8103 	bmi.w	8007922 <_printf_float+0x44a>
 800771c:	68e0      	ldr	r0, [r4, #12]
 800771e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007720:	4298      	cmp	r0, r3
 8007722:	bfb8      	it	lt
 8007724:	4618      	movlt	r0, r3
 8007726:	e734      	b.n	8007592 <_printf_float+0xba>
 8007728:	2301      	movs	r3, #1
 800772a:	4652      	mov	r2, sl
 800772c:	4631      	mov	r1, r6
 800772e:	4628      	mov	r0, r5
 8007730:	47b8      	blx	r7
 8007732:	3001      	adds	r0, #1
 8007734:	f43f af2b 	beq.w	800758e <_printf_float+0xb6>
 8007738:	f109 0901 	add.w	r9, r9, #1
 800773c:	e7e8      	b.n	8007710 <_printf_float+0x238>
 800773e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007740:	2b00      	cmp	r3, #0
 8007742:	dc39      	bgt.n	80077b8 <_printf_float+0x2e0>
 8007744:	4a1b      	ldr	r2, [pc, #108]	@ (80077b4 <_printf_float+0x2dc>)
 8007746:	2301      	movs	r3, #1
 8007748:	4631      	mov	r1, r6
 800774a:	4628      	mov	r0, r5
 800774c:	47b8      	blx	r7
 800774e:	3001      	adds	r0, #1
 8007750:	f43f af1d 	beq.w	800758e <_printf_float+0xb6>
 8007754:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007758:	ea59 0303 	orrs.w	r3, r9, r3
 800775c:	d102      	bne.n	8007764 <_printf_float+0x28c>
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	07d9      	lsls	r1, r3, #31
 8007762:	d5d7      	bpl.n	8007714 <_printf_float+0x23c>
 8007764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007768:	4631      	mov	r1, r6
 800776a:	4628      	mov	r0, r5
 800776c:	47b8      	blx	r7
 800776e:	3001      	adds	r0, #1
 8007770:	f43f af0d 	beq.w	800758e <_printf_float+0xb6>
 8007774:	f04f 0a00 	mov.w	sl, #0
 8007778:	f104 0b1a 	add.w	fp, r4, #26
 800777c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800777e:	425b      	negs	r3, r3
 8007780:	4553      	cmp	r3, sl
 8007782:	dc01      	bgt.n	8007788 <_printf_float+0x2b0>
 8007784:	464b      	mov	r3, r9
 8007786:	e793      	b.n	80076b0 <_printf_float+0x1d8>
 8007788:	2301      	movs	r3, #1
 800778a:	465a      	mov	r2, fp
 800778c:	4631      	mov	r1, r6
 800778e:	4628      	mov	r0, r5
 8007790:	47b8      	blx	r7
 8007792:	3001      	adds	r0, #1
 8007794:	f43f aefb 	beq.w	800758e <_printf_float+0xb6>
 8007798:	f10a 0a01 	add.w	sl, sl, #1
 800779c:	e7ee      	b.n	800777c <_printf_float+0x2a4>
 800779e:	bf00      	nop
 80077a0:	7fefffff 	.word	0x7fefffff
 80077a4:	0800a992 	.word	0x0800a992
 80077a8:	0800a98e 	.word	0x0800a98e
 80077ac:	0800a99a 	.word	0x0800a99a
 80077b0:	0800a996 	.word	0x0800a996
 80077b4:	0800a99e 	.word	0x0800a99e
 80077b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80077ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80077be:	4553      	cmp	r3, sl
 80077c0:	bfa8      	it	ge
 80077c2:	4653      	movge	r3, sl
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	4699      	mov	r9, r3
 80077c8:	dc36      	bgt.n	8007838 <_printf_float+0x360>
 80077ca:	f04f 0b00 	mov.w	fp, #0
 80077ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077d2:	f104 021a 	add.w	r2, r4, #26
 80077d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80077d8:	9306      	str	r3, [sp, #24]
 80077da:	eba3 0309 	sub.w	r3, r3, r9
 80077de:	455b      	cmp	r3, fp
 80077e0:	dc31      	bgt.n	8007846 <_printf_float+0x36e>
 80077e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077e4:	459a      	cmp	sl, r3
 80077e6:	dc3a      	bgt.n	800785e <_printf_float+0x386>
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	07da      	lsls	r2, r3, #31
 80077ec:	d437      	bmi.n	800785e <_printf_float+0x386>
 80077ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077f0:	ebaa 0903 	sub.w	r9, sl, r3
 80077f4:	9b06      	ldr	r3, [sp, #24]
 80077f6:	ebaa 0303 	sub.w	r3, sl, r3
 80077fa:	4599      	cmp	r9, r3
 80077fc:	bfa8      	it	ge
 80077fe:	4699      	movge	r9, r3
 8007800:	f1b9 0f00 	cmp.w	r9, #0
 8007804:	dc33      	bgt.n	800786e <_printf_float+0x396>
 8007806:	f04f 0800 	mov.w	r8, #0
 800780a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800780e:	f104 0b1a 	add.w	fp, r4, #26
 8007812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007814:	ebaa 0303 	sub.w	r3, sl, r3
 8007818:	eba3 0309 	sub.w	r3, r3, r9
 800781c:	4543      	cmp	r3, r8
 800781e:	f77f af79 	ble.w	8007714 <_printf_float+0x23c>
 8007822:	2301      	movs	r3, #1
 8007824:	465a      	mov	r2, fp
 8007826:	4631      	mov	r1, r6
 8007828:	4628      	mov	r0, r5
 800782a:	47b8      	blx	r7
 800782c:	3001      	adds	r0, #1
 800782e:	f43f aeae 	beq.w	800758e <_printf_float+0xb6>
 8007832:	f108 0801 	add.w	r8, r8, #1
 8007836:	e7ec      	b.n	8007812 <_printf_float+0x33a>
 8007838:	4642      	mov	r2, r8
 800783a:	4631      	mov	r1, r6
 800783c:	4628      	mov	r0, r5
 800783e:	47b8      	blx	r7
 8007840:	3001      	adds	r0, #1
 8007842:	d1c2      	bne.n	80077ca <_printf_float+0x2f2>
 8007844:	e6a3      	b.n	800758e <_printf_float+0xb6>
 8007846:	2301      	movs	r3, #1
 8007848:	4631      	mov	r1, r6
 800784a:	4628      	mov	r0, r5
 800784c:	9206      	str	r2, [sp, #24]
 800784e:	47b8      	blx	r7
 8007850:	3001      	adds	r0, #1
 8007852:	f43f ae9c 	beq.w	800758e <_printf_float+0xb6>
 8007856:	9a06      	ldr	r2, [sp, #24]
 8007858:	f10b 0b01 	add.w	fp, fp, #1
 800785c:	e7bb      	b.n	80077d6 <_printf_float+0x2fe>
 800785e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007862:	4631      	mov	r1, r6
 8007864:	4628      	mov	r0, r5
 8007866:	47b8      	blx	r7
 8007868:	3001      	adds	r0, #1
 800786a:	d1c0      	bne.n	80077ee <_printf_float+0x316>
 800786c:	e68f      	b.n	800758e <_printf_float+0xb6>
 800786e:	9a06      	ldr	r2, [sp, #24]
 8007870:	464b      	mov	r3, r9
 8007872:	4442      	add	r2, r8
 8007874:	4631      	mov	r1, r6
 8007876:	4628      	mov	r0, r5
 8007878:	47b8      	blx	r7
 800787a:	3001      	adds	r0, #1
 800787c:	d1c3      	bne.n	8007806 <_printf_float+0x32e>
 800787e:	e686      	b.n	800758e <_printf_float+0xb6>
 8007880:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007884:	f1ba 0f01 	cmp.w	sl, #1
 8007888:	dc01      	bgt.n	800788e <_printf_float+0x3b6>
 800788a:	07db      	lsls	r3, r3, #31
 800788c:	d536      	bpl.n	80078fc <_printf_float+0x424>
 800788e:	2301      	movs	r3, #1
 8007890:	4642      	mov	r2, r8
 8007892:	4631      	mov	r1, r6
 8007894:	4628      	mov	r0, r5
 8007896:	47b8      	blx	r7
 8007898:	3001      	adds	r0, #1
 800789a:	f43f ae78 	beq.w	800758e <_printf_float+0xb6>
 800789e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078a2:	4631      	mov	r1, r6
 80078a4:	4628      	mov	r0, r5
 80078a6:	47b8      	blx	r7
 80078a8:	3001      	adds	r0, #1
 80078aa:	f43f ae70 	beq.w	800758e <_printf_float+0xb6>
 80078ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80078b2:	2200      	movs	r2, #0
 80078b4:	2300      	movs	r3, #0
 80078b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078ba:	f7f9 f90d 	bl	8000ad8 <__aeabi_dcmpeq>
 80078be:	b9c0      	cbnz	r0, 80078f2 <_printf_float+0x41a>
 80078c0:	4653      	mov	r3, sl
 80078c2:	f108 0201 	add.w	r2, r8, #1
 80078c6:	4631      	mov	r1, r6
 80078c8:	4628      	mov	r0, r5
 80078ca:	47b8      	blx	r7
 80078cc:	3001      	adds	r0, #1
 80078ce:	d10c      	bne.n	80078ea <_printf_float+0x412>
 80078d0:	e65d      	b.n	800758e <_printf_float+0xb6>
 80078d2:	2301      	movs	r3, #1
 80078d4:	465a      	mov	r2, fp
 80078d6:	4631      	mov	r1, r6
 80078d8:	4628      	mov	r0, r5
 80078da:	47b8      	blx	r7
 80078dc:	3001      	adds	r0, #1
 80078de:	f43f ae56 	beq.w	800758e <_printf_float+0xb6>
 80078e2:	f108 0801 	add.w	r8, r8, #1
 80078e6:	45d0      	cmp	r8, sl
 80078e8:	dbf3      	blt.n	80078d2 <_printf_float+0x3fa>
 80078ea:	464b      	mov	r3, r9
 80078ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80078f0:	e6df      	b.n	80076b2 <_printf_float+0x1da>
 80078f2:	f04f 0800 	mov.w	r8, #0
 80078f6:	f104 0b1a 	add.w	fp, r4, #26
 80078fa:	e7f4      	b.n	80078e6 <_printf_float+0x40e>
 80078fc:	2301      	movs	r3, #1
 80078fe:	4642      	mov	r2, r8
 8007900:	e7e1      	b.n	80078c6 <_printf_float+0x3ee>
 8007902:	2301      	movs	r3, #1
 8007904:	464a      	mov	r2, r9
 8007906:	4631      	mov	r1, r6
 8007908:	4628      	mov	r0, r5
 800790a:	47b8      	blx	r7
 800790c:	3001      	adds	r0, #1
 800790e:	f43f ae3e 	beq.w	800758e <_printf_float+0xb6>
 8007912:	f108 0801 	add.w	r8, r8, #1
 8007916:	68e3      	ldr	r3, [r4, #12]
 8007918:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800791a:	1a5b      	subs	r3, r3, r1
 800791c:	4543      	cmp	r3, r8
 800791e:	dcf0      	bgt.n	8007902 <_printf_float+0x42a>
 8007920:	e6fc      	b.n	800771c <_printf_float+0x244>
 8007922:	f04f 0800 	mov.w	r8, #0
 8007926:	f104 0919 	add.w	r9, r4, #25
 800792a:	e7f4      	b.n	8007916 <_printf_float+0x43e>

0800792c <_printf_common>:
 800792c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007930:	4616      	mov	r6, r2
 8007932:	4698      	mov	r8, r3
 8007934:	688a      	ldr	r2, [r1, #8]
 8007936:	690b      	ldr	r3, [r1, #16]
 8007938:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800793c:	4293      	cmp	r3, r2
 800793e:	bfb8      	it	lt
 8007940:	4613      	movlt	r3, r2
 8007942:	6033      	str	r3, [r6, #0]
 8007944:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007948:	4607      	mov	r7, r0
 800794a:	460c      	mov	r4, r1
 800794c:	b10a      	cbz	r2, 8007952 <_printf_common+0x26>
 800794e:	3301      	adds	r3, #1
 8007950:	6033      	str	r3, [r6, #0]
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	0699      	lsls	r1, r3, #26
 8007956:	bf42      	ittt	mi
 8007958:	6833      	ldrmi	r3, [r6, #0]
 800795a:	3302      	addmi	r3, #2
 800795c:	6033      	strmi	r3, [r6, #0]
 800795e:	6825      	ldr	r5, [r4, #0]
 8007960:	f015 0506 	ands.w	r5, r5, #6
 8007964:	d106      	bne.n	8007974 <_printf_common+0x48>
 8007966:	f104 0a19 	add.w	sl, r4, #25
 800796a:	68e3      	ldr	r3, [r4, #12]
 800796c:	6832      	ldr	r2, [r6, #0]
 800796e:	1a9b      	subs	r3, r3, r2
 8007970:	42ab      	cmp	r3, r5
 8007972:	dc26      	bgt.n	80079c2 <_printf_common+0x96>
 8007974:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007978:	6822      	ldr	r2, [r4, #0]
 800797a:	3b00      	subs	r3, #0
 800797c:	bf18      	it	ne
 800797e:	2301      	movne	r3, #1
 8007980:	0692      	lsls	r2, r2, #26
 8007982:	d42b      	bmi.n	80079dc <_printf_common+0xb0>
 8007984:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007988:	4641      	mov	r1, r8
 800798a:	4638      	mov	r0, r7
 800798c:	47c8      	blx	r9
 800798e:	3001      	adds	r0, #1
 8007990:	d01e      	beq.n	80079d0 <_printf_common+0xa4>
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	6922      	ldr	r2, [r4, #16]
 8007996:	f003 0306 	and.w	r3, r3, #6
 800799a:	2b04      	cmp	r3, #4
 800799c:	bf02      	ittt	eq
 800799e:	68e5      	ldreq	r5, [r4, #12]
 80079a0:	6833      	ldreq	r3, [r6, #0]
 80079a2:	1aed      	subeq	r5, r5, r3
 80079a4:	68a3      	ldr	r3, [r4, #8]
 80079a6:	bf0c      	ite	eq
 80079a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079ac:	2500      	movne	r5, #0
 80079ae:	4293      	cmp	r3, r2
 80079b0:	bfc4      	itt	gt
 80079b2:	1a9b      	subgt	r3, r3, r2
 80079b4:	18ed      	addgt	r5, r5, r3
 80079b6:	2600      	movs	r6, #0
 80079b8:	341a      	adds	r4, #26
 80079ba:	42b5      	cmp	r5, r6
 80079bc:	d11a      	bne.n	80079f4 <_printf_common+0xc8>
 80079be:	2000      	movs	r0, #0
 80079c0:	e008      	b.n	80079d4 <_printf_common+0xa8>
 80079c2:	2301      	movs	r3, #1
 80079c4:	4652      	mov	r2, sl
 80079c6:	4641      	mov	r1, r8
 80079c8:	4638      	mov	r0, r7
 80079ca:	47c8      	blx	r9
 80079cc:	3001      	adds	r0, #1
 80079ce:	d103      	bne.n	80079d8 <_printf_common+0xac>
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295
 80079d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d8:	3501      	adds	r5, #1
 80079da:	e7c6      	b.n	800796a <_printf_common+0x3e>
 80079dc:	18e1      	adds	r1, r4, r3
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	2030      	movs	r0, #48	@ 0x30
 80079e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80079e6:	4422      	add	r2, r4
 80079e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80079ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80079f0:	3302      	adds	r3, #2
 80079f2:	e7c7      	b.n	8007984 <_printf_common+0x58>
 80079f4:	2301      	movs	r3, #1
 80079f6:	4622      	mov	r2, r4
 80079f8:	4641      	mov	r1, r8
 80079fa:	4638      	mov	r0, r7
 80079fc:	47c8      	blx	r9
 80079fe:	3001      	adds	r0, #1
 8007a00:	d0e6      	beq.n	80079d0 <_printf_common+0xa4>
 8007a02:	3601      	adds	r6, #1
 8007a04:	e7d9      	b.n	80079ba <_printf_common+0x8e>
	...

08007a08 <_printf_i>:
 8007a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a0c:	7e0f      	ldrb	r7, [r1, #24]
 8007a0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a10:	2f78      	cmp	r7, #120	@ 0x78
 8007a12:	4691      	mov	r9, r2
 8007a14:	4680      	mov	r8, r0
 8007a16:	460c      	mov	r4, r1
 8007a18:	469a      	mov	sl, r3
 8007a1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a1e:	d807      	bhi.n	8007a30 <_printf_i+0x28>
 8007a20:	2f62      	cmp	r7, #98	@ 0x62
 8007a22:	d80a      	bhi.n	8007a3a <_printf_i+0x32>
 8007a24:	2f00      	cmp	r7, #0
 8007a26:	f000 80d1 	beq.w	8007bcc <_printf_i+0x1c4>
 8007a2a:	2f58      	cmp	r7, #88	@ 0x58
 8007a2c:	f000 80b8 	beq.w	8007ba0 <_printf_i+0x198>
 8007a30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a38:	e03a      	b.n	8007ab0 <_printf_i+0xa8>
 8007a3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a3e:	2b15      	cmp	r3, #21
 8007a40:	d8f6      	bhi.n	8007a30 <_printf_i+0x28>
 8007a42:	a101      	add	r1, pc, #4	@ (adr r1, 8007a48 <_printf_i+0x40>)
 8007a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a48:	08007aa1 	.word	0x08007aa1
 8007a4c:	08007ab5 	.word	0x08007ab5
 8007a50:	08007a31 	.word	0x08007a31
 8007a54:	08007a31 	.word	0x08007a31
 8007a58:	08007a31 	.word	0x08007a31
 8007a5c:	08007a31 	.word	0x08007a31
 8007a60:	08007ab5 	.word	0x08007ab5
 8007a64:	08007a31 	.word	0x08007a31
 8007a68:	08007a31 	.word	0x08007a31
 8007a6c:	08007a31 	.word	0x08007a31
 8007a70:	08007a31 	.word	0x08007a31
 8007a74:	08007bb3 	.word	0x08007bb3
 8007a78:	08007adf 	.word	0x08007adf
 8007a7c:	08007b6d 	.word	0x08007b6d
 8007a80:	08007a31 	.word	0x08007a31
 8007a84:	08007a31 	.word	0x08007a31
 8007a88:	08007bd5 	.word	0x08007bd5
 8007a8c:	08007a31 	.word	0x08007a31
 8007a90:	08007adf 	.word	0x08007adf
 8007a94:	08007a31 	.word	0x08007a31
 8007a98:	08007a31 	.word	0x08007a31
 8007a9c:	08007b75 	.word	0x08007b75
 8007aa0:	6833      	ldr	r3, [r6, #0]
 8007aa2:	1d1a      	adds	r2, r3, #4
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6032      	str	r2, [r6, #0]
 8007aa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007aac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e09c      	b.n	8007bee <_printf_i+0x1e6>
 8007ab4:	6833      	ldr	r3, [r6, #0]
 8007ab6:	6820      	ldr	r0, [r4, #0]
 8007ab8:	1d19      	adds	r1, r3, #4
 8007aba:	6031      	str	r1, [r6, #0]
 8007abc:	0606      	lsls	r6, r0, #24
 8007abe:	d501      	bpl.n	8007ac4 <_printf_i+0xbc>
 8007ac0:	681d      	ldr	r5, [r3, #0]
 8007ac2:	e003      	b.n	8007acc <_printf_i+0xc4>
 8007ac4:	0645      	lsls	r5, r0, #25
 8007ac6:	d5fb      	bpl.n	8007ac0 <_printf_i+0xb8>
 8007ac8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007acc:	2d00      	cmp	r5, #0
 8007ace:	da03      	bge.n	8007ad8 <_printf_i+0xd0>
 8007ad0:	232d      	movs	r3, #45	@ 0x2d
 8007ad2:	426d      	negs	r5, r5
 8007ad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ad8:	4858      	ldr	r0, [pc, #352]	@ (8007c3c <_printf_i+0x234>)
 8007ada:	230a      	movs	r3, #10
 8007adc:	e011      	b.n	8007b02 <_printf_i+0xfa>
 8007ade:	6821      	ldr	r1, [r4, #0]
 8007ae0:	6833      	ldr	r3, [r6, #0]
 8007ae2:	0608      	lsls	r0, r1, #24
 8007ae4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ae8:	d402      	bmi.n	8007af0 <_printf_i+0xe8>
 8007aea:	0649      	lsls	r1, r1, #25
 8007aec:	bf48      	it	mi
 8007aee:	b2ad      	uxthmi	r5, r5
 8007af0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007af2:	4852      	ldr	r0, [pc, #328]	@ (8007c3c <_printf_i+0x234>)
 8007af4:	6033      	str	r3, [r6, #0]
 8007af6:	bf14      	ite	ne
 8007af8:	230a      	movne	r3, #10
 8007afa:	2308      	moveq	r3, #8
 8007afc:	2100      	movs	r1, #0
 8007afe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b02:	6866      	ldr	r6, [r4, #4]
 8007b04:	60a6      	str	r6, [r4, #8]
 8007b06:	2e00      	cmp	r6, #0
 8007b08:	db05      	blt.n	8007b16 <_printf_i+0x10e>
 8007b0a:	6821      	ldr	r1, [r4, #0]
 8007b0c:	432e      	orrs	r6, r5
 8007b0e:	f021 0104 	bic.w	r1, r1, #4
 8007b12:	6021      	str	r1, [r4, #0]
 8007b14:	d04b      	beq.n	8007bae <_printf_i+0x1a6>
 8007b16:	4616      	mov	r6, r2
 8007b18:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b1c:	fb03 5711 	mls	r7, r3, r1, r5
 8007b20:	5dc7      	ldrb	r7, [r0, r7]
 8007b22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b26:	462f      	mov	r7, r5
 8007b28:	42bb      	cmp	r3, r7
 8007b2a:	460d      	mov	r5, r1
 8007b2c:	d9f4      	bls.n	8007b18 <_printf_i+0x110>
 8007b2e:	2b08      	cmp	r3, #8
 8007b30:	d10b      	bne.n	8007b4a <_printf_i+0x142>
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	07df      	lsls	r7, r3, #31
 8007b36:	d508      	bpl.n	8007b4a <_printf_i+0x142>
 8007b38:	6923      	ldr	r3, [r4, #16]
 8007b3a:	6861      	ldr	r1, [r4, #4]
 8007b3c:	4299      	cmp	r1, r3
 8007b3e:	bfde      	ittt	le
 8007b40:	2330      	movle	r3, #48	@ 0x30
 8007b42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b4a:	1b92      	subs	r2, r2, r6
 8007b4c:	6122      	str	r2, [r4, #16]
 8007b4e:	f8cd a000 	str.w	sl, [sp]
 8007b52:	464b      	mov	r3, r9
 8007b54:	aa03      	add	r2, sp, #12
 8007b56:	4621      	mov	r1, r4
 8007b58:	4640      	mov	r0, r8
 8007b5a:	f7ff fee7 	bl	800792c <_printf_common>
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d14a      	bne.n	8007bf8 <_printf_i+0x1f0>
 8007b62:	f04f 30ff 	mov.w	r0, #4294967295
 8007b66:	b004      	add	sp, #16
 8007b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	f043 0320 	orr.w	r3, r3, #32
 8007b72:	6023      	str	r3, [r4, #0]
 8007b74:	4832      	ldr	r0, [pc, #200]	@ (8007c40 <_printf_i+0x238>)
 8007b76:	2778      	movs	r7, #120	@ 0x78
 8007b78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	6831      	ldr	r1, [r6, #0]
 8007b80:	061f      	lsls	r7, r3, #24
 8007b82:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b86:	d402      	bmi.n	8007b8e <_printf_i+0x186>
 8007b88:	065f      	lsls	r7, r3, #25
 8007b8a:	bf48      	it	mi
 8007b8c:	b2ad      	uxthmi	r5, r5
 8007b8e:	6031      	str	r1, [r6, #0]
 8007b90:	07d9      	lsls	r1, r3, #31
 8007b92:	bf44      	itt	mi
 8007b94:	f043 0320 	orrmi.w	r3, r3, #32
 8007b98:	6023      	strmi	r3, [r4, #0]
 8007b9a:	b11d      	cbz	r5, 8007ba4 <_printf_i+0x19c>
 8007b9c:	2310      	movs	r3, #16
 8007b9e:	e7ad      	b.n	8007afc <_printf_i+0xf4>
 8007ba0:	4826      	ldr	r0, [pc, #152]	@ (8007c3c <_printf_i+0x234>)
 8007ba2:	e7e9      	b.n	8007b78 <_printf_i+0x170>
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	f023 0320 	bic.w	r3, r3, #32
 8007baa:	6023      	str	r3, [r4, #0]
 8007bac:	e7f6      	b.n	8007b9c <_printf_i+0x194>
 8007bae:	4616      	mov	r6, r2
 8007bb0:	e7bd      	b.n	8007b2e <_printf_i+0x126>
 8007bb2:	6833      	ldr	r3, [r6, #0]
 8007bb4:	6825      	ldr	r5, [r4, #0]
 8007bb6:	6961      	ldr	r1, [r4, #20]
 8007bb8:	1d18      	adds	r0, r3, #4
 8007bba:	6030      	str	r0, [r6, #0]
 8007bbc:	062e      	lsls	r6, r5, #24
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	d501      	bpl.n	8007bc6 <_printf_i+0x1be>
 8007bc2:	6019      	str	r1, [r3, #0]
 8007bc4:	e002      	b.n	8007bcc <_printf_i+0x1c4>
 8007bc6:	0668      	lsls	r0, r5, #25
 8007bc8:	d5fb      	bpl.n	8007bc2 <_printf_i+0x1ba>
 8007bca:	8019      	strh	r1, [r3, #0]
 8007bcc:	2300      	movs	r3, #0
 8007bce:	6123      	str	r3, [r4, #16]
 8007bd0:	4616      	mov	r6, r2
 8007bd2:	e7bc      	b.n	8007b4e <_printf_i+0x146>
 8007bd4:	6833      	ldr	r3, [r6, #0]
 8007bd6:	1d1a      	adds	r2, r3, #4
 8007bd8:	6032      	str	r2, [r6, #0]
 8007bda:	681e      	ldr	r6, [r3, #0]
 8007bdc:	6862      	ldr	r2, [r4, #4]
 8007bde:	2100      	movs	r1, #0
 8007be0:	4630      	mov	r0, r6
 8007be2:	f7f8 fafd 	bl	80001e0 <memchr>
 8007be6:	b108      	cbz	r0, 8007bec <_printf_i+0x1e4>
 8007be8:	1b80      	subs	r0, r0, r6
 8007bea:	6060      	str	r0, [r4, #4]
 8007bec:	6863      	ldr	r3, [r4, #4]
 8007bee:	6123      	str	r3, [r4, #16]
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bf6:	e7aa      	b.n	8007b4e <_printf_i+0x146>
 8007bf8:	6923      	ldr	r3, [r4, #16]
 8007bfa:	4632      	mov	r2, r6
 8007bfc:	4649      	mov	r1, r9
 8007bfe:	4640      	mov	r0, r8
 8007c00:	47d0      	blx	sl
 8007c02:	3001      	adds	r0, #1
 8007c04:	d0ad      	beq.n	8007b62 <_printf_i+0x15a>
 8007c06:	6823      	ldr	r3, [r4, #0]
 8007c08:	079b      	lsls	r3, r3, #30
 8007c0a:	d413      	bmi.n	8007c34 <_printf_i+0x22c>
 8007c0c:	68e0      	ldr	r0, [r4, #12]
 8007c0e:	9b03      	ldr	r3, [sp, #12]
 8007c10:	4298      	cmp	r0, r3
 8007c12:	bfb8      	it	lt
 8007c14:	4618      	movlt	r0, r3
 8007c16:	e7a6      	b.n	8007b66 <_printf_i+0x15e>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	4632      	mov	r2, r6
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	4640      	mov	r0, r8
 8007c20:	47d0      	blx	sl
 8007c22:	3001      	adds	r0, #1
 8007c24:	d09d      	beq.n	8007b62 <_printf_i+0x15a>
 8007c26:	3501      	adds	r5, #1
 8007c28:	68e3      	ldr	r3, [r4, #12]
 8007c2a:	9903      	ldr	r1, [sp, #12]
 8007c2c:	1a5b      	subs	r3, r3, r1
 8007c2e:	42ab      	cmp	r3, r5
 8007c30:	dcf2      	bgt.n	8007c18 <_printf_i+0x210>
 8007c32:	e7eb      	b.n	8007c0c <_printf_i+0x204>
 8007c34:	2500      	movs	r5, #0
 8007c36:	f104 0619 	add.w	r6, r4, #25
 8007c3a:	e7f5      	b.n	8007c28 <_printf_i+0x220>
 8007c3c:	0800a9a0 	.word	0x0800a9a0
 8007c40:	0800a9b1 	.word	0x0800a9b1

08007c44 <std>:
 8007c44:	2300      	movs	r3, #0
 8007c46:	b510      	push	{r4, lr}
 8007c48:	4604      	mov	r4, r0
 8007c4a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c52:	6083      	str	r3, [r0, #8]
 8007c54:	8181      	strh	r1, [r0, #12]
 8007c56:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c58:	81c2      	strh	r2, [r0, #14]
 8007c5a:	6183      	str	r3, [r0, #24]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	2208      	movs	r2, #8
 8007c60:	305c      	adds	r0, #92	@ 0x5c
 8007c62:	f000 f916 	bl	8007e92 <memset>
 8007c66:	4b0d      	ldr	r3, [pc, #52]	@ (8007c9c <std+0x58>)
 8007c68:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ca0 <std+0x5c>)
 8007c6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ca4 <std+0x60>)
 8007c70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c72:	4b0d      	ldr	r3, [pc, #52]	@ (8007ca8 <std+0x64>)
 8007c74:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c76:	4b0d      	ldr	r3, [pc, #52]	@ (8007cac <std+0x68>)
 8007c78:	6224      	str	r4, [r4, #32]
 8007c7a:	429c      	cmp	r4, r3
 8007c7c:	d006      	beq.n	8007c8c <std+0x48>
 8007c7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c82:	4294      	cmp	r4, r2
 8007c84:	d002      	beq.n	8007c8c <std+0x48>
 8007c86:	33d0      	adds	r3, #208	@ 0xd0
 8007c88:	429c      	cmp	r4, r3
 8007c8a:	d105      	bne.n	8007c98 <std+0x54>
 8007c8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c94:	f000 b98c 	b.w	8007fb0 <__retarget_lock_init_recursive>
 8007c98:	bd10      	pop	{r4, pc}
 8007c9a:	bf00      	nop
 8007c9c:	08007e0d 	.word	0x08007e0d
 8007ca0:	08007e2f 	.word	0x08007e2f
 8007ca4:	08007e67 	.word	0x08007e67
 8007ca8:	08007e8b 	.word	0x08007e8b
 8007cac:	200004a4 	.word	0x200004a4

08007cb0 <stdio_exit_handler>:
 8007cb0:	4a02      	ldr	r2, [pc, #8]	@ (8007cbc <stdio_exit_handler+0xc>)
 8007cb2:	4903      	ldr	r1, [pc, #12]	@ (8007cc0 <stdio_exit_handler+0x10>)
 8007cb4:	4803      	ldr	r0, [pc, #12]	@ (8007cc4 <stdio_exit_handler+0x14>)
 8007cb6:	f000 b869 	b.w	8007d8c <_fwalk_sglue>
 8007cba:	bf00      	nop
 8007cbc:	20000020 	.word	0x20000020
 8007cc0:	0800a255 	.word	0x0800a255
 8007cc4:	2000019c 	.word	0x2000019c

08007cc8 <cleanup_stdio>:
 8007cc8:	6841      	ldr	r1, [r0, #4]
 8007cca:	4b0c      	ldr	r3, [pc, #48]	@ (8007cfc <cleanup_stdio+0x34>)
 8007ccc:	4299      	cmp	r1, r3
 8007cce:	b510      	push	{r4, lr}
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	d001      	beq.n	8007cd8 <cleanup_stdio+0x10>
 8007cd4:	f002 fabe 	bl	800a254 <_fflush_r>
 8007cd8:	68a1      	ldr	r1, [r4, #8]
 8007cda:	4b09      	ldr	r3, [pc, #36]	@ (8007d00 <cleanup_stdio+0x38>)
 8007cdc:	4299      	cmp	r1, r3
 8007cde:	d002      	beq.n	8007ce6 <cleanup_stdio+0x1e>
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f002 fab7 	bl	800a254 <_fflush_r>
 8007ce6:	68e1      	ldr	r1, [r4, #12]
 8007ce8:	4b06      	ldr	r3, [pc, #24]	@ (8007d04 <cleanup_stdio+0x3c>)
 8007cea:	4299      	cmp	r1, r3
 8007cec:	d004      	beq.n	8007cf8 <cleanup_stdio+0x30>
 8007cee:	4620      	mov	r0, r4
 8007cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cf4:	f002 baae 	b.w	800a254 <_fflush_r>
 8007cf8:	bd10      	pop	{r4, pc}
 8007cfa:	bf00      	nop
 8007cfc:	200004a4 	.word	0x200004a4
 8007d00:	2000050c 	.word	0x2000050c
 8007d04:	20000574 	.word	0x20000574

08007d08 <global_stdio_init.part.0>:
 8007d08:	b510      	push	{r4, lr}
 8007d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d38 <global_stdio_init.part.0+0x30>)
 8007d0c:	4c0b      	ldr	r4, [pc, #44]	@ (8007d3c <global_stdio_init.part.0+0x34>)
 8007d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8007d40 <global_stdio_init.part.0+0x38>)
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	4620      	mov	r0, r4
 8007d14:	2200      	movs	r2, #0
 8007d16:	2104      	movs	r1, #4
 8007d18:	f7ff ff94 	bl	8007c44 <std>
 8007d1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d20:	2201      	movs	r2, #1
 8007d22:	2109      	movs	r1, #9
 8007d24:	f7ff ff8e 	bl	8007c44 <std>
 8007d28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d32:	2112      	movs	r1, #18
 8007d34:	f7ff bf86 	b.w	8007c44 <std>
 8007d38:	200005dc 	.word	0x200005dc
 8007d3c:	200004a4 	.word	0x200004a4
 8007d40:	08007cb1 	.word	0x08007cb1

08007d44 <__sfp_lock_acquire>:
 8007d44:	4801      	ldr	r0, [pc, #4]	@ (8007d4c <__sfp_lock_acquire+0x8>)
 8007d46:	f000 b934 	b.w	8007fb2 <__retarget_lock_acquire_recursive>
 8007d4a:	bf00      	nop
 8007d4c:	200005e5 	.word	0x200005e5

08007d50 <__sfp_lock_release>:
 8007d50:	4801      	ldr	r0, [pc, #4]	@ (8007d58 <__sfp_lock_release+0x8>)
 8007d52:	f000 b92f 	b.w	8007fb4 <__retarget_lock_release_recursive>
 8007d56:	bf00      	nop
 8007d58:	200005e5 	.word	0x200005e5

08007d5c <__sinit>:
 8007d5c:	b510      	push	{r4, lr}
 8007d5e:	4604      	mov	r4, r0
 8007d60:	f7ff fff0 	bl	8007d44 <__sfp_lock_acquire>
 8007d64:	6a23      	ldr	r3, [r4, #32]
 8007d66:	b11b      	cbz	r3, 8007d70 <__sinit+0x14>
 8007d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d6c:	f7ff bff0 	b.w	8007d50 <__sfp_lock_release>
 8007d70:	4b04      	ldr	r3, [pc, #16]	@ (8007d84 <__sinit+0x28>)
 8007d72:	6223      	str	r3, [r4, #32]
 8007d74:	4b04      	ldr	r3, [pc, #16]	@ (8007d88 <__sinit+0x2c>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1f5      	bne.n	8007d68 <__sinit+0xc>
 8007d7c:	f7ff ffc4 	bl	8007d08 <global_stdio_init.part.0>
 8007d80:	e7f2      	b.n	8007d68 <__sinit+0xc>
 8007d82:	bf00      	nop
 8007d84:	08007cc9 	.word	0x08007cc9
 8007d88:	200005dc 	.word	0x200005dc

08007d8c <_fwalk_sglue>:
 8007d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d90:	4607      	mov	r7, r0
 8007d92:	4688      	mov	r8, r1
 8007d94:	4614      	mov	r4, r2
 8007d96:	2600      	movs	r6, #0
 8007d98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d9c:	f1b9 0901 	subs.w	r9, r9, #1
 8007da0:	d505      	bpl.n	8007dae <_fwalk_sglue+0x22>
 8007da2:	6824      	ldr	r4, [r4, #0]
 8007da4:	2c00      	cmp	r4, #0
 8007da6:	d1f7      	bne.n	8007d98 <_fwalk_sglue+0xc>
 8007da8:	4630      	mov	r0, r6
 8007daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dae:	89ab      	ldrh	r3, [r5, #12]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d907      	bls.n	8007dc4 <_fwalk_sglue+0x38>
 8007db4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007db8:	3301      	adds	r3, #1
 8007dba:	d003      	beq.n	8007dc4 <_fwalk_sglue+0x38>
 8007dbc:	4629      	mov	r1, r5
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	47c0      	blx	r8
 8007dc2:	4306      	orrs	r6, r0
 8007dc4:	3568      	adds	r5, #104	@ 0x68
 8007dc6:	e7e9      	b.n	8007d9c <_fwalk_sglue+0x10>

08007dc8 <siprintf>:
 8007dc8:	b40e      	push	{r1, r2, r3}
 8007dca:	b510      	push	{r4, lr}
 8007dcc:	b09d      	sub	sp, #116	@ 0x74
 8007dce:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007dd0:	9002      	str	r0, [sp, #8]
 8007dd2:	9006      	str	r0, [sp, #24]
 8007dd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007dd8:	480a      	ldr	r0, [pc, #40]	@ (8007e04 <siprintf+0x3c>)
 8007dda:	9107      	str	r1, [sp, #28]
 8007ddc:	9104      	str	r1, [sp, #16]
 8007dde:	490a      	ldr	r1, [pc, #40]	@ (8007e08 <siprintf+0x40>)
 8007de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007de4:	9105      	str	r1, [sp, #20]
 8007de6:	2400      	movs	r4, #0
 8007de8:	a902      	add	r1, sp, #8
 8007dea:	6800      	ldr	r0, [r0, #0]
 8007dec:	9301      	str	r3, [sp, #4]
 8007dee:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007df0:	f002 f8b0 	bl	8009f54 <_svfiprintf_r>
 8007df4:	9b02      	ldr	r3, [sp, #8]
 8007df6:	701c      	strb	r4, [r3, #0]
 8007df8:	b01d      	add	sp, #116	@ 0x74
 8007dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dfe:	b003      	add	sp, #12
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	20000198 	.word	0x20000198
 8007e08:	ffff0208 	.word	0xffff0208

08007e0c <__sread>:
 8007e0c:	b510      	push	{r4, lr}
 8007e0e:	460c      	mov	r4, r1
 8007e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e14:	f000 f87e 	bl	8007f14 <_read_r>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	bfab      	itete	ge
 8007e1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e1e:	89a3      	ldrhlt	r3, [r4, #12]
 8007e20:	181b      	addge	r3, r3, r0
 8007e22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e26:	bfac      	ite	ge
 8007e28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e2a:	81a3      	strhlt	r3, [r4, #12]
 8007e2c:	bd10      	pop	{r4, pc}

08007e2e <__swrite>:
 8007e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e32:	461f      	mov	r7, r3
 8007e34:	898b      	ldrh	r3, [r1, #12]
 8007e36:	05db      	lsls	r3, r3, #23
 8007e38:	4605      	mov	r5, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	4616      	mov	r6, r2
 8007e3e:	d505      	bpl.n	8007e4c <__swrite+0x1e>
 8007e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e44:	2302      	movs	r3, #2
 8007e46:	2200      	movs	r2, #0
 8007e48:	f000 f852 	bl	8007ef0 <_lseek_r>
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e56:	81a3      	strh	r3, [r4, #12]
 8007e58:	4632      	mov	r2, r6
 8007e5a:	463b      	mov	r3, r7
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e62:	f000 b869 	b.w	8007f38 <_write_r>

08007e66 <__sseek>:
 8007e66:	b510      	push	{r4, lr}
 8007e68:	460c      	mov	r4, r1
 8007e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e6e:	f000 f83f 	bl	8007ef0 <_lseek_r>
 8007e72:	1c43      	adds	r3, r0, #1
 8007e74:	89a3      	ldrh	r3, [r4, #12]
 8007e76:	bf15      	itete	ne
 8007e78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e82:	81a3      	strheq	r3, [r4, #12]
 8007e84:	bf18      	it	ne
 8007e86:	81a3      	strhne	r3, [r4, #12]
 8007e88:	bd10      	pop	{r4, pc}

08007e8a <__sclose>:
 8007e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e8e:	f000 b81f 	b.w	8007ed0 <_close_r>

08007e92 <memset>:
 8007e92:	4402      	add	r2, r0
 8007e94:	4603      	mov	r3, r0
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d100      	bne.n	8007e9c <memset+0xa>
 8007e9a:	4770      	bx	lr
 8007e9c:	f803 1b01 	strb.w	r1, [r3], #1
 8007ea0:	e7f9      	b.n	8007e96 <memset+0x4>

08007ea2 <strncmp>:
 8007ea2:	b510      	push	{r4, lr}
 8007ea4:	b16a      	cbz	r2, 8007ec2 <strncmp+0x20>
 8007ea6:	3901      	subs	r1, #1
 8007ea8:	1884      	adds	r4, r0, r2
 8007eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d103      	bne.n	8007ebe <strncmp+0x1c>
 8007eb6:	42a0      	cmp	r0, r4
 8007eb8:	d001      	beq.n	8007ebe <strncmp+0x1c>
 8007eba:	2a00      	cmp	r2, #0
 8007ebc:	d1f5      	bne.n	8007eaa <strncmp+0x8>
 8007ebe:	1ad0      	subs	r0, r2, r3
 8007ec0:	bd10      	pop	{r4, pc}
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	e7fc      	b.n	8007ec0 <strncmp+0x1e>
	...

08007ec8 <_localeconv_r>:
 8007ec8:	4800      	ldr	r0, [pc, #0]	@ (8007ecc <_localeconv_r+0x4>)
 8007eca:	4770      	bx	lr
 8007ecc:	2000011c 	.word	0x2000011c

08007ed0 <_close_r>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	4d06      	ldr	r5, [pc, #24]	@ (8007eec <_close_r+0x1c>)
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	4608      	mov	r0, r1
 8007eda:	602b      	str	r3, [r5, #0]
 8007edc:	f7fa f976 	bl	80021cc <_close>
 8007ee0:	1c43      	adds	r3, r0, #1
 8007ee2:	d102      	bne.n	8007eea <_close_r+0x1a>
 8007ee4:	682b      	ldr	r3, [r5, #0]
 8007ee6:	b103      	cbz	r3, 8007eea <_close_r+0x1a>
 8007ee8:	6023      	str	r3, [r4, #0]
 8007eea:	bd38      	pop	{r3, r4, r5, pc}
 8007eec:	200005e0 	.word	0x200005e0

08007ef0 <_lseek_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	4d07      	ldr	r5, [pc, #28]	@ (8007f10 <_lseek_r+0x20>)
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	4608      	mov	r0, r1
 8007ef8:	4611      	mov	r1, r2
 8007efa:	2200      	movs	r2, #0
 8007efc:	602a      	str	r2, [r5, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	f7fa f98b 	bl	800221a <_lseek>
 8007f04:	1c43      	adds	r3, r0, #1
 8007f06:	d102      	bne.n	8007f0e <_lseek_r+0x1e>
 8007f08:	682b      	ldr	r3, [r5, #0]
 8007f0a:	b103      	cbz	r3, 8007f0e <_lseek_r+0x1e>
 8007f0c:	6023      	str	r3, [r4, #0]
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
 8007f10:	200005e0 	.word	0x200005e0

08007f14 <_read_r>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4d07      	ldr	r5, [pc, #28]	@ (8007f34 <_read_r+0x20>)
 8007f18:	4604      	mov	r4, r0
 8007f1a:	4608      	mov	r0, r1
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	2200      	movs	r2, #0
 8007f20:	602a      	str	r2, [r5, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	f7fa f919 	bl	800215a <_read>
 8007f28:	1c43      	adds	r3, r0, #1
 8007f2a:	d102      	bne.n	8007f32 <_read_r+0x1e>
 8007f2c:	682b      	ldr	r3, [r5, #0]
 8007f2e:	b103      	cbz	r3, 8007f32 <_read_r+0x1e>
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	bd38      	pop	{r3, r4, r5, pc}
 8007f34:	200005e0 	.word	0x200005e0

08007f38 <_write_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4d07      	ldr	r5, [pc, #28]	@ (8007f58 <_write_r+0x20>)
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	4608      	mov	r0, r1
 8007f40:	4611      	mov	r1, r2
 8007f42:	2200      	movs	r2, #0
 8007f44:	602a      	str	r2, [r5, #0]
 8007f46:	461a      	mov	r2, r3
 8007f48:	f7fa f924 	bl	8002194 <_write>
 8007f4c:	1c43      	adds	r3, r0, #1
 8007f4e:	d102      	bne.n	8007f56 <_write_r+0x1e>
 8007f50:	682b      	ldr	r3, [r5, #0]
 8007f52:	b103      	cbz	r3, 8007f56 <_write_r+0x1e>
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	bd38      	pop	{r3, r4, r5, pc}
 8007f58:	200005e0 	.word	0x200005e0

08007f5c <__errno>:
 8007f5c:	4b01      	ldr	r3, [pc, #4]	@ (8007f64 <__errno+0x8>)
 8007f5e:	6818      	ldr	r0, [r3, #0]
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	20000198 	.word	0x20000198

08007f68 <__libc_init_array>:
 8007f68:	b570      	push	{r4, r5, r6, lr}
 8007f6a:	4d0d      	ldr	r5, [pc, #52]	@ (8007fa0 <__libc_init_array+0x38>)
 8007f6c:	4c0d      	ldr	r4, [pc, #52]	@ (8007fa4 <__libc_init_array+0x3c>)
 8007f6e:	1b64      	subs	r4, r4, r5
 8007f70:	10a4      	asrs	r4, r4, #2
 8007f72:	2600      	movs	r6, #0
 8007f74:	42a6      	cmp	r6, r4
 8007f76:	d109      	bne.n	8007f8c <__libc_init_array+0x24>
 8007f78:	4d0b      	ldr	r5, [pc, #44]	@ (8007fa8 <__libc_init_array+0x40>)
 8007f7a:	4c0c      	ldr	r4, [pc, #48]	@ (8007fac <__libc_init_array+0x44>)
 8007f7c:	f002 fcda 	bl	800a934 <_init>
 8007f80:	1b64      	subs	r4, r4, r5
 8007f82:	10a4      	asrs	r4, r4, #2
 8007f84:	2600      	movs	r6, #0
 8007f86:	42a6      	cmp	r6, r4
 8007f88:	d105      	bne.n	8007f96 <__libc_init_array+0x2e>
 8007f8a:	bd70      	pop	{r4, r5, r6, pc}
 8007f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f90:	4798      	blx	r3
 8007f92:	3601      	adds	r6, #1
 8007f94:	e7ee      	b.n	8007f74 <__libc_init_array+0xc>
 8007f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f9a:	4798      	blx	r3
 8007f9c:	3601      	adds	r6, #1
 8007f9e:	e7f2      	b.n	8007f86 <__libc_init_array+0x1e>
 8007fa0:	0800adbc 	.word	0x0800adbc
 8007fa4:	0800adbc 	.word	0x0800adbc
 8007fa8:	0800adbc 	.word	0x0800adbc
 8007fac:	0800adc0 	.word	0x0800adc0

08007fb0 <__retarget_lock_init_recursive>:
 8007fb0:	4770      	bx	lr

08007fb2 <__retarget_lock_acquire_recursive>:
 8007fb2:	4770      	bx	lr

08007fb4 <__retarget_lock_release_recursive>:
 8007fb4:	4770      	bx	lr

08007fb6 <memcpy>:
 8007fb6:	440a      	add	r2, r1
 8007fb8:	4291      	cmp	r1, r2
 8007fba:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fbe:	d100      	bne.n	8007fc2 <memcpy+0xc>
 8007fc0:	4770      	bx	lr
 8007fc2:	b510      	push	{r4, lr}
 8007fc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fcc:	4291      	cmp	r1, r2
 8007fce:	d1f9      	bne.n	8007fc4 <memcpy+0xe>
 8007fd0:	bd10      	pop	{r4, pc}
 8007fd2:	0000      	movs	r0, r0
 8007fd4:	0000      	movs	r0, r0
	...

08007fd8 <nan>:
 8007fd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007fe0 <nan+0x8>
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	00000000 	.word	0x00000000
 8007fe4:	7ff80000 	.word	0x7ff80000

08007fe8 <quorem>:
 8007fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fec:	6903      	ldr	r3, [r0, #16]
 8007fee:	690c      	ldr	r4, [r1, #16]
 8007ff0:	42a3      	cmp	r3, r4
 8007ff2:	4607      	mov	r7, r0
 8007ff4:	db7e      	blt.n	80080f4 <quorem+0x10c>
 8007ff6:	3c01      	subs	r4, #1
 8007ff8:	f101 0814 	add.w	r8, r1, #20
 8007ffc:	00a3      	lsls	r3, r4, #2
 8007ffe:	f100 0514 	add.w	r5, r0, #20
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008008:	9301      	str	r3, [sp, #4]
 800800a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800800e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008012:	3301      	adds	r3, #1
 8008014:	429a      	cmp	r2, r3
 8008016:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800801a:	fbb2 f6f3 	udiv	r6, r2, r3
 800801e:	d32e      	bcc.n	800807e <quorem+0x96>
 8008020:	f04f 0a00 	mov.w	sl, #0
 8008024:	46c4      	mov	ip, r8
 8008026:	46ae      	mov	lr, r5
 8008028:	46d3      	mov	fp, sl
 800802a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800802e:	b298      	uxth	r0, r3
 8008030:	fb06 a000 	mla	r0, r6, r0, sl
 8008034:	0c02      	lsrs	r2, r0, #16
 8008036:	0c1b      	lsrs	r3, r3, #16
 8008038:	fb06 2303 	mla	r3, r6, r3, r2
 800803c:	f8de 2000 	ldr.w	r2, [lr]
 8008040:	b280      	uxth	r0, r0
 8008042:	b292      	uxth	r2, r2
 8008044:	1a12      	subs	r2, r2, r0
 8008046:	445a      	add	r2, fp
 8008048:	f8de 0000 	ldr.w	r0, [lr]
 800804c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008050:	b29b      	uxth	r3, r3
 8008052:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008056:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800805a:	b292      	uxth	r2, r2
 800805c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008060:	45e1      	cmp	r9, ip
 8008062:	f84e 2b04 	str.w	r2, [lr], #4
 8008066:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800806a:	d2de      	bcs.n	800802a <quorem+0x42>
 800806c:	9b00      	ldr	r3, [sp, #0]
 800806e:	58eb      	ldr	r3, [r5, r3]
 8008070:	b92b      	cbnz	r3, 800807e <quorem+0x96>
 8008072:	9b01      	ldr	r3, [sp, #4]
 8008074:	3b04      	subs	r3, #4
 8008076:	429d      	cmp	r5, r3
 8008078:	461a      	mov	r2, r3
 800807a:	d32f      	bcc.n	80080dc <quorem+0xf4>
 800807c:	613c      	str	r4, [r7, #16]
 800807e:	4638      	mov	r0, r7
 8008080:	f001 fd12 	bl	8009aa8 <__mcmp>
 8008084:	2800      	cmp	r0, #0
 8008086:	db25      	blt.n	80080d4 <quorem+0xec>
 8008088:	4629      	mov	r1, r5
 800808a:	2000      	movs	r0, #0
 800808c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008090:	f8d1 c000 	ldr.w	ip, [r1]
 8008094:	fa1f fe82 	uxth.w	lr, r2
 8008098:	fa1f f38c 	uxth.w	r3, ip
 800809c:	eba3 030e 	sub.w	r3, r3, lr
 80080a0:	4403      	add	r3, r0
 80080a2:	0c12      	lsrs	r2, r2, #16
 80080a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80080a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080b2:	45c1      	cmp	r9, r8
 80080b4:	f841 3b04 	str.w	r3, [r1], #4
 80080b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80080bc:	d2e6      	bcs.n	800808c <quorem+0xa4>
 80080be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080c6:	b922      	cbnz	r2, 80080d2 <quorem+0xea>
 80080c8:	3b04      	subs	r3, #4
 80080ca:	429d      	cmp	r5, r3
 80080cc:	461a      	mov	r2, r3
 80080ce:	d30b      	bcc.n	80080e8 <quorem+0x100>
 80080d0:	613c      	str	r4, [r7, #16]
 80080d2:	3601      	adds	r6, #1
 80080d4:	4630      	mov	r0, r6
 80080d6:	b003      	add	sp, #12
 80080d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080dc:	6812      	ldr	r2, [r2, #0]
 80080de:	3b04      	subs	r3, #4
 80080e0:	2a00      	cmp	r2, #0
 80080e2:	d1cb      	bne.n	800807c <quorem+0x94>
 80080e4:	3c01      	subs	r4, #1
 80080e6:	e7c6      	b.n	8008076 <quorem+0x8e>
 80080e8:	6812      	ldr	r2, [r2, #0]
 80080ea:	3b04      	subs	r3, #4
 80080ec:	2a00      	cmp	r2, #0
 80080ee:	d1ef      	bne.n	80080d0 <quorem+0xe8>
 80080f0:	3c01      	subs	r4, #1
 80080f2:	e7ea      	b.n	80080ca <quorem+0xe2>
 80080f4:	2000      	movs	r0, #0
 80080f6:	e7ee      	b.n	80080d6 <quorem+0xee>

080080f8 <_dtoa_r>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	69c7      	ldr	r7, [r0, #28]
 80080fe:	b097      	sub	sp, #92	@ 0x5c
 8008100:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008104:	ec55 4b10 	vmov	r4, r5, d0
 8008108:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800810a:	9107      	str	r1, [sp, #28]
 800810c:	4681      	mov	r9, r0
 800810e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008110:	9311      	str	r3, [sp, #68]	@ 0x44
 8008112:	b97f      	cbnz	r7, 8008134 <_dtoa_r+0x3c>
 8008114:	2010      	movs	r0, #16
 8008116:	f001 f943 	bl	80093a0 <malloc>
 800811a:	4602      	mov	r2, r0
 800811c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008120:	b920      	cbnz	r0, 800812c <_dtoa_r+0x34>
 8008122:	4ba9      	ldr	r3, [pc, #676]	@ (80083c8 <_dtoa_r+0x2d0>)
 8008124:	21ef      	movs	r1, #239	@ 0xef
 8008126:	48a9      	ldr	r0, [pc, #676]	@ (80083cc <_dtoa_r+0x2d4>)
 8008128:	f002 f8e6 	bl	800a2f8 <__assert_func>
 800812c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008130:	6007      	str	r7, [r0, #0]
 8008132:	60c7      	str	r7, [r0, #12]
 8008134:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008138:	6819      	ldr	r1, [r3, #0]
 800813a:	b159      	cbz	r1, 8008154 <_dtoa_r+0x5c>
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	604a      	str	r2, [r1, #4]
 8008140:	2301      	movs	r3, #1
 8008142:	4093      	lsls	r3, r2
 8008144:	608b      	str	r3, [r1, #8]
 8008146:	4648      	mov	r0, r9
 8008148:	f001 fa32 	bl	80095b0 <_Bfree>
 800814c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008150:	2200      	movs	r2, #0
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	1e2b      	subs	r3, r5, #0
 8008156:	bfb9      	ittee	lt
 8008158:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800815c:	9305      	strlt	r3, [sp, #20]
 800815e:	2300      	movge	r3, #0
 8008160:	6033      	strge	r3, [r6, #0]
 8008162:	9f05      	ldr	r7, [sp, #20]
 8008164:	4b9a      	ldr	r3, [pc, #616]	@ (80083d0 <_dtoa_r+0x2d8>)
 8008166:	bfbc      	itt	lt
 8008168:	2201      	movlt	r2, #1
 800816a:	6032      	strlt	r2, [r6, #0]
 800816c:	43bb      	bics	r3, r7
 800816e:	d112      	bne.n	8008196 <_dtoa_r+0x9e>
 8008170:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008172:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008176:	6013      	str	r3, [r2, #0]
 8008178:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800817c:	4323      	orrs	r3, r4
 800817e:	f000 855a 	beq.w	8008c36 <_dtoa_r+0xb3e>
 8008182:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008184:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80083e4 <_dtoa_r+0x2ec>
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 855c 	beq.w	8008c46 <_dtoa_r+0xb4e>
 800818e:	f10a 0303 	add.w	r3, sl, #3
 8008192:	f000 bd56 	b.w	8008c42 <_dtoa_r+0xb4a>
 8008196:	ed9d 7b04 	vldr	d7, [sp, #16]
 800819a:	2200      	movs	r2, #0
 800819c:	ec51 0b17 	vmov	r0, r1, d7
 80081a0:	2300      	movs	r3, #0
 80081a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80081a6:	f7f8 fc97 	bl	8000ad8 <__aeabi_dcmpeq>
 80081aa:	4680      	mov	r8, r0
 80081ac:	b158      	cbz	r0, 80081c6 <_dtoa_r+0xce>
 80081ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80081b0:	2301      	movs	r3, #1
 80081b2:	6013      	str	r3, [r2, #0]
 80081b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80081b6:	b113      	cbz	r3, 80081be <_dtoa_r+0xc6>
 80081b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80081ba:	4b86      	ldr	r3, [pc, #536]	@ (80083d4 <_dtoa_r+0x2dc>)
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80083e8 <_dtoa_r+0x2f0>
 80081c2:	f000 bd40 	b.w	8008c46 <_dtoa_r+0xb4e>
 80081c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80081ca:	aa14      	add	r2, sp, #80	@ 0x50
 80081cc:	a915      	add	r1, sp, #84	@ 0x54
 80081ce:	4648      	mov	r0, r9
 80081d0:	f001 fd8a 	bl	8009ce8 <__d2b>
 80081d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80081d8:	9002      	str	r0, [sp, #8]
 80081da:	2e00      	cmp	r6, #0
 80081dc:	d078      	beq.n	80082d0 <_dtoa_r+0x1d8>
 80081de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80081e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80081ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80081f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80081f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80081f8:	4619      	mov	r1, r3
 80081fa:	2200      	movs	r2, #0
 80081fc:	4b76      	ldr	r3, [pc, #472]	@ (80083d8 <_dtoa_r+0x2e0>)
 80081fe:	f7f8 f84b 	bl	8000298 <__aeabi_dsub>
 8008202:	a36b      	add	r3, pc, #428	@ (adr r3, 80083b0 <_dtoa_r+0x2b8>)
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f7f8 f9fe 	bl	8000608 <__aeabi_dmul>
 800820c:	a36a      	add	r3, pc, #424	@ (adr r3, 80083b8 <_dtoa_r+0x2c0>)
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	f7f8 f843 	bl	800029c <__adddf3>
 8008216:	4604      	mov	r4, r0
 8008218:	4630      	mov	r0, r6
 800821a:	460d      	mov	r5, r1
 800821c:	f7f8 f98a 	bl	8000534 <__aeabi_i2d>
 8008220:	a367      	add	r3, pc, #412	@ (adr r3, 80083c0 <_dtoa_r+0x2c8>)
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	f7f8 f9ef 	bl	8000608 <__aeabi_dmul>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4620      	mov	r0, r4
 8008230:	4629      	mov	r1, r5
 8008232:	f7f8 f833 	bl	800029c <__adddf3>
 8008236:	4604      	mov	r4, r0
 8008238:	460d      	mov	r5, r1
 800823a:	f7f8 fc95 	bl	8000b68 <__aeabi_d2iz>
 800823e:	2200      	movs	r2, #0
 8008240:	4607      	mov	r7, r0
 8008242:	2300      	movs	r3, #0
 8008244:	4620      	mov	r0, r4
 8008246:	4629      	mov	r1, r5
 8008248:	f7f8 fc50 	bl	8000aec <__aeabi_dcmplt>
 800824c:	b140      	cbz	r0, 8008260 <_dtoa_r+0x168>
 800824e:	4638      	mov	r0, r7
 8008250:	f7f8 f970 	bl	8000534 <__aeabi_i2d>
 8008254:	4622      	mov	r2, r4
 8008256:	462b      	mov	r3, r5
 8008258:	f7f8 fc3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800825c:	b900      	cbnz	r0, 8008260 <_dtoa_r+0x168>
 800825e:	3f01      	subs	r7, #1
 8008260:	2f16      	cmp	r7, #22
 8008262:	d852      	bhi.n	800830a <_dtoa_r+0x212>
 8008264:	4b5d      	ldr	r3, [pc, #372]	@ (80083dc <_dtoa_r+0x2e4>)
 8008266:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008272:	f7f8 fc3b 	bl	8000aec <__aeabi_dcmplt>
 8008276:	2800      	cmp	r0, #0
 8008278:	d049      	beq.n	800830e <_dtoa_r+0x216>
 800827a:	3f01      	subs	r7, #1
 800827c:	2300      	movs	r3, #0
 800827e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008280:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008282:	1b9b      	subs	r3, r3, r6
 8008284:	1e5a      	subs	r2, r3, #1
 8008286:	bf45      	ittet	mi
 8008288:	f1c3 0301 	rsbmi	r3, r3, #1
 800828c:	9300      	strmi	r3, [sp, #0]
 800828e:	2300      	movpl	r3, #0
 8008290:	2300      	movmi	r3, #0
 8008292:	9206      	str	r2, [sp, #24]
 8008294:	bf54      	ite	pl
 8008296:	9300      	strpl	r3, [sp, #0]
 8008298:	9306      	strmi	r3, [sp, #24]
 800829a:	2f00      	cmp	r7, #0
 800829c:	db39      	blt.n	8008312 <_dtoa_r+0x21a>
 800829e:	9b06      	ldr	r3, [sp, #24]
 80082a0:	970d      	str	r7, [sp, #52]	@ 0x34
 80082a2:	443b      	add	r3, r7
 80082a4:	9306      	str	r3, [sp, #24]
 80082a6:	2300      	movs	r3, #0
 80082a8:	9308      	str	r3, [sp, #32]
 80082aa:	9b07      	ldr	r3, [sp, #28]
 80082ac:	2b09      	cmp	r3, #9
 80082ae:	d863      	bhi.n	8008378 <_dtoa_r+0x280>
 80082b0:	2b05      	cmp	r3, #5
 80082b2:	bfc4      	itt	gt
 80082b4:	3b04      	subgt	r3, #4
 80082b6:	9307      	strgt	r3, [sp, #28]
 80082b8:	9b07      	ldr	r3, [sp, #28]
 80082ba:	f1a3 0302 	sub.w	r3, r3, #2
 80082be:	bfcc      	ite	gt
 80082c0:	2400      	movgt	r4, #0
 80082c2:	2401      	movle	r4, #1
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	d863      	bhi.n	8008390 <_dtoa_r+0x298>
 80082c8:	e8df f003 	tbb	[pc, r3]
 80082cc:	2b375452 	.word	0x2b375452
 80082d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80082d4:	441e      	add	r6, r3
 80082d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80082da:	2b20      	cmp	r3, #32
 80082dc:	bfc1      	itttt	gt
 80082de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80082e2:	409f      	lslgt	r7, r3
 80082e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80082e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80082ec:	bfd6      	itet	le
 80082ee:	f1c3 0320 	rsble	r3, r3, #32
 80082f2:	ea47 0003 	orrgt.w	r0, r7, r3
 80082f6:	fa04 f003 	lslle.w	r0, r4, r3
 80082fa:	f7f8 f90b 	bl	8000514 <__aeabi_ui2d>
 80082fe:	2201      	movs	r2, #1
 8008300:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008304:	3e01      	subs	r6, #1
 8008306:	9212      	str	r2, [sp, #72]	@ 0x48
 8008308:	e776      	b.n	80081f8 <_dtoa_r+0x100>
 800830a:	2301      	movs	r3, #1
 800830c:	e7b7      	b.n	800827e <_dtoa_r+0x186>
 800830e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008310:	e7b6      	b.n	8008280 <_dtoa_r+0x188>
 8008312:	9b00      	ldr	r3, [sp, #0]
 8008314:	1bdb      	subs	r3, r3, r7
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	427b      	negs	r3, r7
 800831a:	9308      	str	r3, [sp, #32]
 800831c:	2300      	movs	r3, #0
 800831e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008320:	e7c3      	b.n	80082aa <_dtoa_r+0x1b2>
 8008322:	2301      	movs	r3, #1
 8008324:	9309      	str	r3, [sp, #36]	@ 0x24
 8008326:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008328:	eb07 0b03 	add.w	fp, r7, r3
 800832c:	f10b 0301 	add.w	r3, fp, #1
 8008330:	2b01      	cmp	r3, #1
 8008332:	9303      	str	r3, [sp, #12]
 8008334:	bfb8      	it	lt
 8008336:	2301      	movlt	r3, #1
 8008338:	e006      	b.n	8008348 <_dtoa_r+0x250>
 800833a:	2301      	movs	r3, #1
 800833c:	9309      	str	r3, [sp, #36]	@ 0x24
 800833e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008340:	2b00      	cmp	r3, #0
 8008342:	dd28      	ble.n	8008396 <_dtoa_r+0x29e>
 8008344:	469b      	mov	fp, r3
 8008346:	9303      	str	r3, [sp, #12]
 8008348:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800834c:	2100      	movs	r1, #0
 800834e:	2204      	movs	r2, #4
 8008350:	f102 0514 	add.w	r5, r2, #20
 8008354:	429d      	cmp	r5, r3
 8008356:	d926      	bls.n	80083a6 <_dtoa_r+0x2ae>
 8008358:	6041      	str	r1, [r0, #4]
 800835a:	4648      	mov	r0, r9
 800835c:	f001 f8e8 	bl	8009530 <_Balloc>
 8008360:	4682      	mov	sl, r0
 8008362:	2800      	cmp	r0, #0
 8008364:	d142      	bne.n	80083ec <_dtoa_r+0x2f4>
 8008366:	4b1e      	ldr	r3, [pc, #120]	@ (80083e0 <_dtoa_r+0x2e8>)
 8008368:	4602      	mov	r2, r0
 800836a:	f240 11af 	movw	r1, #431	@ 0x1af
 800836e:	e6da      	b.n	8008126 <_dtoa_r+0x2e>
 8008370:	2300      	movs	r3, #0
 8008372:	e7e3      	b.n	800833c <_dtoa_r+0x244>
 8008374:	2300      	movs	r3, #0
 8008376:	e7d5      	b.n	8008324 <_dtoa_r+0x22c>
 8008378:	2401      	movs	r4, #1
 800837a:	2300      	movs	r3, #0
 800837c:	9307      	str	r3, [sp, #28]
 800837e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008380:	f04f 3bff 	mov.w	fp, #4294967295
 8008384:	2200      	movs	r2, #0
 8008386:	f8cd b00c 	str.w	fp, [sp, #12]
 800838a:	2312      	movs	r3, #18
 800838c:	920c      	str	r2, [sp, #48]	@ 0x30
 800838e:	e7db      	b.n	8008348 <_dtoa_r+0x250>
 8008390:	2301      	movs	r3, #1
 8008392:	9309      	str	r3, [sp, #36]	@ 0x24
 8008394:	e7f4      	b.n	8008380 <_dtoa_r+0x288>
 8008396:	f04f 0b01 	mov.w	fp, #1
 800839a:	f8cd b00c 	str.w	fp, [sp, #12]
 800839e:	465b      	mov	r3, fp
 80083a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80083a4:	e7d0      	b.n	8008348 <_dtoa_r+0x250>
 80083a6:	3101      	adds	r1, #1
 80083a8:	0052      	lsls	r2, r2, #1
 80083aa:	e7d1      	b.n	8008350 <_dtoa_r+0x258>
 80083ac:	f3af 8000 	nop.w
 80083b0:	636f4361 	.word	0x636f4361
 80083b4:	3fd287a7 	.word	0x3fd287a7
 80083b8:	8b60c8b3 	.word	0x8b60c8b3
 80083bc:	3fc68a28 	.word	0x3fc68a28
 80083c0:	509f79fb 	.word	0x509f79fb
 80083c4:	3fd34413 	.word	0x3fd34413
 80083c8:	0800a9d7 	.word	0x0800a9d7
 80083cc:	0800a9ee 	.word	0x0800a9ee
 80083d0:	7ff00000 	.word	0x7ff00000
 80083d4:	0800a99f 	.word	0x0800a99f
 80083d8:	3ff80000 	.word	0x3ff80000
 80083dc:	0800abe8 	.word	0x0800abe8
 80083e0:	0800aa46 	.word	0x0800aa46
 80083e4:	0800a9d3 	.word	0x0800a9d3
 80083e8:	0800a99e 	.word	0x0800a99e
 80083ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80083f0:	6018      	str	r0, [r3, #0]
 80083f2:	9b03      	ldr	r3, [sp, #12]
 80083f4:	2b0e      	cmp	r3, #14
 80083f6:	f200 80a1 	bhi.w	800853c <_dtoa_r+0x444>
 80083fa:	2c00      	cmp	r4, #0
 80083fc:	f000 809e 	beq.w	800853c <_dtoa_r+0x444>
 8008400:	2f00      	cmp	r7, #0
 8008402:	dd33      	ble.n	800846c <_dtoa_r+0x374>
 8008404:	4b9c      	ldr	r3, [pc, #624]	@ (8008678 <_dtoa_r+0x580>)
 8008406:	f007 020f 	and.w	r2, r7, #15
 800840a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800840e:	ed93 7b00 	vldr	d7, [r3]
 8008412:	05f8      	lsls	r0, r7, #23
 8008414:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008418:	ea4f 1427 	mov.w	r4, r7, asr #4
 800841c:	d516      	bpl.n	800844c <_dtoa_r+0x354>
 800841e:	4b97      	ldr	r3, [pc, #604]	@ (800867c <_dtoa_r+0x584>)
 8008420:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008424:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008428:	f7f8 fa18 	bl	800085c <__aeabi_ddiv>
 800842c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008430:	f004 040f 	and.w	r4, r4, #15
 8008434:	2603      	movs	r6, #3
 8008436:	4d91      	ldr	r5, [pc, #580]	@ (800867c <_dtoa_r+0x584>)
 8008438:	b954      	cbnz	r4, 8008450 <_dtoa_r+0x358>
 800843a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800843e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008442:	f7f8 fa0b 	bl	800085c <__aeabi_ddiv>
 8008446:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800844a:	e028      	b.n	800849e <_dtoa_r+0x3a6>
 800844c:	2602      	movs	r6, #2
 800844e:	e7f2      	b.n	8008436 <_dtoa_r+0x33e>
 8008450:	07e1      	lsls	r1, r4, #31
 8008452:	d508      	bpl.n	8008466 <_dtoa_r+0x36e>
 8008454:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008458:	e9d5 2300 	ldrd	r2, r3, [r5]
 800845c:	f7f8 f8d4 	bl	8000608 <__aeabi_dmul>
 8008460:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008464:	3601      	adds	r6, #1
 8008466:	1064      	asrs	r4, r4, #1
 8008468:	3508      	adds	r5, #8
 800846a:	e7e5      	b.n	8008438 <_dtoa_r+0x340>
 800846c:	f000 80af 	beq.w	80085ce <_dtoa_r+0x4d6>
 8008470:	427c      	negs	r4, r7
 8008472:	4b81      	ldr	r3, [pc, #516]	@ (8008678 <_dtoa_r+0x580>)
 8008474:	4d81      	ldr	r5, [pc, #516]	@ (800867c <_dtoa_r+0x584>)
 8008476:	f004 020f 	and.w	r2, r4, #15
 800847a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008486:	f7f8 f8bf 	bl	8000608 <__aeabi_dmul>
 800848a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800848e:	1124      	asrs	r4, r4, #4
 8008490:	2300      	movs	r3, #0
 8008492:	2602      	movs	r6, #2
 8008494:	2c00      	cmp	r4, #0
 8008496:	f040 808f 	bne.w	80085b8 <_dtoa_r+0x4c0>
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1d3      	bne.n	8008446 <_dtoa_r+0x34e>
 800849e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80084a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 8094 	beq.w	80085d2 <_dtoa_r+0x4da>
 80084aa:	4b75      	ldr	r3, [pc, #468]	@ (8008680 <_dtoa_r+0x588>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	4620      	mov	r0, r4
 80084b0:	4629      	mov	r1, r5
 80084b2:	f7f8 fb1b 	bl	8000aec <__aeabi_dcmplt>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	f000 808b 	beq.w	80085d2 <_dtoa_r+0x4da>
 80084bc:	9b03      	ldr	r3, [sp, #12]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 8087 	beq.w	80085d2 <_dtoa_r+0x4da>
 80084c4:	f1bb 0f00 	cmp.w	fp, #0
 80084c8:	dd34      	ble.n	8008534 <_dtoa_r+0x43c>
 80084ca:	4620      	mov	r0, r4
 80084cc:	4b6d      	ldr	r3, [pc, #436]	@ (8008684 <_dtoa_r+0x58c>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	4629      	mov	r1, r5
 80084d2:	f7f8 f899 	bl	8000608 <__aeabi_dmul>
 80084d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084da:	f107 38ff 	add.w	r8, r7, #4294967295
 80084de:	3601      	adds	r6, #1
 80084e0:	465c      	mov	r4, fp
 80084e2:	4630      	mov	r0, r6
 80084e4:	f7f8 f826 	bl	8000534 <__aeabi_i2d>
 80084e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084ec:	f7f8 f88c 	bl	8000608 <__aeabi_dmul>
 80084f0:	4b65      	ldr	r3, [pc, #404]	@ (8008688 <_dtoa_r+0x590>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	f7f7 fed2 	bl	800029c <__adddf3>
 80084f8:	4605      	mov	r5, r0
 80084fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80084fe:	2c00      	cmp	r4, #0
 8008500:	d16a      	bne.n	80085d8 <_dtoa_r+0x4e0>
 8008502:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008506:	4b61      	ldr	r3, [pc, #388]	@ (800868c <_dtoa_r+0x594>)
 8008508:	2200      	movs	r2, #0
 800850a:	f7f7 fec5 	bl	8000298 <__aeabi_dsub>
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008516:	462a      	mov	r2, r5
 8008518:	4633      	mov	r3, r6
 800851a:	f7f8 fb05 	bl	8000b28 <__aeabi_dcmpgt>
 800851e:	2800      	cmp	r0, #0
 8008520:	f040 8298 	bne.w	8008a54 <_dtoa_r+0x95c>
 8008524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008528:	462a      	mov	r2, r5
 800852a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800852e:	f7f8 fadd 	bl	8000aec <__aeabi_dcmplt>
 8008532:	bb38      	cbnz	r0, 8008584 <_dtoa_r+0x48c>
 8008534:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008538:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800853c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800853e:	2b00      	cmp	r3, #0
 8008540:	f2c0 8157 	blt.w	80087f2 <_dtoa_r+0x6fa>
 8008544:	2f0e      	cmp	r7, #14
 8008546:	f300 8154 	bgt.w	80087f2 <_dtoa_r+0x6fa>
 800854a:	4b4b      	ldr	r3, [pc, #300]	@ (8008678 <_dtoa_r+0x580>)
 800854c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008550:	ed93 7b00 	vldr	d7, [r3]
 8008554:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008556:	2b00      	cmp	r3, #0
 8008558:	ed8d 7b00 	vstr	d7, [sp]
 800855c:	f280 80e5 	bge.w	800872a <_dtoa_r+0x632>
 8008560:	9b03      	ldr	r3, [sp, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	f300 80e1 	bgt.w	800872a <_dtoa_r+0x632>
 8008568:	d10c      	bne.n	8008584 <_dtoa_r+0x48c>
 800856a:	4b48      	ldr	r3, [pc, #288]	@ (800868c <_dtoa_r+0x594>)
 800856c:	2200      	movs	r2, #0
 800856e:	ec51 0b17 	vmov	r0, r1, d7
 8008572:	f7f8 f849 	bl	8000608 <__aeabi_dmul>
 8008576:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800857a:	f7f8 facb 	bl	8000b14 <__aeabi_dcmpge>
 800857e:	2800      	cmp	r0, #0
 8008580:	f000 8266 	beq.w	8008a50 <_dtoa_r+0x958>
 8008584:	2400      	movs	r4, #0
 8008586:	4625      	mov	r5, r4
 8008588:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800858a:	4656      	mov	r6, sl
 800858c:	ea6f 0803 	mvn.w	r8, r3
 8008590:	2700      	movs	r7, #0
 8008592:	4621      	mov	r1, r4
 8008594:	4648      	mov	r0, r9
 8008596:	f001 f80b 	bl	80095b0 <_Bfree>
 800859a:	2d00      	cmp	r5, #0
 800859c:	f000 80bd 	beq.w	800871a <_dtoa_r+0x622>
 80085a0:	b12f      	cbz	r7, 80085ae <_dtoa_r+0x4b6>
 80085a2:	42af      	cmp	r7, r5
 80085a4:	d003      	beq.n	80085ae <_dtoa_r+0x4b6>
 80085a6:	4639      	mov	r1, r7
 80085a8:	4648      	mov	r0, r9
 80085aa:	f001 f801 	bl	80095b0 <_Bfree>
 80085ae:	4629      	mov	r1, r5
 80085b0:	4648      	mov	r0, r9
 80085b2:	f000 fffd 	bl	80095b0 <_Bfree>
 80085b6:	e0b0      	b.n	800871a <_dtoa_r+0x622>
 80085b8:	07e2      	lsls	r2, r4, #31
 80085ba:	d505      	bpl.n	80085c8 <_dtoa_r+0x4d0>
 80085bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085c0:	f7f8 f822 	bl	8000608 <__aeabi_dmul>
 80085c4:	3601      	adds	r6, #1
 80085c6:	2301      	movs	r3, #1
 80085c8:	1064      	asrs	r4, r4, #1
 80085ca:	3508      	adds	r5, #8
 80085cc:	e762      	b.n	8008494 <_dtoa_r+0x39c>
 80085ce:	2602      	movs	r6, #2
 80085d0:	e765      	b.n	800849e <_dtoa_r+0x3a6>
 80085d2:	9c03      	ldr	r4, [sp, #12]
 80085d4:	46b8      	mov	r8, r7
 80085d6:	e784      	b.n	80084e2 <_dtoa_r+0x3ea>
 80085d8:	4b27      	ldr	r3, [pc, #156]	@ (8008678 <_dtoa_r+0x580>)
 80085da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085e4:	4454      	add	r4, sl
 80085e6:	2900      	cmp	r1, #0
 80085e8:	d054      	beq.n	8008694 <_dtoa_r+0x59c>
 80085ea:	4929      	ldr	r1, [pc, #164]	@ (8008690 <_dtoa_r+0x598>)
 80085ec:	2000      	movs	r0, #0
 80085ee:	f7f8 f935 	bl	800085c <__aeabi_ddiv>
 80085f2:	4633      	mov	r3, r6
 80085f4:	462a      	mov	r2, r5
 80085f6:	f7f7 fe4f 	bl	8000298 <__aeabi_dsub>
 80085fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80085fe:	4656      	mov	r6, sl
 8008600:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008604:	f7f8 fab0 	bl	8000b68 <__aeabi_d2iz>
 8008608:	4605      	mov	r5, r0
 800860a:	f7f7 ff93 	bl	8000534 <__aeabi_i2d>
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008616:	f7f7 fe3f 	bl	8000298 <__aeabi_dsub>
 800861a:	3530      	adds	r5, #48	@ 0x30
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008624:	f806 5b01 	strb.w	r5, [r6], #1
 8008628:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800862c:	f7f8 fa5e 	bl	8000aec <__aeabi_dcmplt>
 8008630:	2800      	cmp	r0, #0
 8008632:	d172      	bne.n	800871a <_dtoa_r+0x622>
 8008634:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008638:	4911      	ldr	r1, [pc, #68]	@ (8008680 <_dtoa_r+0x588>)
 800863a:	2000      	movs	r0, #0
 800863c:	f7f7 fe2c 	bl	8000298 <__aeabi_dsub>
 8008640:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008644:	f7f8 fa52 	bl	8000aec <__aeabi_dcmplt>
 8008648:	2800      	cmp	r0, #0
 800864a:	f040 80b4 	bne.w	80087b6 <_dtoa_r+0x6be>
 800864e:	42a6      	cmp	r6, r4
 8008650:	f43f af70 	beq.w	8008534 <_dtoa_r+0x43c>
 8008654:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008658:	4b0a      	ldr	r3, [pc, #40]	@ (8008684 <_dtoa_r+0x58c>)
 800865a:	2200      	movs	r2, #0
 800865c:	f7f7 ffd4 	bl	8000608 <__aeabi_dmul>
 8008660:	4b08      	ldr	r3, [pc, #32]	@ (8008684 <_dtoa_r+0x58c>)
 8008662:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008666:	2200      	movs	r2, #0
 8008668:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800866c:	f7f7 ffcc 	bl	8000608 <__aeabi_dmul>
 8008670:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008674:	e7c4      	b.n	8008600 <_dtoa_r+0x508>
 8008676:	bf00      	nop
 8008678:	0800abe8 	.word	0x0800abe8
 800867c:	0800abc0 	.word	0x0800abc0
 8008680:	3ff00000 	.word	0x3ff00000
 8008684:	40240000 	.word	0x40240000
 8008688:	401c0000 	.word	0x401c0000
 800868c:	40140000 	.word	0x40140000
 8008690:	3fe00000 	.word	0x3fe00000
 8008694:	4631      	mov	r1, r6
 8008696:	4628      	mov	r0, r5
 8008698:	f7f7 ffb6 	bl	8000608 <__aeabi_dmul>
 800869c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80086a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80086a2:	4656      	mov	r6, sl
 80086a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086a8:	f7f8 fa5e 	bl	8000b68 <__aeabi_d2iz>
 80086ac:	4605      	mov	r5, r0
 80086ae:	f7f7 ff41 	bl	8000534 <__aeabi_i2d>
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086ba:	f7f7 fded 	bl	8000298 <__aeabi_dsub>
 80086be:	3530      	adds	r5, #48	@ 0x30
 80086c0:	f806 5b01 	strb.w	r5, [r6], #1
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	42a6      	cmp	r6, r4
 80086ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086ce:	f04f 0200 	mov.w	r2, #0
 80086d2:	d124      	bne.n	800871e <_dtoa_r+0x626>
 80086d4:	4baf      	ldr	r3, [pc, #700]	@ (8008994 <_dtoa_r+0x89c>)
 80086d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80086da:	f7f7 fddf 	bl	800029c <__adddf3>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086e6:	f7f8 fa1f 	bl	8000b28 <__aeabi_dcmpgt>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	d163      	bne.n	80087b6 <_dtoa_r+0x6be>
 80086ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80086f2:	49a8      	ldr	r1, [pc, #672]	@ (8008994 <_dtoa_r+0x89c>)
 80086f4:	2000      	movs	r0, #0
 80086f6:	f7f7 fdcf 	bl	8000298 <__aeabi_dsub>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008702:	f7f8 f9f3 	bl	8000aec <__aeabi_dcmplt>
 8008706:	2800      	cmp	r0, #0
 8008708:	f43f af14 	beq.w	8008534 <_dtoa_r+0x43c>
 800870c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800870e:	1e73      	subs	r3, r6, #1
 8008710:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008712:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008716:	2b30      	cmp	r3, #48	@ 0x30
 8008718:	d0f8      	beq.n	800870c <_dtoa_r+0x614>
 800871a:	4647      	mov	r7, r8
 800871c:	e03b      	b.n	8008796 <_dtoa_r+0x69e>
 800871e:	4b9e      	ldr	r3, [pc, #632]	@ (8008998 <_dtoa_r+0x8a0>)
 8008720:	f7f7 ff72 	bl	8000608 <__aeabi_dmul>
 8008724:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008728:	e7bc      	b.n	80086a4 <_dtoa_r+0x5ac>
 800872a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800872e:	4656      	mov	r6, sl
 8008730:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008734:	4620      	mov	r0, r4
 8008736:	4629      	mov	r1, r5
 8008738:	f7f8 f890 	bl	800085c <__aeabi_ddiv>
 800873c:	f7f8 fa14 	bl	8000b68 <__aeabi_d2iz>
 8008740:	4680      	mov	r8, r0
 8008742:	f7f7 fef7 	bl	8000534 <__aeabi_i2d>
 8008746:	e9dd 2300 	ldrd	r2, r3, [sp]
 800874a:	f7f7 ff5d 	bl	8000608 <__aeabi_dmul>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	4620      	mov	r0, r4
 8008754:	4629      	mov	r1, r5
 8008756:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800875a:	f7f7 fd9d 	bl	8000298 <__aeabi_dsub>
 800875e:	f806 4b01 	strb.w	r4, [r6], #1
 8008762:	9d03      	ldr	r5, [sp, #12]
 8008764:	eba6 040a 	sub.w	r4, r6, sl
 8008768:	42a5      	cmp	r5, r4
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	d133      	bne.n	80087d8 <_dtoa_r+0x6e0>
 8008770:	f7f7 fd94 	bl	800029c <__adddf3>
 8008774:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008778:	4604      	mov	r4, r0
 800877a:	460d      	mov	r5, r1
 800877c:	f7f8 f9d4 	bl	8000b28 <__aeabi_dcmpgt>
 8008780:	b9c0      	cbnz	r0, 80087b4 <_dtoa_r+0x6bc>
 8008782:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008786:	4620      	mov	r0, r4
 8008788:	4629      	mov	r1, r5
 800878a:	f7f8 f9a5 	bl	8000ad8 <__aeabi_dcmpeq>
 800878e:	b110      	cbz	r0, 8008796 <_dtoa_r+0x69e>
 8008790:	f018 0f01 	tst.w	r8, #1
 8008794:	d10e      	bne.n	80087b4 <_dtoa_r+0x6bc>
 8008796:	9902      	ldr	r1, [sp, #8]
 8008798:	4648      	mov	r0, r9
 800879a:	f000 ff09 	bl	80095b0 <_Bfree>
 800879e:	2300      	movs	r3, #0
 80087a0:	7033      	strb	r3, [r6, #0]
 80087a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80087a4:	3701      	adds	r7, #1
 80087a6:	601f      	str	r7, [r3, #0]
 80087a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 824b 	beq.w	8008c46 <_dtoa_r+0xb4e>
 80087b0:	601e      	str	r6, [r3, #0]
 80087b2:	e248      	b.n	8008c46 <_dtoa_r+0xb4e>
 80087b4:	46b8      	mov	r8, r7
 80087b6:	4633      	mov	r3, r6
 80087b8:	461e      	mov	r6, r3
 80087ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087be:	2a39      	cmp	r2, #57	@ 0x39
 80087c0:	d106      	bne.n	80087d0 <_dtoa_r+0x6d8>
 80087c2:	459a      	cmp	sl, r3
 80087c4:	d1f8      	bne.n	80087b8 <_dtoa_r+0x6c0>
 80087c6:	2230      	movs	r2, #48	@ 0x30
 80087c8:	f108 0801 	add.w	r8, r8, #1
 80087cc:	f88a 2000 	strb.w	r2, [sl]
 80087d0:	781a      	ldrb	r2, [r3, #0]
 80087d2:	3201      	adds	r2, #1
 80087d4:	701a      	strb	r2, [r3, #0]
 80087d6:	e7a0      	b.n	800871a <_dtoa_r+0x622>
 80087d8:	4b6f      	ldr	r3, [pc, #444]	@ (8008998 <_dtoa_r+0x8a0>)
 80087da:	2200      	movs	r2, #0
 80087dc:	f7f7 ff14 	bl	8000608 <__aeabi_dmul>
 80087e0:	2200      	movs	r2, #0
 80087e2:	2300      	movs	r3, #0
 80087e4:	4604      	mov	r4, r0
 80087e6:	460d      	mov	r5, r1
 80087e8:	f7f8 f976 	bl	8000ad8 <__aeabi_dcmpeq>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d09f      	beq.n	8008730 <_dtoa_r+0x638>
 80087f0:	e7d1      	b.n	8008796 <_dtoa_r+0x69e>
 80087f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087f4:	2a00      	cmp	r2, #0
 80087f6:	f000 80ea 	beq.w	80089ce <_dtoa_r+0x8d6>
 80087fa:	9a07      	ldr	r2, [sp, #28]
 80087fc:	2a01      	cmp	r2, #1
 80087fe:	f300 80cd 	bgt.w	800899c <_dtoa_r+0x8a4>
 8008802:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008804:	2a00      	cmp	r2, #0
 8008806:	f000 80c1 	beq.w	800898c <_dtoa_r+0x894>
 800880a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800880e:	9c08      	ldr	r4, [sp, #32]
 8008810:	9e00      	ldr	r6, [sp, #0]
 8008812:	9a00      	ldr	r2, [sp, #0]
 8008814:	441a      	add	r2, r3
 8008816:	9200      	str	r2, [sp, #0]
 8008818:	9a06      	ldr	r2, [sp, #24]
 800881a:	2101      	movs	r1, #1
 800881c:	441a      	add	r2, r3
 800881e:	4648      	mov	r0, r9
 8008820:	9206      	str	r2, [sp, #24]
 8008822:	f000 ffc3 	bl	80097ac <__i2b>
 8008826:	4605      	mov	r5, r0
 8008828:	b166      	cbz	r6, 8008844 <_dtoa_r+0x74c>
 800882a:	9b06      	ldr	r3, [sp, #24]
 800882c:	2b00      	cmp	r3, #0
 800882e:	dd09      	ble.n	8008844 <_dtoa_r+0x74c>
 8008830:	42b3      	cmp	r3, r6
 8008832:	9a00      	ldr	r2, [sp, #0]
 8008834:	bfa8      	it	ge
 8008836:	4633      	movge	r3, r6
 8008838:	1ad2      	subs	r2, r2, r3
 800883a:	9200      	str	r2, [sp, #0]
 800883c:	9a06      	ldr	r2, [sp, #24]
 800883e:	1af6      	subs	r6, r6, r3
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	9306      	str	r3, [sp, #24]
 8008844:	9b08      	ldr	r3, [sp, #32]
 8008846:	b30b      	cbz	r3, 800888c <_dtoa_r+0x794>
 8008848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 80c6 	beq.w	80089dc <_dtoa_r+0x8e4>
 8008850:	2c00      	cmp	r4, #0
 8008852:	f000 80c0 	beq.w	80089d6 <_dtoa_r+0x8de>
 8008856:	4629      	mov	r1, r5
 8008858:	4622      	mov	r2, r4
 800885a:	4648      	mov	r0, r9
 800885c:	f001 f85e 	bl	800991c <__pow5mult>
 8008860:	9a02      	ldr	r2, [sp, #8]
 8008862:	4601      	mov	r1, r0
 8008864:	4605      	mov	r5, r0
 8008866:	4648      	mov	r0, r9
 8008868:	f000 ffb6 	bl	80097d8 <__multiply>
 800886c:	9902      	ldr	r1, [sp, #8]
 800886e:	4680      	mov	r8, r0
 8008870:	4648      	mov	r0, r9
 8008872:	f000 fe9d 	bl	80095b0 <_Bfree>
 8008876:	9b08      	ldr	r3, [sp, #32]
 8008878:	1b1b      	subs	r3, r3, r4
 800887a:	9308      	str	r3, [sp, #32]
 800887c:	f000 80b1 	beq.w	80089e2 <_dtoa_r+0x8ea>
 8008880:	9a08      	ldr	r2, [sp, #32]
 8008882:	4641      	mov	r1, r8
 8008884:	4648      	mov	r0, r9
 8008886:	f001 f849 	bl	800991c <__pow5mult>
 800888a:	9002      	str	r0, [sp, #8]
 800888c:	2101      	movs	r1, #1
 800888e:	4648      	mov	r0, r9
 8008890:	f000 ff8c 	bl	80097ac <__i2b>
 8008894:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008896:	4604      	mov	r4, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	f000 81d8 	beq.w	8008c4e <_dtoa_r+0xb56>
 800889e:	461a      	mov	r2, r3
 80088a0:	4601      	mov	r1, r0
 80088a2:	4648      	mov	r0, r9
 80088a4:	f001 f83a 	bl	800991c <__pow5mult>
 80088a8:	9b07      	ldr	r3, [sp, #28]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	4604      	mov	r4, r0
 80088ae:	f300 809f 	bgt.w	80089f0 <_dtoa_r+0x8f8>
 80088b2:	9b04      	ldr	r3, [sp, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f040 8097 	bne.w	80089e8 <_dtoa_r+0x8f0>
 80088ba:	9b05      	ldr	r3, [sp, #20]
 80088bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f040 8093 	bne.w	80089ec <_dtoa_r+0x8f4>
 80088c6:	9b05      	ldr	r3, [sp, #20]
 80088c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80088cc:	0d1b      	lsrs	r3, r3, #20
 80088ce:	051b      	lsls	r3, r3, #20
 80088d0:	b133      	cbz	r3, 80088e0 <_dtoa_r+0x7e8>
 80088d2:	9b00      	ldr	r3, [sp, #0]
 80088d4:	3301      	adds	r3, #1
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	9b06      	ldr	r3, [sp, #24]
 80088da:	3301      	adds	r3, #1
 80088dc:	9306      	str	r3, [sp, #24]
 80088de:	2301      	movs	r3, #1
 80088e0:	9308      	str	r3, [sp, #32]
 80088e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 81b8 	beq.w	8008c5a <_dtoa_r+0xb62>
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80088f0:	6918      	ldr	r0, [r3, #16]
 80088f2:	f000 ff0f 	bl	8009714 <__hi0bits>
 80088f6:	f1c0 0020 	rsb	r0, r0, #32
 80088fa:	9b06      	ldr	r3, [sp, #24]
 80088fc:	4418      	add	r0, r3
 80088fe:	f010 001f 	ands.w	r0, r0, #31
 8008902:	f000 8082 	beq.w	8008a0a <_dtoa_r+0x912>
 8008906:	f1c0 0320 	rsb	r3, r0, #32
 800890a:	2b04      	cmp	r3, #4
 800890c:	dd73      	ble.n	80089f6 <_dtoa_r+0x8fe>
 800890e:	9b00      	ldr	r3, [sp, #0]
 8008910:	f1c0 001c 	rsb	r0, r0, #28
 8008914:	4403      	add	r3, r0
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	9b06      	ldr	r3, [sp, #24]
 800891a:	4403      	add	r3, r0
 800891c:	4406      	add	r6, r0
 800891e:	9306      	str	r3, [sp, #24]
 8008920:	9b00      	ldr	r3, [sp, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	dd05      	ble.n	8008932 <_dtoa_r+0x83a>
 8008926:	9902      	ldr	r1, [sp, #8]
 8008928:	461a      	mov	r2, r3
 800892a:	4648      	mov	r0, r9
 800892c:	f001 f850 	bl	80099d0 <__lshift>
 8008930:	9002      	str	r0, [sp, #8]
 8008932:	9b06      	ldr	r3, [sp, #24]
 8008934:	2b00      	cmp	r3, #0
 8008936:	dd05      	ble.n	8008944 <_dtoa_r+0x84c>
 8008938:	4621      	mov	r1, r4
 800893a:	461a      	mov	r2, r3
 800893c:	4648      	mov	r0, r9
 800893e:	f001 f847 	bl	80099d0 <__lshift>
 8008942:	4604      	mov	r4, r0
 8008944:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008946:	2b00      	cmp	r3, #0
 8008948:	d061      	beq.n	8008a0e <_dtoa_r+0x916>
 800894a:	9802      	ldr	r0, [sp, #8]
 800894c:	4621      	mov	r1, r4
 800894e:	f001 f8ab 	bl	8009aa8 <__mcmp>
 8008952:	2800      	cmp	r0, #0
 8008954:	da5b      	bge.n	8008a0e <_dtoa_r+0x916>
 8008956:	2300      	movs	r3, #0
 8008958:	9902      	ldr	r1, [sp, #8]
 800895a:	220a      	movs	r2, #10
 800895c:	4648      	mov	r0, r9
 800895e:	f000 fe49 	bl	80095f4 <__multadd>
 8008962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008964:	9002      	str	r0, [sp, #8]
 8008966:	f107 38ff 	add.w	r8, r7, #4294967295
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 8177 	beq.w	8008c5e <_dtoa_r+0xb66>
 8008970:	4629      	mov	r1, r5
 8008972:	2300      	movs	r3, #0
 8008974:	220a      	movs	r2, #10
 8008976:	4648      	mov	r0, r9
 8008978:	f000 fe3c 	bl	80095f4 <__multadd>
 800897c:	f1bb 0f00 	cmp.w	fp, #0
 8008980:	4605      	mov	r5, r0
 8008982:	dc6f      	bgt.n	8008a64 <_dtoa_r+0x96c>
 8008984:	9b07      	ldr	r3, [sp, #28]
 8008986:	2b02      	cmp	r3, #2
 8008988:	dc49      	bgt.n	8008a1e <_dtoa_r+0x926>
 800898a:	e06b      	b.n	8008a64 <_dtoa_r+0x96c>
 800898c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800898e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008992:	e73c      	b.n	800880e <_dtoa_r+0x716>
 8008994:	3fe00000 	.word	0x3fe00000
 8008998:	40240000 	.word	0x40240000
 800899c:	9b03      	ldr	r3, [sp, #12]
 800899e:	1e5c      	subs	r4, r3, #1
 80089a0:	9b08      	ldr	r3, [sp, #32]
 80089a2:	42a3      	cmp	r3, r4
 80089a4:	db09      	blt.n	80089ba <_dtoa_r+0x8c2>
 80089a6:	1b1c      	subs	r4, r3, r4
 80089a8:	9b03      	ldr	r3, [sp, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f6bf af30 	bge.w	8008810 <_dtoa_r+0x718>
 80089b0:	9b00      	ldr	r3, [sp, #0]
 80089b2:	9a03      	ldr	r2, [sp, #12]
 80089b4:	1a9e      	subs	r6, r3, r2
 80089b6:	2300      	movs	r3, #0
 80089b8:	e72b      	b.n	8008812 <_dtoa_r+0x71a>
 80089ba:	9b08      	ldr	r3, [sp, #32]
 80089bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80089be:	9408      	str	r4, [sp, #32]
 80089c0:	1ae3      	subs	r3, r4, r3
 80089c2:	441a      	add	r2, r3
 80089c4:	9e00      	ldr	r6, [sp, #0]
 80089c6:	9b03      	ldr	r3, [sp, #12]
 80089c8:	920d      	str	r2, [sp, #52]	@ 0x34
 80089ca:	2400      	movs	r4, #0
 80089cc:	e721      	b.n	8008812 <_dtoa_r+0x71a>
 80089ce:	9c08      	ldr	r4, [sp, #32]
 80089d0:	9e00      	ldr	r6, [sp, #0]
 80089d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80089d4:	e728      	b.n	8008828 <_dtoa_r+0x730>
 80089d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80089da:	e751      	b.n	8008880 <_dtoa_r+0x788>
 80089dc:	9a08      	ldr	r2, [sp, #32]
 80089de:	9902      	ldr	r1, [sp, #8]
 80089e0:	e750      	b.n	8008884 <_dtoa_r+0x78c>
 80089e2:	f8cd 8008 	str.w	r8, [sp, #8]
 80089e6:	e751      	b.n	800888c <_dtoa_r+0x794>
 80089e8:	2300      	movs	r3, #0
 80089ea:	e779      	b.n	80088e0 <_dtoa_r+0x7e8>
 80089ec:	9b04      	ldr	r3, [sp, #16]
 80089ee:	e777      	b.n	80088e0 <_dtoa_r+0x7e8>
 80089f0:	2300      	movs	r3, #0
 80089f2:	9308      	str	r3, [sp, #32]
 80089f4:	e779      	b.n	80088ea <_dtoa_r+0x7f2>
 80089f6:	d093      	beq.n	8008920 <_dtoa_r+0x828>
 80089f8:	9a00      	ldr	r2, [sp, #0]
 80089fa:	331c      	adds	r3, #28
 80089fc:	441a      	add	r2, r3
 80089fe:	9200      	str	r2, [sp, #0]
 8008a00:	9a06      	ldr	r2, [sp, #24]
 8008a02:	441a      	add	r2, r3
 8008a04:	441e      	add	r6, r3
 8008a06:	9206      	str	r2, [sp, #24]
 8008a08:	e78a      	b.n	8008920 <_dtoa_r+0x828>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	e7f4      	b.n	80089f8 <_dtoa_r+0x900>
 8008a0e:	9b03      	ldr	r3, [sp, #12]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	46b8      	mov	r8, r7
 8008a14:	dc20      	bgt.n	8008a58 <_dtoa_r+0x960>
 8008a16:	469b      	mov	fp, r3
 8008a18:	9b07      	ldr	r3, [sp, #28]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	dd1e      	ble.n	8008a5c <_dtoa_r+0x964>
 8008a1e:	f1bb 0f00 	cmp.w	fp, #0
 8008a22:	f47f adb1 	bne.w	8008588 <_dtoa_r+0x490>
 8008a26:	4621      	mov	r1, r4
 8008a28:	465b      	mov	r3, fp
 8008a2a:	2205      	movs	r2, #5
 8008a2c:	4648      	mov	r0, r9
 8008a2e:	f000 fde1 	bl	80095f4 <__multadd>
 8008a32:	4601      	mov	r1, r0
 8008a34:	4604      	mov	r4, r0
 8008a36:	9802      	ldr	r0, [sp, #8]
 8008a38:	f001 f836 	bl	8009aa8 <__mcmp>
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	f77f ada3 	ble.w	8008588 <_dtoa_r+0x490>
 8008a42:	4656      	mov	r6, sl
 8008a44:	2331      	movs	r3, #49	@ 0x31
 8008a46:	f806 3b01 	strb.w	r3, [r6], #1
 8008a4a:	f108 0801 	add.w	r8, r8, #1
 8008a4e:	e59f      	b.n	8008590 <_dtoa_r+0x498>
 8008a50:	9c03      	ldr	r4, [sp, #12]
 8008a52:	46b8      	mov	r8, r7
 8008a54:	4625      	mov	r5, r4
 8008a56:	e7f4      	b.n	8008a42 <_dtoa_r+0x94a>
 8008a58:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 8101 	beq.w	8008c66 <_dtoa_r+0xb6e>
 8008a64:	2e00      	cmp	r6, #0
 8008a66:	dd05      	ble.n	8008a74 <_dtoa_r+0x97c>
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4632      	mov	r2, r6
 8008a6c:	4648      	mov	r0, r9
 8008a6e:	f000 ffaf 	bl	80099d0 <__lshift>
 8008a72:	4605      	mov	r5, r0
 8008a74:	9b08      	ldr	r3, [sp, #32]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d05c      	beq.n	8008b34 <_dtoa_r+0xa3c>
 8008a7a:	6869      	ldr	r1, [r5, #4]
 8008a7c:	4648      	mov	r0, r9
 8008a7e:	f000 fd57 	bl	8009530 <_Balloc>
 8008a82:	4606      	mov	r6, r0
 8008a84:	b928      	cbnz	r0, 8008a92 <_dtoa_r+0x99a>
 8008a86:	4b82      	ldr	r3, [pc, #520]	@ (8008c90 <_dtoa_r+0xb98>)
 8008a88:	4602      	mov	r2, r0
 8008a8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008a8e:	f7ff bb4a 	b.w	8008126 <_dtoa_r+0x2e>
 8008a92:	692a      	ldr	r2, [r5, #16]
 8008a94:	3202      	adds	r2, #2
 8008a96:	0092      	lsls	r2, r2, #2
 8008a98:	f105 010c 	add.w	r1, r5, #12
 8008a9c:	300c      	adds	r0, #12
 8008a9e:	f7ff fa8a 	bl	8007fb6 <memcpy>
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	4631      	mov	r1, r6
 8008aa6:	4648      	mov	r0, r9
 8008aa8:	f000 ff92 	bl	80099d0 <__lshift>
 8008aac:	f10a 0301 	add.w	r3, sl, #1
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	eb0a 030b 	add.w	r3, sl, fp
 8008ab6:	9308      	str	r3, [sp, #32]
 8008ab8:	9b04      	ldr	r3, [sp, #16]
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	462f      	mov	r7, r5
 8008ac0:	9306      	str	r3, [sp, #24]
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	9b00      	ldr	r3, [sp, #0]
 8008ac6:	9802      	ldr	r0, [sp, #8]
 8008ac8:	4621      	mov	r1, r4
 8008aca:	f103 3bff 	add.w	fp, r3, #4294967295
 8008ace:	f7ff fa8b 	bl	8007fe8 <quorem>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	3330      	adds	r3, #48	@ 0x30
 8008ad6:	9003      	str	r0, [sp, #12]
 8008ad8:	4639      	mov	r1, r7
 8008ada:	9802      	ldr	r0, [sp, #8]
 8008adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ade:	f000 ffe3 	bl	8009aa8 <__mcmp>
 8008ae2:	462a      	mov	r2, r5
 8008ae4:	9004      	str	r0, [sp, #16]
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4648      	mov	r0, r9
 8008aea:	f000 fff9 	bl	8009ae0 <__mdiff>
 8008aee:	68c2      	ldr	r2, [r0, #12]
 8008af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008af2:	4606      	mov	r6, r0
 8008af4:	bb02      	cbnz	r2, 8008b38 <_dtoa_r+0xa40>
 8008af6:	4601      	mov	r1, r0
 8008af8:	9802      	ldr	r0, [sp, #8]
 8008afa:	f000 ffd5 	bl	8009aa8 <__mcmp>
 8008afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b00:	4602      	mov	r2, r0
 8008b02:	4631      	mov	r1, r6
 8008b04:	4648      	mov	r0, r9
 8008b06:	920c      	str	r2, [sp, #48]	@ 0x30
 8008b08:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b0a:	f000 fd51 	bl	80095b0 <_Bfree>
 8008b0e:	9b07      	ldr	r3, [sp, #28]
 8008b10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008b12:	9e00      	ldr	r6, [sp, #0]
 8008b14:	ea42 0103 	orr.w	r1, r2, r3
 8008b18:	9b06      	ldr	r3, [sp, #24]
 8008b1a:	4319      	orrs	r1, r3
 8008b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b1e:	d10d      	bne.n	8008b3c <_dtoa_r+0xa44>
 8008b20:	2b39      	cmp	r3, #57	@ 0x39
 8008b22:	d027      	beq.n	8008b74 <_dtoa_r+0xa7c>
 8008b24:	9a04      	ldr	r2, [sp, #16]
 8008b26:	2a00      	cmp	r2, #0
 8008b28:	dd01      	ble.n	8008b2e <_dtoa_r+0xa36>
 8008b2a:	9b03      	ldr	r3, [sp, #12]
 8008b2c:	3331      	adds	r3, #49	@ 0x31
 8008b2e:	f88b 3000 	strb.w	r3, [fp]
 8008b32:	e52e      	b.n	8008592 <_dtoa_r+0x49a>
 8008b34:	4628      	mov	r0, r5
 8008b36:	e7b9      	b.n	8008aac <_dtoa_r+0x9b4>
 8008b38:	2201      	movs	r2, #1
 8008b3a:	e7e2      	b.n	8008b02 <_dtoa_r+0xa0a>
 8008b3c:	9904      	ldr	r1, [sp, #16]
 8008b3e:	2900      	cmp	r1, #0
 8008b40:	db04      	blt.n	8008b4c <_dtoa_r+0xa54>
 8008b42:	9807      	ldr	r0, [sp, #28]
 8008b44:	4301      	orrs	r1, r0
 8008b46:	9806      	ldr	r0, [sp, #24]
 8008b48:	4301      	orrs	r1, r0
 8008b4a:	d120      	bne.n	8008b8e <_dtoa_r+0xa96>
 8008b4c:	2a00      	cmp	r2, #0
 8008b4e:	ddee      	ble.n	8008b2e <_dtoa_r+0xa36>
 8008b50:	9902      	ldr	r1, [sp, #8]
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	2201      	movs	r2, #1
 8008b56:	4648      	mov	r0, r9
 8008b58:	f000 ff3a 	bl	80099d0 <__lshift>
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	9002      	str	r0, [sp, #8]
 8008b60:	f000 ffa2 	bl	8009aa8 <__mcmp>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	9b00      	ldr	r3, [sp, #0]
 8008b68:	dc02      	bgt.n	8008b70 <_dtoa_r+0xa78>
 8008b6a:	d1e0      	bne.n	8008b2e <_dtoa_r+0xa36>
 8008b6c:	07da      	lsls	r2, r3, #31
 8008b6e:	d5de      	bpl.n	8008b2e <_dtoa_r+0xa36>
 8008b70:	2b39      	cmp	r3, #57	@ 0x39
 8008b72:	d1da      	bne.n	8008b2a <_dtoa_r+0xa32>
 8008b74:	2339      	movs	r3, #57	@ 0x39
 8008b76:	f88b 3000 	strb.w	r3, [fp]
 8008b7a:	4633      	mov	r3, r6
 8008b7c:	461e      	mov	r6, r3
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008b84:	2a39      	cmp	r2, #57	@ 0x39
 8008b86:	d04e      	beq.n	8008c26 <_dtoa_r+0xb2e>
 8008b88:	3201      	adds	r2, #1
 8008b8a:	701a      	strb	r2, [r3, #0]
 8008b8c:	e501      	b.n	8008592 <_dtoa_r+0x49a>
 8008b8e:	2a00      	cmp	r2, #0
 8008b90:	dd03      	ble.n	8008b9a <_dtoa_r+0xaa2>
 8008b92:	2b39      	cmp	r3, #57	@ 0x39
 8008b94:	d0ee      	beq.n	8008b74 <_dtoa_r+0xa7c>
 8008b96:	3301      	adds	r3, #1
 8008b98:	e7c9      	b.n	8008b2e <_dtoa_r+0xa36>
 8008b9a:	9a00      	ldr	r2, [sp, #0]
 8008b9c:	9908      	ldr	r1, [sp, #32]
 8008b9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008ba2:	428a      	cmp	r2, r1
 8008ba4:	d028      	beq.n	8008bf8 <_dtoa_r+0xb00>
 8008ba6:	9902      	ldr	r1, [sp, #8]
 8008ba8:	2300      	movs	r3, #0
 8008baa:	220a      	movs	r2, #10
 8008bac:	4648      	mov	r0, r9
 8008bae:	f000 fd21 	bl	80095f4 <__multadd>
 8008bb2:	42af      	cmp	r7, r5
 8008bb4:	9002      	str	r0, [sp, #8]
 8008bb6:	f04f 0300 	mov.w	r3, #0
 8008bba:	f04f 020a 	mov.w	r2, #10
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	4648      	mov	r0, r9
 8008bc2:	d107      	bne.n	8008bd4 <_dtoa_r+0xadc>
 8008bc4:	f000 fd16 	bl	80095f4 <__multadd>
 8008bc8:	4607      	mov	r7, r0
 8008bca:	4605      	mov	r5, r0
 8008bcc:	9b00      	ldr	r3, [sp, #0]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	e777      	b.n	8008ac4 <_dtoa_r+0x9cc>
 8008bd4:	f000 fd0e 	bl	80095f4 <__multadd>
 8008bd8:	4629      	mov	r1, r5
 8008bda:	4607      	mov	r7, r0
 8008bdc:	2300      	movs	r3, #0
 8008bde:	220a      	movs	r2, #10
 8008be0:	4648      	mov	r0, r9
 8008be2:	f000 fd07 	bl	80095f4 <__multadd>
 8008be6:	4605      	mov	r5, r0
 8008be8:	e7f0      	b.n	8008bcc <_dtoa_r+0xad4>
 8008bea:	f1bb 0f00 	cmp.w	fp, #0
 8008bee:	bfcc      	ite	gt
 8008bf0:	465e      	movgt	r6, fp
 8008bf2:	2601      	movle	r6, #1
 8008bf4:	4456      	add	r6, sl
 8008bf6:	2700      	movs	r7, #0
 8008bf8:	9902      	ldr	r1, [sp, #8]
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	4648      	mov	r0, r9
 8008c00:	f000 fee6 	bl	80099d0 <__lshift>
 8008c04:	4621      	mov	r1, r4
 8008c06:	9002      	str	r0, [sp, #8]
 8008c08:	f000 ff4e 	bl	8009aa8 <__mcmp>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	dcb4      	bgt.n	8008b7a <_dtoa_r+0xa82>
 8008c10:	d102      	bne.n	8008c18 <_dtoa_r+0xb20>
 8008c12:	9b00      	ldr	r3, [sp, #0]
 8008c14:	07db      	lsls	r3, r3, #31
 8008c16:	d4b0      	bmi.n	8008b7a <_dtoa_r+0xa82>
 8008c18:	4633      	mov	r3, r6
 8008c1a:	461e      	mov	r6, r3
 8008c1c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c20:	2a30      	cmp	r2, #48	@ 0x30
 8008c22:	d0fa      	beq.n	8008c1a <_dtoa_r+0xb22>
 8008c24:	e4b5      	b.n	8008592 <_dtoa_r+0x49a>
 8008c26:	459a      	cmp	sl, r3
 8008c28:	d1a8      	bne.n	8008b7c <_dtoa_r+0xa84>
 8008c2a:	2331      	movs	r3, #49	@ 0x31
 8008c2c:	f108 0801 	add.w	r8, r8, #1
 8008c30:	f88a 3000 	strb.w	r3, [sl]
 8008c34:	e4ad      	b.n	8008592 <_dtoa_r+0x49a>
 8008c36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c38:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008c94 <_dtoa_r+0xb9c>
 8008c3c:	b11b      	cbz	r3, 8008c46 <_dtoa_r+0xb4e>
 8008c3e:	f10a 0308 	add.w	r3, sl, #8
 8008c42:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008c44:	6013      	str	r3, [r2, #0]
 8008c46:	4650      	mov	r0, sl
 8008c48:	b017      	add	sp, #92	@ 0x5c
 8008c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c4e:	9b07      	ldr	r3, [sp, #28]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	f77f ae2e 	ble.w	80088b2 <_dtoa_r+0x7ba>
 8008c56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c58:	9308      	str	r3, [sp, #32]
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	e64d      	b.n	80088fa <_dtoa_r+0x802>
 8008c5e:	f1bb 0f00 	cmp.w	fp, #0
 8008c62:	f77f aed9 	ble.w	8008a18 <_dtoa_r+0x920>
 8008c66:	4656      	mov	r6, sl
 8008c68:	9802      	ldr	r0, [sp, #8]
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	f7ff f9bc 	bl	8007fe8 <quorem>
 8008c70:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008c74:	f806 3b01 	strb.w	r3, [r6], #1
 8008c78:	eba6 020a 	sub.w	r2, r6, sl
 8008c7c:	4593      	cmp	fp, r2
 8008c7e:	ddb4      	ble.n	8008bea <_dtoa_r+0xaf2>
 8008c80:	9902      	ldr	r1, [sp, #8]
 8008c82:	2300      	movs	r3, #0
 8008c84:	220a      	movs	r2, #10
 8008c86:	4648      	mov	r0, r9
 8008c88:	f000 fcb4 	bl	80095f4 <__multadd>
 8008c8c:	9002      	str	r0, [sp, #8]
 8008c8e:	e7eb      	b.n	8008c68 <_dtoa_r+0xb70>
 8008c90:	0800aa46 	.word	0x0800aa46
 8008c94:	0800a9ca 	.word	0x0800a9ca

08008c98 <_free_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4605      	mov	r5, r0
 8008c9c:	2900      	cmp	r1, #0
 8008c9e:	d041      	beq.n	8008d24 <_free_r+0x8c>
 8008ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ca4:	1f0c      	subs	r4, r1, #4
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	bfb8      	it	lt
 8008caa:	18e4      	addlt	r4, r4, r3
 8008cac:	f000 fc34 	bl	8009518 <__malloc_lock>
 8008cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8008d28 <_free_r+0x90>)
 8008cb2:	6813      	ldr	r3, [r2, #0]
 8008cb4:	b933      	cbnz	r3, 8008cc4 <_free_r+0x2c>
 8008cb6:	6063      	str	r3, [r4, #4]
 8008cb8:	6014      	str	r4, [r2, #0]
 8008cba:	4628      	mov	r0, r5
 8008cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cc0:	f000 bc30 	b.w	8009524 <__malloc_unlock>
 8008cc4:	42a3      	cmp	r3, r4
 8008cc6:	d908      	bls.n	8008cda <_free_r+0x42>
 8008cc8:	6820      	ldr	r0, [r4, #0]
 8008cca:	1821      	adds	r1, r4, r0
 8008ccc:	428b      	cmp	r3, r1
 8008cce:	bf01      	itttt	eq
 8008cd0:	6819      	ldreq	r1, [r3, #0]
 8008cd2:	685b      	ldreq	r3, [r3, #4]
 8008cd4:	1809      	addeq	r1, r1, r0
 8008cd6:	6021      	streq	r1, [r4, #0]
 8008cd8:	e7ed      	b.n	8008cb6 <_free_r+0x1e>
 8008cda:	461a      	mov	r2, r3
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	b10b      	cbz	r3, 8008ce4 <_free_r+0x4c>
 8008ce0:	42a3      	cmp	r3, r4
 8008ce2:	d9fa      	bls.n	8008cda <_free_r+0x42>
 8008ce4:	6811      	ldr	r1, [r2, #0]
 8008ce6:	1850      	adds	r0, r2, r1
 8008ce8:	42a0      	cmp	r0, r4
 8008cea:	d10b      	bne.n	8008d04 <_free_r+0x6c>
 8008cec:	6820      	ldr	r0, [r4, #0]
 8008cee:	4401      	add	r1, r0
 8008cf0:	1850      	adds	r0, r2, r1
 8008cf2:	4283      	cmp	r3, r0
 8008cf4:	6011      	str	r1, [r2, #0]
 8008cf6:	d1e0      	bne.n	8008cba <_free_r+0x22>
 8008cf8:	6818      	ldr	r0, [r3, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	6053      	str	r3, [r2, #4]
 8008cfe:	4408      	add	r0, r1
 8008d00:	6010      	str	r0, [r2, #0]
 8008d02:	e7da      	b.n	8008cba <_free_r+0x22>
 8008d04:	d902      	bls.n	8008d0c <_free_r+0x74>
 8008d06:	230c      	movs	r3, #12
 8008d08:	602b      	str	r3, [r5, #0]
 8008d0a:	e7d6      	b.n	8008cba <_free_r+0x22>
 8008d0c:	6820      	ldr	r0, [r4, #0]
 8008d0e:	1821      	adds	r1, r4, r0
 8008d10:	428b      	cmp	r3, r1
 8008d12:	bf04      	itt	eq
 8008d14:	6819      	ldreq	r1, [r3, #0]
 8008d16:	685b      	ldreq	r3, [r3, #4]
 8008d18:	6063      	str	r3, [r4, #4]
 8008d1a:	bf04      	itt	eq
 8008d1c:	1809      	addeq	r1, r1, r0
 8008d1e:	6021      	streq	r1, [r4, #0]
 8008d20:	6054      	str	r4, [r2, #4]
 8008d22:	e7ca      	b.n	8008cba <_free_r+0x22>
 8008d24:	bd38      	pop	{r3, r4, r5, pc}
 8008d26:	bf00      	nop
 8008d28:	200005ec 	.word	0x200005ec

08008d2c <rshift>:
 8008d2c:	6903      	ldr	r3, [r0, #16]
 8008d2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008d32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d36:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008d3a:	f100 0414 	add.w	r4, r0, #20
 8008d3e:	dd45      	ble.n	8008dcc <rshift+0xa0>
 8008d40:	f011 011f 	ands.w	r1, r1, #31
 8008d44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008d48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d4c:	d10c      	bne.n	8008d68 <rshift+0x3c>
 8008d4e:	f100 0710 	add.w	r7, r0, #16
 8008d52:	4629      	mov	r1, r5
 8008d54:	42b1      	cmp	r1, r6
 8008d56:	d334      	bcc.n	8008dc2 <rshift+0x96>
 8008d58:	1a9b      	subs	r3, r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	1eea      	subs	r2, r5, #3
 8008d5e:	4296      	cmp	r6, r2
 8008d60:	bf38      	it	cc
 8008d62:	2300      	movcc	r3, #0
 8008d64:	4423      	add	r3, r4
 8008d66:	e015      	b.n	8008d94 <rshift+0x68>
 8008d68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d6c:	f1c1 0820 	rsb	r8, r1, #32
 8008d70:	40cf      	lsrs	r7, r1
 8008d72:	f105 0e04 	add.w	lr, r5, #4
 8008d76:	46a1      	mov	r9, r4
 8008d78:	4576      	cmp	r6, lr
 8008d7a:	46f4      	mov	ip, lr
 8008d7c:	d815      	bhi.n	8008daa <rshift+0x7e>
 8008d7e:	1a9a      	subs	r2, r3, r2
 8008d80:	0092      	lsls	r2, r2, #2
 8008d82:	3a04      	subs	r2, #4
 8008d84:	3501      	adds	r5, #1
 8008d86:	42ae      	cmp	r6, r5
 8008d88:	bf38      	it	cc
 8008d8a:	2200      	movcc	r2, #0
 8008d8c:	18a3      	adds	r3, r4, r2
 8008d8e:	50a7      	str	r7, [r4, r2]
 8008d90:	b107      	cbz	r7, 8008d94 <rshift+0x68>
 8008d92:	3304      	adds	r3, #4
 8008d94:	1b1a      	subs	r2, r3, r4
 8008d96:	42a3      	cmp	r3, r4
 8008d98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d9c:	bf08      	it	eq
 8008d9e:	2300      	moveq	r3, #0
 8008da0:	6102      	str	r2, [r0, #16]
 8008da2:	bf08      	it	eq
 8008da4:	6143      	streq	r3, [r0, #20]
 8008da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008daa:	f8dc c000 	ldr.w	ip, [ip]
 8008dae:	fa0c fc08 	lsl.w	ip, ip, r8
 8008db2:	ea4c 0707 	orr.w	r7, ip, r7
 8008db6:	f849 7b04 	str.w	r7, [r9], #4
 8008dba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008dbe:	40cf      	lsrs	r7, r1
 8008dc0:	e7da      	b.n	8008d78 <rshift+0x4c>
 8008dc2:	f851 cb04 	ldr.w	ip, [r1], #4
 8008dc6:	f847 cf04 	str.w	ip, [r7, #4]!
 8008dca:	e7c3      	b.n	8008d54 <rshift+0x28>
 8008dcc:	4623      	mov	r3, r4
 8008dce:	e7e1      	b.n	8008d94 <rshift+0x68>

08008dd0 <__hexdig_fun>:
 8008dd0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008dd4:	2b09      	cmp	r3, #9
 8008dd6:	d802      	bhi.n	8008dde <__hexdig_fun+0xe>
 8008dd8:	3820      	subs	r0, #32
 8008dda:	b2c0      	uxtb	r0, r0
 8008ddc:	4770      	bx	lr
 8008dde:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008de2:	2b05      	cmp	r3, #5
 8008de4:	d801      	bhi.n	8008dea <__hexdig_fun+0x1a>
 8008de6:	3847      	subs	r0, #71	@ 0x47
 8008de8:	e7f7      	b.n	8008dda <__hexdig_fun+0xa>
 8008dea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008dee:	2b05      	cmp	r3, #5
 8008df0:	d801      	bhi.n	8008df6 <__hexdig_fun+0x26>
 8008df2:	3827      	subs	r0, #39	@ 0x27
 8008df4:	e7f1      	b.n	8008dda <__hexdig_fun+0xa>
 8008df6:	2000      	movs	r0, #0
 8008df8:	4770      	bx	lr
	...

08008dfc <__gethex>:
 8008dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e00:	b085      	sub	sp, #20
 8008e02:	468a      	mov	sl, r1
 8008e04:	9302      	str	r3, [sp, #8]
 8008e06:	680b      	ldr	r3, [r1, #0]
 8008e08:	9001      	str	r0, [sp, #4]
 8008e0a:	4690      	mov	r8, r2
 8008e0c:	1c9c      	adds	r4, r3, #2
 8008e0e:	46a1      	mov	r9, r4
 8008e10:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008e14:	2830      	cmp	r0, #48	@ 0x30
 8008e16:	d0fa      	beq.n	8008e0e <__gethex+0x12>
 8008e18:	eba9 0303 	sub.w	r3, r9, r3
 8008e1c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008e20:	f7ff ffd6 	bl	8008dd0 <__hexdig_fun>
 8008e24:	4605      	mov	r5, r0
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d168      	bne.n	8008efc <__gethex+0x100>
 8008e2a:	49a0      	ldr	r1, [pc, #640]	@ (80090ac <__gethex+0x2b0>)
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	4648      	mov	r0, r9
 8008e30:	f7ff f837 	bl	8007ea2 <strncmp>
 8008e34:	4607      	mov	r7, r0
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d167      	bne.n	8008f0a <__gethex+0x10e>
 8008e3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008e3e:	4626      	mov	r6, r4
 8008e40:	f7ff ffc6 	bl	8008dd0 <__hexdig_fun>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d062      	beq.n	8008f0e <__gethex+0x112>
 8008e48:	4623      	mov	r3, r4
 8008e4a:	7818      	ldrb	r0, [r3, #0]
 8008e4c:	2830      	cmp	r0, #48	@ 0x30
 8008e4e:	4699      	mov	r9, r3
 8008e50:	f103 0301 	add.w	r3, r3, #1
 8008e54:	d0f9      	beq.n	8008e4a <__gethex+0x4e>
 8008e56:	f7ff ffbb 	bl	8008dd0 <__hexdig_fun>
 8008e5a:	fab0 f580 	clz	r5, r0
 8008e5e:	096d      	lsrs	r5, r5, #5
 8008e60:	f04f 0b01 	mov.w	fp, #1
 8008e64:	464a      	mov	r2, r9
 8008e66:	4616      	mov	r6, r2
 8008e68:	3201      	adds	r2, #1
 8008e6a:	7830      	ldrb	r0, [r6, #0]
 8008e6c:	f7ff ffb0 	bl	8008dd0 <__hexdig_fun>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d1f8      	bne.n	8008e66 <__gethex+0x6a>
 8008e74:	498d      	ldr	r1, [pc, #564]	@ (80090ac <__gethex+0x2b0>)
 8008e76:	2201      	movs	r2, #1
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f7ff f812 	bl	8007ea2 <strncmp>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d13f      	bne.n	8008f02 <__gethex+0x106>
 8008e82:	b944      	cbnz	r4, 8008e96 <__gethex+0x9a>
 8008e84:	1c74      	adds	r4, r6, #1
 8008e86:	4622      	mov	r2, r4
 8008e88:	4616      	mov	r6, r2
 8008e8a:	3201      	adds	r2, #1
 8008e8c:	7830      	ldrb	r0, [r6, #0]
 8008e8e:	f7ff ff9f 	bl	8008dd0 <__hexdig_fun>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d1f8      	bne.n	8008e88 <__gethex+0x8c>
 8008e96:	1ba4      	subs	r4, r4, r6
 8008e98:	00a7      	lsls	r7, r4, #2
 8008e9a:	7833      	ldrb	r3, [r6, #0]
 8008e9c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008ea0:	2b50      	cmp	r3, #80	@ 0x50
 8008ea2:	d13e      	bne.n	8008f22 <__gethex+0x126>
 8008ea4:	7873      	ldrb	r3, [r6, #1]
 8008ea6:	2b2b      	cmp	r3, #43	@ 0x2b
 8008ea8:	d033      	beq.n	8008f12 <__gethex+0x116>
 8008eaa:	2b2d      	cmp	r3, #45	@ 0x2d
 8008eac:	d034      	beq.n	8008f18 <__gethex+0x11c>
 8008eae:	1c71      	adds	r1, r6, #1
 8008eb0:	2400      	movs	r4, #0
 8008eb2:	7808      	ldrb	r0, [r1, #0]
 8008eb4:	f7ff ff8c 	bl	8008dd0 <__hexdig_fun>
 8008eb8:	1e43      	subs	r3, r0, #1
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b18      	cmp	r3, #24
 8008ebe:	d830      	bhi.n	8008f22 <__gethex+0x126>
 8008ec0:	f1a0 0210 	sub.w	r2, r0, #16
 8008ec4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ec8:	f7ff ff82 	bl	8008dd0 <__hexdig_fun>
 8008ecc:	f100 3cff 	add.w	ip, r0, #4294967295
 8008ed0:	fa5f fc8c 	uxtb.w	ip, ip
 8008ed4:	f1bc 0f18 	cmp.w	ip, #24
 8008ed8:	f04f 030a 	mov.w	r3, #10
 8008edc:	d91e      	bls.n	8008f1c <__gethex+0x120>
 8008ede:	b104      	cbz	r4, 8008ee2 <__gethex+0xe6>
 8008ee0:	4252      	negs	r2, r2
 8008ee2:	4417      	add	r7, r2
 8008ee4:	f8ca 1000 	str.w	r1, [sl]
 8008ee8:	b1ed      	cbz	r5, 8008f26 <__gethex+0x12a>
 8008eea:	f1bb 0f00 	cmp.w	fp, #0
 8008eee:	bf0c      	ite	eq
 8008ef0:	2506      	moveq	r5, #6
 8008ef2:	2500      	movne	r5, #0
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	b005      	add	sp, #20
 8008ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efc:	2500      	movs	r5, #0
 8008efe:	462c      	mov	r4, r5
 8008f00:	e7b0      	b.n	8008e64 <__gethex+0x68>
 8008f02:	2c00      	cmp	r4, #0
 8008f04:	d1c7      	bne.n	8008e96 <__gethex+0x9a>
 8008f06:	4627      	mov	r7, r4
 8008f08:	e7c7      	b.n	8008e9a <__gethex+0x9e>
 8008f0a:	464e      	mov	r6, r9
 8008f0c:	462f      	mov	r7, r5
 8008f0e:	2501      	movs	r5, #1
 8008f10:	e7c3      	b.n	8008e9a <__gethex+0x9e>
 8008f12:	2400      	movs	r4, #0
 8008f14:	1cb1      	adds	r1, r6, #2
 8008f16:	e7cc      	b.n	8008eb2 <__gethex+0xb6>
 8008f18:	2401      	movs	r4, #1
 8008f1a:	e7fb      	b.n	8008f14 <__gethex+0x118>
 8008f1c:	fb03 0002 	mla	r0, r3, r2, r0
 8008f20:	e7ce      	b.n	8008ec0 <__gethex+0xc4>
 8008f22:	4631      	mov	r1, r6
 8008f24:	e7de      	b.n	8008ee4 <__gethex+0xe8>
 8008f26:	eba6 0309 	sub.w	r3, r6, r9
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	2b07      	cmp	r3, #7
 8008f30:	dc0a      	bgt.n	8008f48 <__gethex+0x14c>
 8008f32:	9801      	ldr	r0, [sp, #4]
 8008f34:	f000 fafc 	bl	8009530 <_Balloc>
 8008f38:	4604      	mov	r4, r0
 8008f3a:	b940      	cbnz	r0, 8008f4e <__gethex+0x152>
 8008f3c:	4b5c      	ldr	r3, [pc, #368]	@ (80090b0 <__gethex+0x2b4>)
 8008f3e:	4602      	mov	r2, r0
 8008f40:	21e4      	movs	r1, #228	@ 0xe4
 8008f42:	485c      	ldr	r0, [pc, #368]	@ (80090b4 <__gethex+0x2b8>)
 8008f44:	f001 f9d8 	bl	800a2f8 <__assert_func>
 8008f48:	3101      	adds	r1, #1
 8008f4a:	105b      	asrs	r3, r3, #1
 8008f4c:	e7ef      	b.n	8008f2e <__gethex+0x132>
 8008f4e:	f100 0a14 	add.w	sl, r0, #20
 8008f52:	2300      	movs	r3, #0
 8008f54:	4655      	mov	r5, sl
 8008f56:	469b      	mov	fp, r3
 8008f58:	45b1      	cmp	r9, r6
 8008f5a:	d337      	bcc.n	8008fcc <__gethex+0x1d0>
 8008f5c:	f845 bb04 	str.w	fp, [r5], #4
 8008f60:	eba5 050a 	sub.w	r5, r5, sl
 8008f64:	10ad      	asrs	r5, r5, #2
 8008f66:	6125      	str	r5, [r4, #16]
 8008f68:	4658      	mov	r0, fp
 8008f6a:	f000 fbd3 	bl	8009714 <__hi0bits>
 8008f6e:	016d      	lsls	r5, r5, #5
 8008f70:	f8d8 6000 	ldr.w	r6, [r8]
 8008f74:	1a2d      	subs	r5, r5, r0
 8008f76:	42b5      	cmp	r5, r6
 8008f78:	dd54      	ble.n	8009024 <__gethex+0x228>
 8008f7a:	1bad      	subs	r5, r5, r6
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f000 ff5f 	bl	8009e42 <__any_on>
 8008f84:	4681      	mov	r9, r0
 8008f86:	b178      	cbz	r0, 8008fa8 <__gethex+0x1ac>
 8008f88:	1e6b      	subs	r3, r5, #1
 8008f8a:	1159      	asrs	r1, r3, #5
 8008f8c:	f003 021f 	and.w	r2, r3, #31
 8008f90:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008f94:	f04f 0901 	mov.w	r9, #1
 8008f98:	fa09 f202 	lsl.w	r2, r9, r2
 8008f9c:	420a      	tst	r2, r1
 8008f9e:	d003      	beq.n	8008fa8 <__gethex+0x1ac>
 8008fa0:	454b      	cmp	r3, r9
 8008fa2:	dc36      	bgt.n	8009012 <__gethex+0x216>
 8008fa4:	f04f 0902 	mov.w	r9, #2
 8008fa8:	4629      	mov	r1, r5
 8008faa:	4620      	mov	r0, r4
 8008fac:	f7ff febe 	bl	8008d2c <rshift>
 8008fb0:	442f      	add	r7, r5
 8008fb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fb6:	42bb      	cmp	r3, r7
 8008fb8:	da42      	bge.n	8009040 <__gethex+0x244>
 8008fba:	9801      	ldr	r0, [sp, #4]
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	f000 faf7 	bl	80095b0 <_Bfree>
 8008fc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	6013      	str	r3, [r2, #0]
 8008fc8:	25a3      	movs	r5, #163	@ 0xa3
 8008fca:	e793      	b.n	8008ef4 <__gethex+0xf8>
 8008fcc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008fd0:	2a2e      	cmp	r2, #46	@ 0x2e
 8008fd2:	d012      	beq.n	8008ffa <__gethex+0x1fe>
 8008fd4:	2b20      	cmp	r3, #32
 8008fd6:	d104      	bne.n	8008fe2 <__gethex+0x1e6>
 8008fd8:	f845 bb04 	str.w	fp, [r5], #4
 8008fdc:	f04f 0b00 	mov.w	fp, #0
 8008fe0:	465b      	mov	r3, fp
 8008fe2:	7830      	ldrb	r0, [r6, #0]
 8008fe4:	9303      	str	r3, [sp, #12]
 8008fe6:	f7ff fef3 	bl	8008dd0 <__hexdig_fun>
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	f000 000f 	and.w	r0, r0, #15
 8008ff0:	4098      	lsls	r0, r3
 8008ff2:	ea4b 0b00 	orr.w	fp, fp, r0
 8008ff6:	3304      	adds	r3, #4
 8008ff8:	e7ae      	b.n	8008f58 <__gethex+0x15c>
 8008ffa:	45b1      	cmp	r9, r6
 8008ffc:	d8ea      	bhi.n	8008fd4 <__gethex+0x1d8>
 8008ffe:	492b      	ldr	r1, [pc, #172]	@ (80090ac <__gethex+0x2b0>)
 8009000:	9303      	str	r3, [sp, #12]
 8009002:	2201      	movs	r2, #1
 8009004:	4630      	mov	r0, r6
 8009006:	f7fe ff4c 	bl	8007ea2 <strncmp>
 800900a:	9b03      	ldr	r3, [sp, #12]
 800900c:	2800      	cmp	r0, #0
 800900e:	d1e1      	bne.n	8008fd4 <__gethex+0x1d8>
 8009010:	e7a2      	b.n	8008f58 <__gethex+0x15c>
 8009012:	1ea9      	subs	r1, r5, #2
 8009014:	4620      	mov	r0, r4
 8009016:	f000 ff14 	bl	8009e42 <__any_on>
 800901a:	2800      	cmp	r0, #0
 800901c:	d0c2      	beq.n	8008fa4 <__gethex+0x1a8>
 800901e:	f04f 0903 	mov.w	r9, #3
 8009022:	e7c1      	b.n	8008fa8 <__gethex+0x1ac>
 8009024:	da09      	bge.n	800903a <__gethex+0x23e>
 8009026:	1b75      	subs	r5, r6, r5
 8009028:	4621      	mov	r1, r4
 800902a:	9801      	ldr	r0, [sp, #4]
 800902c:	462a      	mov	r2, r5
 800902e:	f000 fccf 	bl	80099d0 <__lshift>
 8009032:	1b7f      	subs	r7, r7, r5
 8009034:	4604      	mov	r4, r0
 8009036:	f100 0a14 	add.w	sl, r0, #20
 800903a:	f04f 0900 	mov.w	r9, #0
 800903e:	e7b8      	b.n	8008fb2 <__gethex+0x1b6>
 8009040:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009044:	42bd      	cmp	r5, r7
 8009046:	dd6f      	ble.n	8009128 <__gethex+0x32c>
 8009048:	1bed      	subs	r5, r5, r7
 800904a:	42ae      	cmp	r6, r5
 800904c:	dc34      	bgt.n	80090b8 <__gethex+0x2bc>
 800904e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009052:	2b02      	cmp	r3, #2
 8009054:	d022      	beq.n	800909c <__gethex+0x2a0>
 8009056:	2b03      	cmp	r3, #3
 8009058:	d024      	beq.n	80090a4 <__gethex+0x2a8>
 800905a:	2b01      	cmp	r3, #1
 800905c:	d115      	bne.n	800908a <__gethex+0x28e>
 800905e:	42ae      	cmp	r6, r5
 8009060:	d113      	bne.n	800908a <__gethex+0x28e>
 8009062:	2e01      	cmp	r6, #1
 8009064:	d10b      	bne.n	800907e <__gethex+0x282>
 8009066:	9a02      	ldr	r2, [sp, #8]
 8009068:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	2301      	movs	r3, #1
 8009070:	6123      	str	r3, [r4, #16]
 8009072:	f8ca 3000 	str.w	r3, [sl]
 8009076:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009078:	2562      	movs	r5, #98	@ 0x62
 800907a:	601c      	str	r4, [r3, #0]
 800907c:	e73a      	b.n	8008ef4 <__gethex+0xf8>
 800907e:	1e71      	subs	r1, r6, #1
 8009080:	4620      	mov	r0, r4
 8009082:	f000 fede 	bl	8009e42 <__any_on>
 8009086:	2800      	cmp	r0, #0
 8009088:	d1ed      	bne.n	8009066 <__gethex+0x26a>
 800908a:	9801      	ldr	r0, [sp, #4]
 800908c:	4621      	mov	r1, r4
 800908e:	f000 fa8f 	bl	80095b0 <_Bfree>
 8009092:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009094:	2300      	movs	r3, #0
 8009096:	6013      	str	r3, [r2, #0]
 8009098:	2550      	movs	r5, #80	@ 0x50
 800909a:	e72b      	b.n	8008ef4 <__gethex+0xf8>
 800909c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1f3      	bne.n	800908a <__gethex+0x28e>
 80090a2:	e7e0      	b.n	8009066 <__gethex+0x26a>
 80090a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1dd      	bne.n	8009066 <__gethex+0x26a>
 80090aa:	e7ee      	b.n	800908a <__gethex+0x28e>
 80090ac:	0800a98c 	.word	0x0800a98c
 80090b0:	0800aa46 	.word	0x0800aa46
 80090b4:	0800aa57 	.word	0x0800aa57
 80090b8:	1e6f      	subs	r7, r5, #1
 80090ba:	f1b9 0f00 	cmp.w	r9, #0
 80090be:	d130      	bne.n	8009122 <__gethex+0x326>
 80090c0:	b127      	cbz	r7, 80090cc <__gethex+0x2d0>
 80090c2:	4639      	mov	r1, r7
 80090c4:	4620      	mov	r0, r4
 80090c6:	f000 febc 	bl	8009e42 <__any_on>
 80090ca:	4681      	mov	r9, r0
 80090cc:	117a      	asrs	r2, r7, #5
 80090ce:	2301      	movs	r3, #1
 80090d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80090d4:	f007 071f 	and.w	r7, r7, #31
 80090d8:	40bb      	lsls	r3, r7
 80090da:	4213      	tst	r3, r2
 80090dc:	4629      	mov	r1, r5
 80090de:	4620      	mov	r0, r4
 80090e0:	bf18      	it	ne
 80090e2:	f049 0902 	orrne.w	r9, r9, #2
 80090e6:	f7ff fe21 	bl	8008d2c <rshift>
 80090ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80090ee:	1b76      	subs	r6, r6, r5
 80090f0:	2502      	movs	r5, #2
 80090f2:	f1b9 0f00 	cmp.w	r9, #0
 80090f6:	d047      	beq.n	8009188 <__gethex+0x38c>
 80090f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	d015      	beq.n	800912c <__gethex+0x330>
 8009100:	2b03      	cmp	r3, #3
 8009102:	d017      	beq.n	8009134 <__gethex+0x338>
 8009104:	2b01      	cmp	r3, #1
 8009106:	d109      	bne.n	800911c <__gethex+0x320>
 8009108:	f019 0f02 	tst.w	r9, #2
 800910c:	d006      	beq.n	800911c <__gethex+0x320>
 800910e:	f8da 3000 	ldr.w	r3, [sl]
 8009112:	ea49 0903 	orr.w	r9, r9, r3
 8009116:	f019 0f01 	tst.w	r9, #1
 800911a:	d10e      	bne.n	800913a <__gethex+0x33e>
 800911c:	f045 0510 	orr.w	r5, r5, #16
 8009120:	e032      	b.n	8009188 <__gethex+0x38c>
 8009122:	f04f 0901 	mov.w	r9, #1
 8009126:	e7d1      	b.n	80090cc <__gethex+0x2d0>
 8009128:	2501      	movs	r5, #1
 800912a:	e7e2      	b.n	80090f2 <__gethex+0x2f6>
 800912c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800912e:	f1c3 0301 	rsb	r3, r3, #1
 8009132:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0f0      	beq.n	800911c <__gethex+0x320>
 800913a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800913e:	f104 0314 	add.w	r3, r4, #20
 8009142:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009146:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800914a:	f04f 0c00 	mov.w	ip, #0
 800914e:	4618      	mov	r0, r3
 8009150:	f853 2b04 	ldr.w	r2, [r3], #4
 8009154:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009158:	d01b      	beq.n	8009192 <__gethex+0x396>
 800915a:	3201      	adds	r2, #1
 800915c:	6002      	str	r2, [r0, #0]
 800915e:	2d02      	cmp	r5, #2
 8009160:	f104 0314 	add.w	r3, r4, #20
 8009164:	d13c      	bne.n	80091e0 <__gethex+0x3e4>
 8009166:	f8d8 2000 	ldr.w	r2, [r8]
 800916a:	3a01      	subs	r2, #1
 800916c:	42b2      	cmp	r2, r6
 800916e:	d109      	bne.n	8009184 <__gethex+0x388>
 8009170:	1171      	asrs	r1, r6, #5
 8009172:	2201      	movs	r2, #1
 8009174:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009178:	f006 061f 	and.w	r6, r6, #31
 800917c:	fa02 f606 	lsl.w	r6, r2, r6
 8009180:	421e      	tst	r6, r3
 8009182:	d13a      	bne.n	80091fa <__gethex+0x3fe>
 8009184:	f045 0520 	orr.w	r5, r5, #32
 8009188:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800918a:	601c      	str	r4, [r3, #0]
 800918c:	9b02      	ldr	r3, [sp, #8]
 800918e:	601f      	str	r7, [r3, #0]
 8009190:	e6b0      	b.n	8008ef4 <__gethex+0xf8>
 8009192:	4299      	cmp	r1, r3
 8009194:	f843 cc04 	str.w	ip, [r3, #-4]
 8009198:	d8d9      	bhi.n	800914e <__gethex+0x352>
 800919a:	68a3      	ldr	r3, [r4, #8]
 800919c:	459b      	cmp	fp, r3
 800919e:	db17      	blt.n	80091d0 <__gethex+0x3d4>
 80091a0:	6861      	ldr	r1, [r4, #4]
 80091a2:	9801      	ldr	r0, [sp, #4]
 80091a4:	3101      	adds	r1, #1
 80091a6:	f000 f9c3 	bl	8009530 <_Balloc>
 80091aa:	4681      	mov	r9, r0
 80091ac:	b918      	cbnz	r0, 80091b6 <__gethex+0x3ba>
 80091ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009218 <__gethex+0x41c>)
 80091b0:	4602      	mov	r2, r0
 80091b2:	2184      	movs	r1, #132	@ 0x84
 80091b4:	e6c5      	b.n	8008f42 <__gethex+0x146>
 80091b6:	6922      	ldr	r2, [r4, #16]
 80091b8:	3202      	adds	r2, #2
 80091ba:	f104 010c 	add.w	r1, r4, #12
 80091be:	0092      	lsls	r2, r2, #2
 80091c0:	300c      	adds	r0, #12
 80091c2:	f7fe fef8 	bl	8007fb6 <memcpy>
 80091c6:	4621      	mov	r1, r4
 80091c8:	9801      	ldr	r0, [sp, #4]
 80091ca:	f000 f9f1 	bl	80095b0 <_Bfree>
 80091ce:	464c      	mov	r4, r9
 80091d0:	6923      	ldr	r3, [r4, #16]
 80091d2:	1c5a      	adds	r2, r3, #1
 80091d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80091d8:	6122      	str	r2, [r4, #16]
 80091da:	2201      	movs	r2, #1
 80091dc:	615a      	str	r2, [r3, #20]
 80091de:	e7be      	b.n	800915e <__gethex+0x362>
 80091e0:	6922      	ldr	r2, [r4, #16]
 80091e2:	455a      	cmp	r2, fp
 80091e4:	dd0b      	ble.n	80091fe <__gethex+0x402>
 80091e6:	2101      	movs	r1, #1
 80091e8:	4620      	mov	r0, r4
 80091ea:	f7ff fd9f 	bl	8008d2c <rshift>
 80091ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80091f2:	3701      	adds	r7, #1
 80091f4:	42bb      	cmp	r3, r7
 80091f6:	f6ff aee0 	blt.w	8008fba <__gethex+0x1be>
 80091fa:	2501      	movs	r5, #1
 80091fc:	e7c2      	b.n	8009184 <__gethex+0x388>
 80091fe:	f016 061f 	ands.w	r6, r6, #31
 8009202:	d0fa      	beq.n	80091fa <__gethex+0x3fe>
 8009204:	4453      	add	r3, sl
 8009206:	f1c6 0620 	rsb	r6, r6, #32
 800920a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800920e:	f000 fa81 	bl	8009714 <__hi0bits>
 8009212:	42b0      	cmp	r0, r6
 8009214:	dbe7      	blt.n	80091e6 <__gethex+0x3ea>
 8009216:	e7f0      	b.n	80091fa <__gethex+0x3fe>
 8009218:	0800aa46 	.word	0x0800aa46

0800921c <L_shift>:
 800921c:	f1c2 0208 	rsb	r2, r2, #8
 8009220:	0092      	lsls	r2, r2, #2
 8009222:	b570      	push	{r4, r5, r6, lr}
 8009224:	f1c2 0620 	rsb	r6, r2, #32
 8009228:	6843      	ldr	r3, [r0, #4]
 800922a:	6804      	ldr	r4, [r0, #0]
 800922c:	fa03 f506 	lsl.w	r5, r3, r6
 8009230:	432c      	orrs	r4, r5
 8009232:	40d3      	lsrs	r3, r2
 8009234:	6004      	str	r4, [r0, #0]
 8009236:	f840 3f04 	str.w	r3, [r0, #4]!
 800923a:	4288      	cmp	r0, r1
 800923c:	d3f4      	bcc.n	8009228 <L_shift+0xc>
 800923e:	bd70      	pop	{r4, r5, r6, pc}

08009240 <__match>:
 8009240:	b530      	push	{r4, r5, lr}
 8009242:	6803      	ldr	r3, [r0, #0]
 8009244:	3301      	adds	r3, #1
 8009246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800924a:	b914      	cbnz	r4, 8009252 <__match+0x12>
 800924c:	6003      	str	r3, [r0, #0]
 800924e:	2001      	movs	r0, #1
 8009250:	bd30      	pop	{r4, r5, pc}
 8009252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009256:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800925a:	2d19      	cmp	r5, #25
 800925c:	bf98      	it	ls
 800925e:	3220      	addls	r2, #32
 8009260:	42a2      	cmp	r2, r4
 8009262:	d0f0      	beq.n	8009246 <__match+0x6>
 8009264:	2000      	movs	r0, #0
 8009266:	e7f3      	b.n	8009250 <__match+0x10>

08009268 <__hexnan>:
 8009268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800926c:	680b      	ldr	r3, [r1, #0]
 800926e:	6801      	ldr	r1, [r0, #0]
 8009270:	115e      	asrs	r6, r3, #5
 8009272:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009276:	f013 031f 	ands.w	r3, r3, #31
 800927a:	b087      	sub	sp, #28
 800927c:	bf18      	it	ne
 800927e:	3604      	addne	r6, #4
 8009280:	2500      	movs	r5, #0
 8009282:	1f37      	subs	r7, r6, #4
 8009284:	4682      	mov	sl, r0
 8009286:	4690      	mov	r8, r2
 8009288:	9301      	str	r3, [sp, #4]
 800928a:	f846 5c04 	str.w	r5, [r6, #-4]
 800928e:	46b9      	mov	r9, r7
 8009290:	463c      	mov	r4, r7
 8009292:	9502      	str	r5, [sp, #8]
 8009294:	46ab      	mov	fp, r5
 8009296:	784a      	ldrb	r2, [r1, #1]
 8009298:	1c4b      	adds	r3, r1, #1
 800929a:	9303      	str	r3, [sp, #12]
 800929c:	b342      	cbz	r2, 80092f0 <__hexnan+0x88>
 800929e:	4610      	mov	r0, r2
 80092a0:	9105      	str	r1, [sp, #20]
 80092a2:	9204      	str	r2, [sp, #16]
 80092a4:	f7ff fd94 	bl	8008dd0 <__hexdig_fun>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d151      	bne.n	8009350 <__hexnan+0xe8>
 80092ac:	9a04      	ldr	r2, [sp, #16]
 80092ae:	9905      	ldr	r1, [sp, #20]
 80092b0:	2a20      	cmp	r2, #32
 80092b2:	d818      	bhi.n	80092e6 <__hexnan+0x7e>
 80092b4:	9b02      	ldr	r3, [sp, #8]
 80092b6:	459b      	cmp	fp, r3
 80092b8:	dd13      	ble.n	80092e2 <__hexnan+0x7a>
 80092ba:	454c      	cmp	r4, r9
 80092bc:	d206      	bcs.n	80092cc <__hexnan+0x64>
 80092be:	2d07      	cmp	r5, #7
 80092c0:	dc04      	bgt.n	80092cc <__hexnan+0x64>
 80092c2:	462a      	mov	r2, r5
 80092c4:	4649      	mov	r1, r9
 80092c6:	4620      	mov	r0, r4
 80092c8:	f7ff ffa8 	bl	800921c <L_shift>
 80092cc:	4544      	cmp	r4, r8
 80092ce:	d952      	bls.n	8009376 <__hexnan+0x10e>
 80092d0:	2300      	movs	r3, #0
 80092d2:	f1a4 0904 	sub.w	r9, r4, #4
 80092d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80092da:	f8cd b008 	str.w	fp, [sp, #8]
 80092de:	464c      	mov	r4, r9
 80092e0:	461d      	mov	r5, r3
 80092e2:	9903      	ldr	r1, [sp, #12]
 80092e4:	e7d7      	b.n	8009296 <__hexnan+0x2e>
 80092e6:	2a29      	cmp	r2, #41	@ 0x29
 80092e8:	d157      	bne.n	800939a <__hexnan+0x132>
 80092ea:	3102      	adds	r1, #2
 80092ec:	f8ca 1000 	str.w	r1, [sl]
 80092f0:	f1bb 0f00 	cmp.w	fp, #0
 80092f4:	d051      	beq.n	800939a <__hexnan+0x132>
 80092f6:	454c      	cmp	r4, r9
 80092f8:	d206      	bcs.n	8009308 <__hexnan+0xa0>
 80092fa:	2d07      	cmp	r5, #7
 80092fc:	dc04      	bgt.n	8009308 <__hexnan+0xa0>
 80092fe:	462a      	mov	r2, r5
 8009300:	4649      	mov	r1, r9
 8009302:	4620      	mov	r0, r4
 8009304:	f7ff ff8a 	bl	800921c <L_shift>
 8009308:	4544      	cmp	r4, r8
 800930a:	d936      	bls.n	800937a <__hexnan+0x112>
 800930c:	f1a8 0204 	sub.w	r2, r8, #4
 8009310:	4623      	mov	r3, r4
 8009312:	f853 1b04 	ldr.w	r1, [r3], #4
 8009316:	f842 1f04 	str.w	r1, [r2, #4]!
 800931a:	429f      	cmp	r7, r3
 800931c:	d2f9      	bcs.n	8009312 <__hexnan+0xaa>
 800931e:	1b3b      	subs	r3, r7, r4
 8009320:	f023 0303 	bic.w	r3, r3, #3
 8009324:	3304      	adds	r3, #4
 8009326:	3401      	adds	r4, #1
 8009328:	3e03      	subs	r6, #3
 800932a:	42b4      	cmp	r4, r6
 800932c:	bf88      	it	hi
 800932e:	2304      	movhi	r3, #4
 8009330:	4443      	add	r3, r8
 8009332:	2200      	movs	r2, #0
 8009334:	f843 2b04 	str.w	r2, [r3], #4
 8009338:	429f      	cmp	r7, r3
 800933a:	d2fb      	bcs.n	8009334 <__hexnan+0xcc>
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	b91b      	cbnz	r3, 8009348 <__hexnan+0xe0>
 8009340:	4547      	cmp	r7, r8
 8009342:	d128      	bne.n	8009396 <__hexnan+0x12e>
 8009344:	2301      	movs	r3, #1
 8009346:	603b      	str	r3, [r7, #0]
 8009348:	2005      	movs	r0, #5
 800934a:	b007      	add	sp, #28
 800934c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009350:	3501      	adds	r5, #1
 8009352:	2d08      	cmp	r5, #8
 8009354:	f10b 0b01 	add.w	fp, fp, #1
 8009358:	dd06      	ble.n	8009368 <__hexnan+0x100>
 800935a:	4544      	cmp	r4, r8
 800935c:	d9c1      	bls.n	80092e2 <__hexnan+0x7a>
 800935e:	2300      	movs	r3, #0
 8009360:	f844 3c04 	str.w	r3, [r4, #-4]
 8009364:	2501      	movs	r5, #1
 8009366:	3c04      	subs	r4, #4
 8009368:	6822      	ldr	r2, [r4, #0]
 800936a:	f000 000f 	and.w	r0, r0, #15
 800936e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009372:	6020      	str	r0, [r4, #0]
 8009374:	e7b5      	b.n	80092e2 <__hexnan+0x7a>
 8009376:	2508      	movs	r5, #8
 8009378:	e7b3      	b.n	80092e2 <__hexnan+0x7a>
 800937a:	9b01      	ldr	r3, [sp, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d0dd      	beq.n	800933c <__hexnan+0xd4>
 8009380:	f1c3 0320 	rsb	r3, r3, #32
 8009384:	f04f 32ff 	mov.w	r2, #4294967295
 8009388:	40da      	lsrs	r2, r3
 800938a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800938e:	4013      	ands	r3, r2
 8009390:	f846 3c04 	str.w	r3, [r6, #-4]
 8009394:	e7d2      	b.n	800933c <__hexnan+0xd4>
 8009396:	3f04      	subs	r7, #4
 8009398:	e7d0      	b.n	800933c <__hexnan+0xd4>
 800939a:	2004      	movs	r0, #4
 800939c:	e7d5      	b.n	800934a <__hexnan+0xe2>
	...

080093a0 <malloc>:
 80093a0:	4b02      	ldr	r3, [pc, #8]	@ (80093ac <malloc+0xc>)
 80093a2:	4601      	mov	r1, r0
 80093a4:	6818      	ldr	r0, [r3, #0]
 80093a6:	f000 b825 	b.w	80093f4 <_malloc_r>
 80093aa:	bf00      	nop
 80093ac:	20000198 	.word	0x20000198

080093b0 <sbrk_aligned>:
 80093b0:	b570      	push	{r4, r5, r6, lr}
 80093b2:	4e0f      	ldr	r6, [pc, #60]	@ (80093f0 <sbrk_aligned+0x40>)
 80093b4:	460c      	mov	r4, r1
 80093b6:	6831      	ldr	r1, [r6, #0]
 80093b8:	4605      	mov	r5, r0
 80093ba:	b911      	cbnz	r1, 80093c2 <sbrk_aligned+0x12>
 80093bc:	f000 ff8c 	bl	800a2d8 <_sbrk_r>
 80093c0:	6030      	str	r0, [r6, #0]
 80093c2:	4621      	mov	r1, r4
 80093c4:	4628      	mov	r0, r5
 80093c6:	f000 ff87 	bl	800a2d8 <_sbrk_r>
 80093ca:	1c43      	adds	r3, r0, #1
 80093cc:	d103      	bne.n	80093d6 <sbrk_aligned+0x26>
 80093ce:	f04f 34ff 	mov.w	r4, #4294967295
 80093d2:	4620      	mov	r0, r4
 80093d4:	bd70      	pop	{r4, r5, r6, pc}
 80093d6:	1cc4      	adds	r4, r0, #3
 80093d8:	f024 0403 	bic.w	r4, r4, #3
 80093dc:	42a0      	cmp	r0, r4
 80093de:	d0f8      	beq.n	80093d2 <sbrk_aligned+0x22>
 80093e0:	1a21      	subs	r1, r4, r0
 80093e2:	4628      	mov	r0, r5
 80093e4:	f000 ff78 	bl	800a2d8 <_sbrk_r>
 80093e8:	3001      	adds	r0, #1
 80093ea:	d1f2      	bne.n	80093d2 <sbrk_aligned+0x22>
 80093ec:	e7ef      	b.n	80093ce <sbrk_aligned+0x1e>
 80093ee:	bf00      	nop
 80093f0:	200005e8 	.word	0x200005e8

080093f4 <_malloc_r>:
 80093f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093f8:	1ccd      	adds	r5, r1, #3
 80093fa:	f025 0503 	bic.w	r5, r5, #3
 80093fe:	3508      	adds	r5, #8
 8009400:	2d0c      	cmp	r5, #12
 8009402:	bf38      	it	cc
 8009404:	250c      	movcc	r5, #12
 8009406:	2d00      	cmp	r5, #0
 8009408:	4606      	mov	r6, r0
 800940a:	db01      	blt.n	8009410 <_malloc_r+0x1c>
 800940c:	42a9      	cmp	r1, r5
 800940e:	d904      	bls.n	800941a <_malloc_r+0x26>
 8009410:	230c      	movs	r3, #12
 8009412:	6033      	str	r3, [r6, #0]
 8009414:	2000      	movs	r0, #0
 8009416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800941a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80094f0 <_malloc_r+0xfc>
 800941e:	f000 f87b 	bl	8009518 <__malloc_lock>
 8009422:	f8d8 3000 	ldr.w	r3, [r8]
 8009426:	461c      	mov	r4, r3
 8009428:	bb44      	cbnz	r4, 800947c <_malloc_r+0x88>
 800942a:	4629      	mov	r1, r5
 800942c:	4630      	mov	r0, r6
 800942e:	f7ff ffbf 	bl	80093b0 <sbrk_aligned>
 8009432:	1c43      	adds	r3, r0, #1
 8009434:	4604      	mov	r4, r0
 8009436:	d158      	bne.n	80094ea <_malloc_r+0xf6>
 8009438:	f8d8 4000 	ldr.w	r4, [r8]
 800943c:	4627      	mov	r7, r4
 800943e:	2f00      	cmp	r7, #0
 8009440:	d143      	bne.n	80094ca <_malloc_r+0xd6>
 8009442:	2c00      	cmp	r4, #0
 8009444:	d04b      	beq.n	80094de <_malloc_r+0xea>
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	4639      	mov	r1, r7
 800944a:	4630      	mov	r0, r6
 800944c:	eb04 0903 	add.w	r9, r4, r3
 8009450:	f000 ff42 	bl	800a2d8 <_sbrk_r>
 8009454:	4581      	cmp	r9, r0
 8009456:	d142      	bne.n	80094de <_malloc_r+0xea>
 8009458:	6821      	ldr	r1, [r4, #0]
 800945a:	1a6d      	subs	r5, r5, r1
 800945c:	4629      	mov	r1, r5
 800945e:	4630      	mov	r0, r6
 8009460:	f7ff ffa6 	bl	80093b0 <sbrk_aligned>
 8009464:	3001      	adds	r0, #1
 8009466:	d03a      	beq.n	80094de <_malloc_r+0xea>
 8009468:	6823      	ldr	r3, [r4, #0]
 800946a:	442b      	add	r3, r5
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	f8d8 3000 	ldr.w	r3, [r8]
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	bb62      	cbnz	r2, 80094d0 <_malloc_r+0xdc>
 8009476:	f8c8 7000 	str.w	r7, [r8]
 800947a:	e00f      	b.n	800949c <_malloc_r+0xa8>
 800947c:	6822      	ldr	r2, [r4, #0]
 800947e:	1b52      	subs	r2, r2, r5
 8009480:	d420      	bmi.n	80094c4 <_malloc_r+0xd0>
 8009482:	2a0b      	cmp	r2, #11
 8009484:	d917      	bls.n	80094b6 <_malloc_r+0xc2>
 8009486:	1961      	adds	r1, r4, r5
 8009488:	42a3      	cmp	r3, r4
 800948a:	6025      	str	r5, [r4, #0]
 800948c:	bf18      	it	ne
 800948e:	6059      	strne	r1, [r3, #4]
 8009490:	6863      	ldr	r3, [r4, #4]
 8009492:	bf08      	it	eq
 8009494:	f8c8 1000 	streq.w	r1, [r8]
 8009498:	5162      	str	r2, [r4, r5]
 800949a:	604b      	str	r3, [r1, #4]
 800949c:	4630      	mov	r0, r6
 800949e:	f000 f841 	bl	8009524 <__malloc_unlock>
 80094a2:	f104 000b 	add.w	r0, r4, #11
 80094a6:	1d23      	adds	r3, r4, #4
 80094a8:	f020 0007 	bic.w	r0, r0, #7
 80094ac:	1ac2      	subs	r2, r0, r3
 80094ae:	bf1c      	itt	ne
 80094b0:	1a1b      	subne	r3, r3, r0
 80094b2:	50a3      	strne	r3, [r4, r2]
 80094b4:	e7af      	b.n	8009416 <_malloc_r+0x22>
 80094b6:	6862      	ldr	r2, [r4, #4]
 80094b8:	42a3      	cmp	r3, r4
 80094ba:	bf0c      	ite	eq
 80094bc:	f8c8 2000 	streq.w	r2, [r8]
 80094c0:	605a      	strne	r2, [r3, #4]
 80094c2:	e7eb      	b.n	800949c <_malloc_r+0xa8>
 80094c4:	4623      	mov	r3, r4
 80094c6:	6864      	ldr	r4, [r4, #4]
 80094c8:	e7ae      	b.n	8009428 <_malloc_r+0x34>
 80094ca:	463c      	mov	r4, r7
 80094cc:	687f      	ldr	r7, [r7, #4]
 80094ce:	e7b6      	b.n	800943e <_malloc_r+0x4a>
 80094d0:	461a      	mov	r2, r3
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	42a3      	cmp	r3, r4
 80094d6:	d1fb      	bne.n	80094d0 <_malloc_r+0xdc>
 80094d8:	2300      	movs	r3, #0
 80094da:	6053      	str	r3, [r2, #4]
 80094dc:	e7de      	b.n	800949c <_malloc_r+0xa8>
 80094de:	230c      	movs	r3, #12
 80094e0:	6033      	str	r3, [r6, #0]
 80094e2:	4630      	mov	r0, r6
 80094e4:	f000 f81e 	bl	8009524 <__malloc_unlock>
 80094e8:	e794      	b.n	8009414 <_malloc_r+0x20>
 80094ea:	6005      	str	r5, [r0, #0]
 80094ec:	e7d6      	b.n	800949c <_malloc_r+0xa8>
 80094ee:	bf00      	nop
 80094f0:	200005ec 	.word	0x200005ec

080094f4 <__ascii_mbtowc>:
 80094f4:	b082      	sub	sp, #8
 80094f6:	b901      	cbnz	r1, 80094fa <__ascii_mbtowc+0x6>
 80094f8:	a901      	add	r1, sp, #4
 80094fa:	b142      	cbz	r2, 800950e <__ascii_mbtowc+0x1a>
 80094fc:	b14b      	cbz	r3, 8009512 <__ascii_mbtowc+0x1e>
 80094fe:	7813      	ldrb	r3, [r2, #0]
 8009500:	600b      	str	r3, [r1, #0]
 8009502:	7812      	ldrb	r2, [r2, #0]
 8009504:	1e10      	subs	r0, r2, #0
 8009506:	bf18      	it	ne
 8009508:	2001      	movne	r0, #1
 800950a:	b002      	add	sp, #8
 800950c:	4770      	bx	lr
 800950e:	4610      	mov	r0, r2
 8009510:	e7fb      	b.n	800950a <__ascii_mbtowc+0x16>
 8009512:	f06f 0001 	mvn.w	r0, #1
 8009516:	e7f8      	b.n	800950a <__ascii_mbtowc+0x16>

08009518 <__malloc_lock>:
 8009518:	4801      	ldr	r0, [pc, #4]	@ (8009520 <__malloc_lock+0x8>)
 800951a:	f7fe bd4a 	b.w	8007fb2 <__retarget_lock_acquire_recursive>
 800951e:	bf00      	nop
 8009520:	200005e4 	.word	0x200005e4

08009524 <__malloc_unlock>:
 8009524:	4801      	ldr	r0, [pc, #4]	@ (800952c <__malloc_unlock+0x8>)
 8009526:	f7fe bd45 	b.w	8007fb4 <__retarget_lock_release_recursive>
 800952a:	bf00      	nop
 800952c:	200005e4 	.word	0x200005e4

08009530 <_Balloc>:
 8009530:	b570      	push	{r4, r5, r6, lr}
 8009532:	69c6      	ldr	r6, [r0, #28]
 8009534:	4604      	mov	r4, r0
 8009536:	460d      	mov	r5, r1
 8009538:	b976      	cbnz	r6, 8009558 <_Balloc+0x28>
 800953a:	2010      	movs	r0, #16
 800953c:	f7ff ff30 	bl	80093a0 <malloc>
 8009540:	4602      	mov	r2, r0
 8009542:	61e0      	str	r0, [r4, #28]
 8009544:	b920      	cbnz	r0, 8009550 <_Balloc+0x20>
 8009546:	4b18      	ldr	r3, [pc, #96]	@ (80095a8 <_Balloc+0x78>)
 8009548:	4818      	ldr	r0, [pc, #96]	@ (80095ac <_Balloc+0x7c>)
 800954a:	216b      	movs	r1, #107	@ 0x6b
 800954c:	f000 fed4 	bl	800a2f8 <__assert_func>
 8009550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009554:	6006      	str	r6, [r0, #0]
 8009556:	60c6      	str	r6, [r0, #12]
 8009558:	69e6      	ldr	r6, [r4, #28]
 800955a:	68f3      	ldr	r3, [r6, #12]
 800955c:	b183      	cbz	r3, 8009580 <_Balloc+0x50>
 800955e:	69e3      	ldr	r3, [r4, #28]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009566:	b9b8      	cbnz	r0, 8009598 <_Balloc+0x68>
 8009568:	2101      	movs	r1, #1
 800956a:	fa01 f605 	lsl.w	r6, r1, r5
 800956e:	1d72      	adds	r2, r6, #5
 8009570:	0092      	lsls	r2, r2, #2
 8009572:	4620      	mov	r0, r4
 8009574:	f000 fede 	bl	800a334 <_calloc_r>
 8009578:	b160      	cbz	r0, 8009594 <_Balloc+0x64>
 800957a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800957e:	e00e      	b.n	800959e <_Balloc+0x6e>
 8009580:	2221      	movs	r2, #33	@ 0x21
 8009582:	2104      	movs	r1, #4
 8009584:	4620      	mov	r0, r4
 8009586:	f000 fed5 	bl	800a334 <_calloc_r>
 800958a:	69e3      	ldr	r3, [r4, #28]
 800958c:	60f0      	str	r0, [r6, #12]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1e4      	bne.n	800955e <_Balloc+0x2e>
 8009594:	2000      	movs	r0, #0
 8009596:	bd70      	pop	{r4, r5, r6, pc}
 8009598:	6802      	ldr	r2, [r0, #0]
 800959a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800959e:	2300      	movs	r3, #0
 80095a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80095a4:	e7f7      	b.n	8009596 <_Balloc+0x66>
 80095a6:	bf00      	nop
 80095a8:	0800a9d7 	.word	0x0800a9d7
 80095ac:	0800aab7 	.word	0x0800aab7

080095b0 <_Bfree>:
 80095b0:	b570      	push	{r4, r5, r6, lr}
 80095b2:	69c6      	ldr	r6, [r0, #28]
 80095b4:	4605      	mov	r5, r0
 80095b6:	460c      	mov	r4, r1
 80095b8:	b976      	cbnz	r6, 80095d8 <_Bfree+0x28>
 80095ba:	2010      	movs	r0, #16
 80095bc:	f7ff fef0 	bl	80093a0 <malloc>
 80095c0:	4602      	mov	r2, r0
 80095c2:	61e8      	str	r0, [r5, #28]
 80095c4:	b920      	cbnz	r0, 80095d0 <_Bfree+0x20>
 80095c6:	4b09      	ldr	r3, [pc, #36]	@ (80095ec <_Bfree+0x3c>)
 80095c8:	4809      	ldr	r0, [pc, #36]	@ (80095f0 <_Bfree+0x40>)
 80095ca:	218f      	movs	r1, #143	@ 0x8f
 80095cc:	f000 fe94 	bl	800a2f8 <__assert_func>
 80095d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095d4:	6006      	str	r6, [r0, #0]
 80095d6:	60c6      	str	r6, [r0, #12]
 80095d8:	b13c      	cbz	r4, 80095ea <_Bfree+0x3a>
 80095da:	69eb      	ldr	r3, [r5, #28]
 80095dc:	6862      	ldr	r2, [r4, #4]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095e4:	6021      	str	r1, [r4, #0]
 80095e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80095ea:	bd70      	pop	{r4, r5, r6, pc}
 80095ec:	0800a9d7 	.word	0x0800a9d7
 80095f0:	0800aab7 	.word	0x0800aab7

080095f4 <__multadd>:
 80095f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f8:	690d      	ldr	r5, [r1, #16]
 80095fa:	4607      	mov	r7, r0
 80095fc:	460c      	mov	r4, r1
 80095fe:	461e      	mov	r6, r3
 8009600:	f101 0c14 	add.w	ip, r1, #20
 8009604:	2000      	movs	r0, #0
 8009606:	f8dc 3000 	ldr.w	r3, [ip]
 800960a:	b299      	uxth	r1, r3
 800960c:	fb02 6101 	mla	r1, r2, r1, r6
 8009610:	0c1e      	lsrs	r6, r3, #16
 8009612:	0c0b      	lsrs	r3, r1, #16
 8009614:	fb02 3306 	mla	r3, r2, r6, r3
 8009618:	b289      	uxth	r1, r1
 800961a:	3001      	adds	r0, #1
 800961c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009620:	4285      	cmp	r5, r0
 8009622:	f84c 1b04 	str.w	r1, [ip], #4
 8009626:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800962a:	dcec      	bgt.n	8009606 <__multadd+0x12>
 800962c:	b30e      	cbz	r6, 8009672 <__multadd+0x7e>
 800962e:	68a3      	ldr	r3, [r4, #8]
 8009630:	42ab      	cmp	r3, r5
 8009632:	dc19      	bgt.n	8009668 <__multadd+0x74>
 8009634:	6861      	ldr	r1, [r4, #4]
 8009636:	4638      	mov	r0, r7
 8009638:	3101      	adds	r1, #1
 800963a:	f7ff ff79 	bl	8009530 <_Balloc>
 800963e:	4680      	mov	r8, r0
 8009640:	b928      	cbnz	r0, 800964e <__multadd+0x5a>
 8009642:	4602      	mov	r2, r0
 8009644:	4b0c      	ldr	r3, [pc, #48]	@ (8009678 <__multadd+0x84>)
 8009646:	480d      	ldr	r0, [pc, #52]	@ (800967c <__multadd+0x88>)
 8009648:	21ba      	movs	r1, #186	@ 0xba
 800964a:	f000 fe55 	bl	800a2f8 <__assert_func>
 800964e:	6922      	ldr	r2, [r4, #16]
 8009650:	3202      	adds	r2, #2
 8009652:	f104 010c 	add.w	r1, r4, #12
 8009656:	0092      	lsls	r2, r2, #2
 8009658:	300c      	adds	r0, #12
 800965a:	f7fe fcac 	bl	8007fb6 <memcpy>
 800965e:	4621      	mov	r1, r4
 8009660:	4638      	mov	r0, r7
 8009662:	f7ff ffa5 	bl	80095b0 <_Bfree>
 8009666:	4644      	mov	r4, r8
 8009668:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800966c:	3501      	adds	r5, #1
 800966e:	615e      	str	r6, [r3, #20]
 8009670:	6125      	str	r5, [r4, #16]
 8009672:	4620      	mov	r0, r4
 8009674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009678:	0800aa46 	.word	0x0800aa46
 800967c:	0800aab7 	.word	0x0800aab7

08009680 <__s2b>:
 8009680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009684:	460c      	mov	r4, r1
 8009686:	4615      	mov	r5, r2
 8009688:	461f      	mov	r7, r3
 800968a:	2209      	movs	r2, #9
 800968c:	3308      	adds	r3, #8
 800968e:	4606      	mov	r6, r0
 8009690:	fb93 f3f2 	sdiv	r3, r3, r2
 8009694:	2100      	movs	r1, #0
 8009696:	2201      	movs	r2, #1
 8009698:	429a      	cmp	r2, r3
 800969a:	db09      	blt.n	80096b0 <__s2b+0x30>
 800969c:	4630      	mov	r0, r6
 800969e:	f7ff ff47 	bl	8009530 <_Balloc>
 80096a2:	b940      	cbnz	r0, 80096b6 <__s2b+0x36>
 80096a4:	4602      	mov	r2, r0
 80096a6:	4b19      	ldr	r3, [pc, #100]	@ (800970c <__s2b+0x8c>)
 80096a8:	4819      	ldr	r0, [pc, #100]	@ (8009710 <__s2b+0x90>)
 80096aa:	21d3      	movs	r1, #211	@ 0xd3
 80096ac:	f000 fe24 	bl	800a2f8 <__assert_func>
 80096b0:	0052      	lsls	r2, r2, #1
 80096b2:	3101      	adds	r1, #1
 80096b4:	e7f0      	b.n	8009698 <__s2b+0x18>
 80096b6:	9b08      	ldr	r3, [sp, #32]
 80096b8:	6143      	str	r3, [r0, #20]
 80096ba:	2d09      	cmp	r5, #9
 80096bc:	f04f 0301 	mov.w	r3, #1
 80096c0:	6103      	str	r3, [r0, #16]
 80096c2:	dd16      	ble.n	80096f2 <__s2b+0x72>
 80096c4:	f104 0909 	add.w	r9, r4, #9
 80096c8:	46c8      	mov	r8, r9
 80096ca:	442c      	add	r4, r5
 80096cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80096d0:	4601      	mov	r1, r0
 80096d2:	3b30      	subs	r3, #48	@ 0x30
 80096d4:	220a      	movs	r2, #10
 80096d6:	4630      	mov	r0, r6
 80096d8:	f7ff ff8c 	bl	80095f4 <__multadd>
 80096dc:	45a0      	cmp	r8, r4
 80096de:	d1f5      	bne.n	80096cc <__s2b+0x4c>
 80096e0:	f1a5 0408 	sub.w	r4, r5, #8
 80096e4:	444c      	add	r4, r9
 80096e6:	1b2d      	subs	r5, r5, r4
 80096e8:	1963      	adds	r3, r4, r5
 80096ea:	42bb      	cmp	r3, r7
 80096ec:	db04      	blt.n	80096f8 <__s2b+0x78>
 80096ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096f2:	340a      	adds	r4, #10
 80096f4:	2509      	movs	r5, #9
 80096f6:	e7f6      	b.n	80096e6 <__s2b+0x66>
 80096f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80096fc:	4601      	mov	r1, r0
 80096fe:	3b30      	subs	r3, #48	@ 0x30
 8009700:	220a      	movs	r2, #10
 8009702:	4630      	mov	r0, r6
 8009704:	f7ff ff76 	bl	80095f4 <__multadd>
 8009708:	e7ee      	b.n	80096e8 <__s2b+0x68>
 800970a:	bf00      	nop
 800970c:	0800aa46 	.word	0x0800aa46
 8009710:	0800aab7 	.word	0x0800aab7

08009714 <__hi0bits>:
 8009714:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009718:	4603      	mov	r3, r0
 800971a:	bf36      	itet	cc
 800971c:	0403      	lslcc	r3, r0, #16
 800971e:	2000      	movcs	r0, #0
 8009720:	2010      	movcc	r0, #16
 8009722:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009726:	bf3c      	itt	cc
 8009728:	021b      	lslcc	r3, r3, #8
 800972a:	3008      	addcc	r0, #8
 800972c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009730:	bf3c      	itt	cc
 8009732:	011b      	lslcc	r3, r3, #4
 8009734:	3004      	addcc	r0, #4
 8009736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800973a:	bf3c      	itt	cc
 800973c:	009b      	lslcc	r3, r3, #2
 800973e:	3002      	addcc	r0, #2
 8009740:	2b00      	cmp	r3, #0
 8009742:	db05      	blt.n	8009750 <__hi0bits+0x3c>
 8009744:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009748:	f100 0001 	add.w	r0, r0, #1
 800974c:	bf08      	it	eq
 800974e:	2020      	moveq	r0, #32
 8009750:	4770      	bx	lr

08009752 <__lo0bits>:
 8009752:	6803      	ldr	r3, [r0, #0]
 8009754:	4602      	mov	r2, r0
 8009756:	f013 0007 	ands.w	r0, r3, #7
 800975a:	d00b      	beq.n	8009774 <__lo0bits+0x22>
 800975c:	07d9      	lsls	r1, r3, #31
 800975e:	d421      	bmi.n	80097a4 <__lo0bits+0x52>
 8009760:	0798      	lsls	r0, r3, #30
 8009762:	bf49      	itett	mi
 8009764:	085b      	lsrmi	r3, r3, #1
 8009766:	089b      	lsrpl	r3, r3, #2
 8009768:	2001      	movmi	r0, #1
 800976a:	6013      	strmi	r3, [r2, #0]
 800976c:	bf5c      	itt	pl
 800976e:	6013      	strpl	r3, [r2, #0]
 8009770:	2002      	movpl	r0, #2
 8009772:	4770      	bx	lr
 8009774:	b299      	uxth	r1, r3
 8009776:	b909      	cbnz	r1, 800977c <__lo0bits+0x2a>
 8009778:	0c1b      	lsrs	r3, r3, #16
 800977a:	2010      	movs	r0, #16
 800977c:	b2d9      	uxtb	r1, r3
 800977e:	b909      	cbnz	r1, 8009784 <__lo0bits+0x32>
 8009780:	3008      	adds	r0, #8
 8009782:	0a1b      	lsrs	r3, r3, #8
 8009784:	0719      	lsls	r1, r3, #28
 8009786:	bf04      	itt	eq
 8009788:	091b      	lsreq	r3, r3, #4
 800978a:	3004      	addeq	r0, #4
 800978c:	0799      	lsls	r1, r3, #30
 800978e:	bf04      	itt	eq
 8009790:	089b      	lsreq	r3, r3, #2
 8009792:	3002      	addeq	r0, #2
 8009794:	07d9      	lsls	r1, r3, #31
 8009796:	d403      	bmi.n	80097a0 <__lo0bits+0x4e>
 8009798:	085b      	lsrs	r3, r3, #1
 800979a:	f100 0001 	add.w	r0, r0, #1
 800979e:	d003      	beq.n	80097a8 <__lo0bits+0x56>
 80097a0:	6013      	str	r3, [r2, #0]
 80097a2:	4770      	bx	lr
 80097a4:	2000      	movs	r0, #0
 80097a6:	4770      	bx	lr
 80097a8:	2020      	movs	r0, #32
 80097aa:	4770      	bx	lr

080097ac <__i2b>:
 80097ac:	b510      	push	{r4, lr}
 80097ae:	460c      	mov	r4, r1
 80097b0:	2101      	movs	r1, #1
 80097b2:	f7ff febd 	bl	8009530 <_Balloc>
 80097b6:	4602      	mov	r2, r0
 80097b8:	b928      	cbnz	r0, 80097c6 <__i2b+0x1a>
 80097ba:	4b05      	ldr	r3, [pc, #20]	@ (80097d0 <__i2b+0x24>)
 80097bc:	4805      	ldr	r0, [pc, #20]	@ (80097d4 <__i2b+0x28>)
 80097be:	f240 1145 	movw	r1, #325	@ 0x145
 80097c2:	f000 fd99 	bl	800a2f8 <__assert_func>
 80097c6:	2301      	movs	r3, #1
 80097c8:	6144      	str	r4, [r0, #20]
 80097ca:	6103      	str	r3, [r0, #16]
 80097cc:	bd10      	pop	{r4, pc}
 80097ce:	bf00      	nop
 80097d0:	0800aa46 	.word	0x0800aa46
 80097d4:	0800aab7 	.word	0x0800aab7

080097d8 <__multiply>:
 80097d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097dc:	4617      	mov	r7, r2
 80097de:	690a      	ldr	r2, [r1, #16]
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	bfa8      	it	ge
 80097e6:	463b      	movge	r3, r7
 80097e8:	4689      	mov	r9, r1
 80097ea:	bfa4      	itt	ge
 80097ec:	460f      	movge	r7, r1
 80097ee:	4699      	movge	r9, r3
 80097f0:	693d      	ldr	r5, [r7, #16]
 80097f2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	6879      	ldr	r1, [r7, #4]
 80097fa:	eb05 060a 	add.w	r6, r5, sl
 80097fe:	42b3      	cmp	r3, r6
 8009800:	b085      	sub	sp, #20
 8009802:	bfb8      	it	lt
 8009804:	3101      	addlt	r1, #1
 8009806:	f7ff fe93 	bl	8009530 <_Balloc>
 800980a:	b930      	cbnz	r0, 800981a <__multiply+0x42>
 800980c:	4602      	mov	r2, r0
 800980e:	4b41      	ldr	r3, [pc, #260]	@ (8009914 <__multiply+0x13c>)
 8009810:	4841      	ldr	r0, [pc, #260]	@ (8009918 <__multiply+0x140>)
 8009812:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009816:	f000 fd6f 	bl	800a2f8 <__assert_func>
 800981a:	f100 0414 	add.w	r4, r0, #20
 800981e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009822:	4623      	mov	r3, r4
 8009824:	2200      	movs	r2, #0
 8009826:	4573      	cmp	r3, lr
 8009828:	d320      	bcc.n	800986c <__multiply+0x94>
 800982a:	f107 0814 	add.w	r8, r7, #20
 800982e:	f109 0114 	add.w	r1, r9, #20
 8009832:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009836:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800983a:	9302      	str	r3, [sp, #8]
 800983c:	1beb      	subs	r3, r5, r7
 800983e:	3b15      	subs	r3, #21
 8009840:	f023 0303 	bic.w	r3, r3, #3
 8009844:	3304      	adds	r3, #4
 8009846:	3715      	adds	r7, #21
 8009848:	42bd      	cmp	r5, r7
 800984a:	bf38      	it	cc
 800984c:	2304      	movcc	r3, #4
 800984e:	9301      	str	r3, [sp, #4]
 8009850:	9b02      	ldr	r3, [sp, #8]
 8009852:	9103      	str	r1, [sp, #12]
 8009854:	428b      	cmp	r3, r1
 8009856:	d80c      	bhi.n	8009872 <__multiply+0x9a>
 8009858:	2e00      	cmp	r6, #0
 800985a:	dd03      	ble.n	8009864 <__multiply+0x8c>
 800985c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009860:	2b00      	cmp	r3, #0
 8009862:	d055      	beq.n	8009910 <__multiply+0x138>
 8009864:	6106      	str	r6, [r0, #16]
 8009866:	b005      	add	sp, #20
 8009868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986c:	f843 2b04 	str.w	r2, [r3], #4
 8009870:	e7d9      	b.n	8009826 <__multiply+0x4e>
 8009872:	f8b1 a000 	ldrh.w	sl, [r1]
 8009876:	f1ba 0f00 	cmp.w	sl, #0
 800987a:	d01f      	beq.n	80098bc <__multiply+0xe4>
 800987c:	46c4      	mov	ip, r8
 800987e:	46a1      	mov	r9, r4
 8009880:	2700      	movs	r7, #0
 8009882:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009886:	f8d9 3000 	ldr.w	r3, [r9]
 800988a:	fa1f fb82 	uxth.w	fp, r2
 800988e:	b29b      	uxth	r3, r3
 8009890:	fb0a 330b 	mla	r3, sl, fp, r3
 8009894:	443b      	add	r3, r7
 8009896:	f8d9 7000 	ldr.w	r7, [r9]
 800989a:	0c12      	lsrs	r2, r2, #16
 800989c:	0c3f      	lsrs	r7, r7, #16
 800989e:	fb0a 7202 	mla	r2, sl, r2, r7
 80098a2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098ac:	4565      	cmp	r5, ip
 80098ae:	f849 3b04 	str.w	r3, [r9], #4
 80098b2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80098b6:	d8e4      	bhi.n	8009882 <__multiply+0xaa>
 80098b8:	9b01      	ldr	r3, [sp, #4]
 80098ba:	50e7      	str	r7, [r4, r3]
 80098bc:	9b03      	ldr	r3, [sp, #12]
 80098be:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80098c2:	3104      	adds	r1, #4
 80098c4:	f1b9 0f00 	cmp.w	r9, #0
 80098c8:	d020      	beq.n	800990c <__multiply+0x134>
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	4647      	mov	r7, r8
 80098ce:	46a4      	mov	ip, r4
 80098d0:	f04f 0a00 	mov.w	sl, #0
 80098d4:	f8b7 b000 	ldrh.w	fp, [r7]
 80098d8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80098dc:	fb09 220b 	mla	r2, r9, fp, r2
 80098e0:	4452      	add	r2, sl
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098e8:	f84c 3b04 	str.w	r3, [ip], #4
 80098ec:	f857 3b04 	ldr.w	r3, [r7], #4
 80098f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098f4:	f8bc 3000 	ldrh.w	r3, [ip]
 80098f8:	fb09 330a 	mla	r3, r9, sl, r3
 80098fc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009900:	42bd      	cmp	r5, r7
 8009902:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009906:	d8e5      	bhi.n	80098d4 <__multiply+0xfc>
 8009908:	9a01      	ldr	r2, [sp, #4]
 800990a:	50a3      	str	r3, [r4, r2]
 800990c:	3404      	adds	r4, #4
 800990e:	e79f      	b.n	8009850 <__multiply+0x78>
 8009910:	3e01      	subs	r6, #1
 8009912:	e7a1      	b.n	8009858 <__multiply+0x80>
 8009914:	0800aa46 	.word	0x0800aa46
 8009918:	0800aab7 	.word	0x0800aab7

0800991c <__pow5mult>:
 800991c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009920:	4615      	mov	r5, r2
 8009922:	f012 0203 	ands.w	r2, r2, #3
 8009926:	4607      	mov	r7, r0
 8009928:	460e      	mov	r6, r1
 800992a:	d007      	beq.n	800993c <__pow5mult+0x20>
 800992c:	4c25      	ldr	r4, [pc, #148]	@ (80099c4 <__pow5mult+0xa8>)
 800992e:	3a01      	subs	r2, #1
 8009930:	2300      	movs	r3, #0
 8009932:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009936:	f7ff fe5d 	bl	80095f4 <__multadd>
 800993a:	4606      	mov	r6, r0
 800993c:	10ad      	asrs	r5, r5, #2
 800993e:	d03d      	beq.n	80099bc <__pow5mult+0xa0>
 8009940:	69fc      	ldr	r4, [r7, #28]
 8009942:	b97c      	cbnz	r4, 8009964 <__pow5mult+0x48>
 8009944:	2010      	movs	r0, #16
 8009946:	f7ff fd2b 	bl	80093a0 <malloc>
 800994a:	4602      	mov	r2, r0
 800994c:	61f8      	str	r0, [r7, #28]
 800994e:	b928      	cbnz	r0, 800995c <__pow5mult+0x40>
 8009950:	4b1d      	ldr	r3, [pc, #116]	@ (80099c8 <__pow5mult+0xac>)
 8009952:	481e      	ldr	r0, [pc, #120]	@ (80099cc <__pow5mult+0xb0>)
 8009954:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009958:	f000 fcce 	bl	800a2f8 <__assert_func>
 800995c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009960:	6004      	str	r4, [r0, #0]
 8009962:	60c4      	str	r4, [r0, #12]
 8009964:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009968:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800996c:	b94c      	cbnz	r4, 8009982 <__pow5mult+0x66>
 800996e:	f240 2171 	movw	r1, #625	@ 0x271
 8009972:	4638      	mov	r0, r7
 8009974:	f7ff ff1a 	bl	80097ac <__i2b>
 8009978:	2300      	movs	r3, #0
 800997a:	f8c8 0008 	str.w	r0, [r8, #8]
 800997e:	4604      	mov	r4, r0
 8009980:	6003      	str	r3, [r0, #0]
 8009982:	f04f 0900 	mov.w	r9, #0
 8009986:	07eb      	lsls	r3, r5, #31
 8009988:	d50a      	bpl.n	80099a0 <__pow5mult+0x84>
 800998a:	4631      	mov	r1, r6
 800998c:	4622      	mov	r2, r4
 800998e:	4638      	mov	r0, r7
 8009990:	f7ff ff22 	bl	80097d8 <__multiply>
 8009994:	4631      	mov	r1, r6
 8009996:	4680      	mov	r8, r0
 8009998:	4638      	mov	r0, r7
 800999a:	f7ff fe09 	bl	80095b0 <_Bfree>
 800999e:	4646      	mov	r6, r8
 80099a0:	106d      	asrs	r5, r5, #1
 80099a2:	d00b      	beq.n	80099bc <__pow5mult+0xa0>
 80099a4:	6820      	ldr	r0, [r4, #0]
 80099a6:	b938      	cbnz	r0, 80099b8 <__pow5mult+0x9c>
 80099a8:	4622      	mov	r2, r4
 80099aa:	4621      	mov	r1, r4
 80099ac:	4638      	mov	r0, r7
 80099ae:	f7ff ff13 	bl	80097d8 <__multiply>
 80099b2:	6020      	str	r0, [r4, #0]
 80099b4:	f8c0 9000 	str.w	r9, [r0]
 80099b8:	4604      	mov	r4, r0
 80099ba:	e7e4      	b.n	8009986 <__pow5mult+0x6a>
 80099bc:	4630      	mov	r0, r6
 80099be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099c2:	bf00      	nop
 80099c4:	0800abb0 	.word	0x0800abb0
 80099c8:	0800a9d7 	.word	0x0800a9d7
 80099cc:	0800aab7 	.word	0x0800aab7

080099d0 <__lshift>:
 80099d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d4:	460c      	mov	r4, r1
 80099d6:	6849      	ldr	r1, [r1, #4]
 80099d8:	6923      	ldr	r3, [r4, #16]
 80099da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099de:	68a3      	ldr	r3, [r4, #8]
 80099e0:	4607      	mov	r7, r0
 80099e2:	4691      	mov	r9, r2
 80099e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099e8:	f108 0601 	add.w	r6, r8, #1
 80099ec:	42b3      	cmp	r3, r6
 80099ee:	db0b      	blt.n	8009a08 <__lshift+0x38>
 80099f0:	4638      	mov	r0, r7
 80099f2:	f7ff fd9d 	bl	8009530 <_Balloc>
 80099f6:	4605      	mov	r5, r0
 80099f8:	b948      	cbnz	r0, 8009a0e <__lshift+0x3e>
 80099fa:	4602      	mov	r2, r0
 80099fc:	4b28      	ldr	r3, [pc, #160]	@ (8009aa0 <__lshift+0xd0>)
 80099fe:	4829      	ldr	r0, [pc, #164]	@ (8009aa4 <__lshift+0xd4>)
 8009a00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009a04:	f000 fc78 	bl	800a2f8 <__assert_func>
 8009a08:	3101      	adds	r1, #1
 8009a0a:	005b      	lsls	r3, r3, #1
 8009a0c:	e7ee      	b.n	80099ec <__lshift+0x1c>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f100 0114 	add.w	r1, r0, #20
 8009a14:	f100 0210 	add.w	r2, r0, #16
 8009a18:	4618      	mov	r0, r3
 8009a1a:	4553      	cmp	r3, sl
 8009a1c:	db33      	blt.n	8009a86 <__lshift+0xb6>
 8009a1e:	6920      	ldr	r0, [r4, #16]
 8009a20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a24:	f104 0314 	add.w	r3, r4, #20
 8009a28:	f019 091f 	ands.w	r9, r9, #31
 8009a2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a34:	d02b      	beq.n	8009a8e <__lshift+0xbe>
 8009a36:	f1c9 0e20 	rsb	lr, r9, #32
 8009a3a:	468a      	mov	sl, r1
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	6818      	ldr	r0, [r3, #0]
 8009a40:	fa00 f009 	lsl.w	r0, r0, r9
 8009a44:	4310      	orrs	r0, r2
 8009a46:	f84a 0b04 	str.w	r0, [sl], #4
 8009a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a4e:	459c      	cmp	ip, r3
 8009a50:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a54:	d8f3      	bhi.n	8009a3e <__lshift+0x6e>
 8009a56:	ebac 0304 	sub.w	r3, ip, r4
 8009a5a:	3b15      	subs	r3, #21
 8009a5c:	f023 0303 	bic.w	r3, r3, #3
 8009a60:	3304      	adds	r3, #4
 8009a62:	f104 0015 	add.w	r0, r4, #21
 8009a66:	4560      	cmp	r0, ip
 8009a68:	bf88      	it	hi
 8009a6a:	2304      	movhi	r3, #4
 8009a6c:	50ca      	str	r2, [r1, r3]
 8009a6e:	b10a      	cbz	r2, 8009a74 <__lshift+0xa4>
 8009a70:	f108 0602 	add.w	r6, r8, #2
 8009a74:	3e01      	subs	r6, #1
 8009a76:	4638      	mov	r0, r7
 8009a78:	612e      	str	r6, [r5, #16]
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	f7ff fd98 	bl	80095b0 <_Bfree>
 8009a80:	4628      	mov	r0, r5
 8009a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a86:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	e7c5      	b.n	8009a1a <__lshift+0x4a>
 8009a8e:	3904      	subs	r1, #4
 8009a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a94:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a98:	459c      	cmp	ip, r3
 8009a9a:	d8f9      	bhi.n	8009a90 <__lshift+0xc0>
 8009a9c:	e7ea      	b.n	8009a74 <__lshift+0xa4>
 8009a9e:	bf00      	nop
 8009aa0:	0800aa46 	.word	0x0800aa46
 8009aa4:	0800aab7 	.word	0x0800aab7

08009aa8 <__mcmp>:
 8009aa8:	690a      	ldr	r2, [r1, #16]
 8009aaa:	4603      	mov	r3, r0
 8009aac:	6900      	ldr	r0, [r0, #16]
 8009aae:	1a80      	subs	r0, r0, r2
 8009ab0:	b530      	push	{r4, r5, lr}
 8009ab2:	d10e      	bne.n	8009ad2 <__mcmp+0x2a>
 8009ab4:	3314      	adds	r3, #20
 8009ab6:	3114      	adds	r1, #20
 8009ab8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009abc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ac0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ac4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ac8:	4295      	cmp	r5, r2
 8009aca:	d003      	beq.n	8009ad4 <__mcmp+0x2c>
 8009acc:	d205      	bcs.n	8009ada <__mcmp+0x32>
 8009ace:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad2:	bd30      	pop	{r4, r5, pc}
 8009ad4:	42a3      	cmp	r3, r4
 8009ad6:	d3f3      	bcc.n	8009ac0 <__mcmp+0x18>
 8009ad8:	e7fb      	b.n	8009ad2 <__mcmp+0x2a>
 8009ada:	2001      	movs	r0, #1
 8009adc:	e7f9      	b.n	8009ad2 <__mcmp+0x2a>
	...

08009ae0 <__mdiff>:
 8009ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	4689      	mov	r9, r1
 8009ae6:	4606      	mov	r6, r0
 8009ae8:	4611      	mov	r1, r2
 8009aea:	4648      	mov	r0, r9
 8009aec:	4614      	mov	r4, r2
 8009aee:	f7ff ffdb 	bl	8009aa8 <__mcmp>
 8009af2:	1e05      	subs	r5, r0, #0
 8009af4:	d112      	bne.n	8009b1c <__mdiff+0x3c>
 8009af6:	4629      	mov	r1, r5
 8009af8:	4630      	mov	r0, r6
 8009afa:	f7ff fd19 	bl	8009530 <_Balloc>
 8009afe:	4602      	mov	r2, r0
 8009b00:	b928      	cbnz	r0, 8009b0e <__mdiff+0x2e>
 8009b02:	4b3f      	ldr	r3, [pc, #252]	@ (8009c00 <__mdiff+0x120>)
 8009b04:	f240 2137 	movw	r1, #567	@ 0x237
 8009b08:	483e      	ldr	r0, [pc, #248]	@ (8009c04 <__mdiff+0x124>)
 8009b0a:	f000 fbf5 	bl	800a2f8 <__assert_func>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b14:	4610      	mov	r0, r2
 8009b16:	b003      	add	sp, #12
 8009b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1c:	bfbc      	itt	lt
 8009b1e:	464b      	movlt	r3, r9
 8009b20:	46a1      	movlt	r9, r4
 8009b22:	4630      	mov	r0, r6
 8009b24:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009b28:	bfba      	itte	lt
 8009b2a:	461c      	movlt	r4, r3
 8009b2c:	2501      	movlt	r5, #1
 8009b2e:	2500      	movge	r5, #0
 8009b30:	f7ff fcfe 	bl	8009530 <_Balloc>
 8009b34:	4602      	mov	r2, r0
 8009b36:	b918      	cbnz	r0, 8009b40 <__mdiff+0x60>
 8009b38:	4b31      	ldr	r3, [pc, #196]	@ (8009c00 <__mdiff+0x120>)
 8009b3a:	f240 2145 	movw	r1, #581	@ 0x245
 8009b3e:	e7e3      	b.n	8009b08 <__mdiff+0x28>
 8009b40:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009b44:	6926      	ldr	r6, [r4, #16]
 8009b46:	60c5      	str	r5, [r0, #12]
 8009b48:	f109 0310 	add.w	r3, r9, #16
 8009b4c:	f109 0514 	add.w	r5, r9, #20
 8009b50:	f104 0e14 	add.w	lr, r4, #20
 8009b54:	f100 0b14 	add.w	fp, r0, #20
 8009b58:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009b5c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009b60:	9301      	str	r3, [sp, #4]
 8009b62:	46d9      	mov	r9, fp
 8009b64:	f04f 0c00 	mov.w	ip, #0
 8009b68:	9b01      	ldr	r3, [sp, #4]
 8009b6a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009b6e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009b72:	9301      	str	r3, [sp, #4]
 8009b74:	fa1f f38a 	uxth.w	r3, sl
 8009b78:	4619      	mov	r1, r3
 8009b7a:	b283      	uxth	r3, r0
 8009b7c:	1acb      	subs	r3, r1, r3
 8009b7e:	0c00      	lsrs	r0, r0, #16
 8009b80:	4463      	add	r3, ip
 8009b82:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009b86:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009b90:	4576      	cmp	r6, lr
 8009b92:	f849 3b04 	str.w	r3, [r9], #4
 8009b96:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b9a:	d8e5      	bhi.n	8009b68 <__mdiff+0x88>
 8009b9c:	1b33      	subs	r3, r6, r4
 8009b9e:	3b15      	subs	r3, #21
 8009ba0:	f023 0303 	bic.w	r3, r3, #3
 8009ba4:	3415      	adds	r4, #21
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	42a6      	cmp	r6, r4
 8009baa:	bf38      	it	cc
 8009bac:	2304      	movcc	r3, #4
 8009bae:	441d      	add	r5, r3
 8009bb0:	445b      	add	r3, fp
 8009bb2:	461e      	mov	r6, r3
 8009bb4:	462c      	mov	r4, r5
 8009bb6:	4544      	cmp	r4, r8
 8009bb8:	d30e      	bcc.n	8009bd8 <__mdiff+0xf8>
 8009bba:	f108 0103 	add.w	r1, r8, #3
 8009bbe:	1b49      	subs	r1, r1, r5
 8009bc0:	f021 0103 	bic.w	r1, r1, #3
 8009bc4:	3d03      	subs	r5, #3
 8009bc6:	45a8      	cmp	r8, r5
 8009bc8:	bf38      	it	cc
 8009bca:	2100      	movcc	r1, #0
 8009bcc:	440b      	add	r3, r1
 8009bce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bd2:	b191      	cbz	r1, 8009bfa <__mdiff+0x11a>
 8009bd4:	6117      	str	r7, [r2, #16]
 8009bd6:	e79d      	b.n	8009b14 <__mdiff+0x34>
 8009bd8:	f854 1b04 	ldr.w	r1, [r4], #4
 8009bdc:	46e6      	mov	lr, ip
 8009bde:	0c08      	lsrs	r0, r1, #16
 8009be0:	fa1c fc81 	uxtah	ip, ip, r1
 8009be4:	4471      	add	r1, lr
 8009be6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009bea:	b289      	uxth	r1, r1
 8009bec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009bf0:	f846 1b04 	str.w	r1, [r6], #4
 8009bf4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009bf8:	e7dd      	b.n	8009bb6 <__mdiff+0xd6>
 8009bfa:	3f01      	subs	r7, #1
 8009bfc:	e7e7      	b.n	8009bce <__mdiff+0xee>
 8009bfe:	bf00      	nop
 8009c00:	0800aa46 	.word	0x0800aa46
 8009c04:	0800aab7 	.word	0x0800aab7

08009c08 <__ulp>:
 8009c08:	b082      	sub	sp, #8
 8009c0a:	ed8d 0b00 	vstr	d0, [sp]
 8009c0e:	9a01      	ldr	r2, [sp, #4]
 8009c10:	4b0f      	ldr	r3, [pc, #60]	@ (8009c50 <__ulp+0x48>)
 8009c12:	4013      	ands	r3, r2
 8009c14:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	dc08      	bgt.n	8009c2e <__ulp+0x26>
 8009c1c:	425b      	negs	r3, r3
 8009c1e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009c22:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009c26:	da04      	bge.n	8009c32 <__ulp+0x2a>
 8009c28:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009c2c:	4113      	asrs	r3, r2
 8009c2e:	2200      	movs	r2, #0
 8009c30:	e008      	b.n	8009c44 <__ulp+0x3c>
 8009c32:	f1a2 0314 	sub.w	r3, r2, #20
 8009c36:	2b1e      	cmp	r3, #30
 8009c38:	bfda      	itte	le
 8009c3a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009c3e:	40da      	lsrle	r2, r3
 8009c40:	2201      	movgt	r2, #1
 8009c42:	2300      	movs	r3, #0
 8009c44:	4619      	mov	r1, r3
 8009c46:	4610      	mov	r0, r2
 8009c48:	ec41 0b10 	vmov	d0, r0, r1
 8009c4c:	b002      	add	sp, #8
 8009c4e:	4770      	bx	lr
 8009c50:	7ff00000 	.word	0x7ff00000

08009c54 <__b2d>:
 8009c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c58:	6906      	ldr	r6, [r0, #16]
 8009c5a:	f100 0814 	add.w	r8, r0, #20
 8009c5e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009c62:	1f37      	subs	r7, r6, #4
 8009c64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009c68:	4610      	mov	r0, r2
 8009c6a:	f7ff fd53 	bl	8009714 <__hi0bits>
 8009c6e:	f1c0 0320 	rsb	r3, r0, #32
 8009c72:	280a      	cmp	r0, #10
 8009c74:	600b      	str	r3, [r1, #0]
 8009c76:	491b      	ldr	r1, [pc, #108]	@ (8009ce4 <__b2d+0x90>)
 8009c78:	dc15      	bgt.n	8009ca6 <__b2d+0x52>
 8009c7a:	f1c0 0c0b 	rsb	ip, r0, #11
 8009c7e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009c82:	45b8      	cmp	r8, r7
 8009c84:	ea43 0501 	orr.w	r5, r3, r1
 8009c88:	bf34      	ite	cc
 8009c8a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009c8e:	2300      	movcs	r3, #0
 8009c90:	3015      	adds	r0, #21
 8009c92:	fa02 f000 	lsl.w	r0, r2, r0
 8009c96:	fa23 f30c 	lsr.w	r3, r3, ip
 8009c9a:	4303      	orrs	r3, r0
 8009c9c:	461c      	mov	r4, r3
 8009c9e:	ec45 4b10 	vmov	d0, r4, r5
 8009ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca6:	45b8      	cmp	r8, r7
 8009ca8:	bf3a      	itte	cc
 8009caa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009cae:	f1a6 0708 	subcc.w	r7, r6, #8
 8009cb2:	2300      	movcs	r3, #0
 8009cb4:	380b      	subs	r0, #11
 8009cb6:	d012      	beq.n	8009cde <__b2d+0x8a>
 8009cb8:	f1c0 0120 	rsb	r1, r0, #32
 8009cbc:	fa23 f401 	lsr.w	r4, r3, r1
 8009cc0:	4082      	lsls	r2, r0
 8009cc2:	4322      	orrs	r2, r4
 8009cc4:	4547      	cmp	r7, r8
 8009cc6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009cca:	bf8c      	ite	hi
 8009ccc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009cd0:	2200      	movls	r2, #0
 8009cd2:	4083      	lsls	r3, r0
 8009cd4:	40ca      	lsrs	r2, r1
 8009cd6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	e7de      	b.n	8009c9c <__b2d+0x48>
 8009cde:	ea42 0501 	orr.w	r5, r2, r1
 8009ce2:	e7db      	b.n	8009c9c <__b2d+0x48>
 8009ce4:	3ff00000 	.word	0x3ff00000

08009ce8 <__d2b>:
 8009ce8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cec:	460f      	mov	r7, r1
 8009cee:	2101      	movs	r1, #1
 8009cf0:	ec59 8b10 	vmov	r8, r9, d0
 8009cf4:	4616      	mov	r6, r2
 8009cf6:	f7ff fc1b 	bl	8009530 <_Balloc>
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	b930      	cbnz	r0, 8009d0c <__d2b+0x24>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	4b23      	ldr	r3, [pc, #140]	@ (8009d90 <__d2b+0xa8>)
 8009d02:	4824      	ldr	r0, [pc, #144]	@ (8009d94 <__d2b+0xac>)
 8009d04:	f240 310f 	movw	r1, #783	@ 0x30f
 8009d08:	f000 faf6 	bl	800a2f8 <__assert_func>
 8009d0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d14:	b10d      	cbz	r5, 8009d1a <__d2b+0x32>
 8009d16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d1a:	9301      	str	r3, [sp, #4]
 8009d1c:	f1b8 0300 	subs.w	r3, r8, #0
 8009d20:	d023      	beq.n	8009d6a <__d2b+0x82>
 8009d22:	4668      	mov	r0, sp
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	f7ff fd14 	bl	8009752 <__lo0bits>
 8009d2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d2e:	b1d0      	cbz	r0, 8009d66 <__d2b+0x7e>
 8009d30:	f1c0 0320 	rsb	r3, r0, #32
 8009d34:	fa02 f303 	lsl.w	r3, r2, r3
 8009d38:	430b      	orrs	r3, r1
 8009d3a:	40c2      	lsrs	r2, r0
 8009d3c:	6163      	str	r3, [r4, #20]
 8009d3e:	9201      	str	r2, [sp, #4]
 8009d40:	9b01      	ldr	r3, [sp, #4]
 8009d42:	61a3      	str	r3, [r4, #24]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	bf0c      	ite	eq
 8009d48:	2201      	moveq	r2, #1
 8009d4a:	2202      	movne	r2, #2
 8009d4c:	6122      	str	r2, [r4, #16]
 8009d4e:	b1a5      	cbz	r5, 8009d7a <__d2b+0x92>
 8009d50:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009d54:	4405      	add	r5, r0
 8009d56:	603d      	str	r5, [r7, #0]
 8009d58:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009d5c:	6030      	str	r0, [r6, #0]
 8009d5e:	4620      	mov	r0, r4
 8009d60:	b003      	add	sp, #12
 8009d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d66:	6161      	str	r1, [r4, #20]
 8009d68:	e7ea      	b.n	8009d40 <__d2b+0x58>
 8009d6a:	a801      	add	r0, sp, #4
 8009d6c:	f7ff fcf1 	bl	8009752 <__lo0bits>
 8009d70:	9b01      	ldr	r3, [sp, #4]
 8009d72:	6163      	str	r3, [r4, #20]
 8009d74:	3020      	adds	r0, #32
 8009d76:	2201      	movs	r2, #1
 8009d78:	e7e8      	b.n	8009d4c <__d2b+0x64>
 8009d7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009d82:	6038      	str	r0, [r7, #0]
 8009d84:	6918      	ldr	r0, [r3, #16]
 8009d86:	f7ff fcc5 	bl	8009714 <__hi0bits>
 8009d8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d8e:	e7e5      	b.n	8009d5c <__d2b+0x74>
 8009d90:	0800aa46 	.word	0x0800aa46
 8009d94:	0800aab7 	.word	0x0800aab7

08009d98 <__ratio>:
 8009d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9c:	b085      	sub	sp, #20
 8009d9e:	e9cd 1000 	strd	r1, r0, [sp]
 8009da2:	a902      	add	r1, sp, #8
 8009da4:	f7ff ff56 	bl	8009c54 <__b2d>
 8009da8:	9800      	ldr	r0, [sp, #0]
 8009daa:	a903      	add	r1, sp, #12
 8009dac:	ec55 4b10 	vmov	r4, r5, d0
 8009db0:	f7ff ff50 	bl	8009c54 <__b2d>
 8009db4:	9b01      	ldr	r3, [sp, #4]
 8009db6:	6919      	ldr	r1, [r3, #16]
 8009db8:	9b00      	ldr	r3, [sp, #0]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	1ac9      	subs	r1, r1, r3
 8009dbe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009dc2:	1a9b      	subs	r3, r3, r2
 8009dc4:	ec5b ab10 	vmov	sl, fp, d0
 8009dc8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	bfce      	itee	gt
 8009dd0:	462a      	movgt	r2, r5
 8009dd2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009dd6:	465a      	movle	r2, fp
 8009dd8:	462f      	mov	r7, r5
 8009dda:	46d9      	mov	r9, fp
 8009ddc:	bfcc      	ite	gt
 8009dde:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009de2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009de6:	464b      	mov	r3, r9
 8009de8:	4652      	mov	r2, sl
 8009dea:	4620      	mov	r0, r4
 8009dec:	4639      	mov	r1, r7
 8009dee:	f7f6 fd35 	bl	800085c <__aeabi_ddiv>
 8009df2:	ec41 0b10 	vmov	d0, r0, r1
 8009df6:	b005      	add	sp, #20
 8009df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009dfc <__copybits>:
 8009dfc:	3901      	subs	r1, #1
 8009dfe:	b570      	push	{r4, r5, r6, lr}
 8009e00:	1149      	asrs	r1, r1, #5
 8009e02:	6914      	ldr	r4, [r2, #16]
 8009e04:	3101      	adds	r1, #1
 8009e06:	f102 0314 	add.w	r3, r2, #20
 8009e0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009e0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009e12:	1f05      	subs	r5, r0, #4
 8009e14:	42a3      	cmp	r3, r4
 8009e16:	d30c      	bcc.n	8009e32 <__copybits+0x36>
 8009e18:	1aa3      	subs	r3, r4, r2
 8009e1a:	3b11      	subs	r3, #17
 8009e1c:	f023 0303 	bic.w	r3, r3, #3
 8009e20:	3211      	adds	r2, #17
 8009e22:	42a2      	cmp	r2, r4
 8009e24:	bf88      	it	hi
 8009e26:	2300      	movhi	r3, #0
 8009e28:	4418      	add	r0, r3
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	4288      	cmp	r0, r1
 8009e2e:	d305      	bcc.n	8009e3c <__copybits+0x40>
 8009e30:	bd70      	pop	{r4, r5, r6, pc}
 8009e32:	f853 6b04 	ldr.w	r6, [r3], #4
 8009e36:	f845 6f04 	str.w	r6, [r5, #4]!
 8009e3a:	e7eb      	b.n	8009e14 <__copybits+0x18>
 8009e3c:	f840 3b04 	str.w	r3, [r0], #4
 8009e40:	e7f4      	b.n	8009e2c <__copybits+0x30>

08009e42 <__any_on>:
 8009e42:	f100 0214 	add.w	r2, r0, #20
 8009e46:	6900      	ldr	r0, [r0, #16]
 8009e48:	114b      	asrs	r3, r1, #5
 8009e4a:	4298      	cmp	r0, r3
 8009e4c:	b510      	push	{r4, lr}
 8009e4e:	db11      	blt.n	8009e74 <__any_on+0x32>
 8009e50:	dd0a      	ble.n	8009e68 <__any_on+0x26>
 8009e52:	f011 011f 	ands.w	r1, r1, #31
 8009e56:	d007      	beq.n	8009e68 <__any_on+0x26>
 8009e58:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009e5c:	fa24 f001 	lsr.w	r0, r4, r1
 8009e60:	fa00 f101 	lsl.w	r1, r0, r1
 8009e64:	428c      	cmp	r4, r1
 8009e66:	d10b      	bne.n	8009e80 <__any_on+0x3e>
 8009e68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d803      	bhi.n	8009e78 <__any_on+0x36>
 8009e70:	2000      	movs	r0, #0
 8009e72:	bd10      	pop	{r4, pc}
 8009e74:	4603      	mov	r3, r0
 8009e76:	e7f7      	b.n	8009e68 <__any_on+0x26>
 8009e78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e7c:	2900      	cmp	r1, #0
 8009e7e:	d0f5      	beq.n	8009e6c <__any_on+0x2a>
 8009e80:	2001      	movs	r0, #1
 8009e82:	e7f6      	b.n	8009e72 <__any_on+0x30>

08009e84 <__ascii_wctomb>:
 8009e84:	4603      	mov	r3, r0
 8009e86:	4608      	mov	r0, r1
 8009e88:	b141      	cbz	r1, 8009e9c <__ascii_wctomb+0x18>
 8009e8a:	2aff      	cmp	r2, #255	@ 0xff
 8009e8c:	d904      	bls.n	8009e98 <__ascii_wctomb+0x14>
 8009e8e:	228a      	movs	r2, #138	@ 0x8a
 8009e90:	601a      	str	r2, [r3, #0]
 8009e92:	f04f 30ff 	mov.w	r0, #4294967295
 8009e96:	4770      	bx	lr
 8009e98:	700a      	strb	r2, [r1, #0]
 8009e9a:	2001      	movs	r0, #1
 8009e9c:	4770      	bx	lr

08009e9e <__ssputs_r>:
 8009e9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ea2:	688e      	ldr	r6, [r1, #8]
 8009ea4:	461f      	mov	r7, r3
 8009ea6:	42be      	cmp	r6, r7
 8009ea8:	680b      	ldr	r3, [r1, #0]
 8009eaa:	4682      	mov	sl, r0
 8009eac:	460c      	mov	r4, r1
 8009eae:	4690      	mov	r8, r2
 8009eb0:	d82d      	bhi.n	8009f0e <__ssputs_r+0x70>
 8009eb2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009eb6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009eba:	d026      	beq.n	8009f0a <__ssputs_r+0x6c>
 8009ebc:	6965      	ldr	r5, [r4, #20]
 8009ebe:	6909      	ldr	r1, [r1, #16]
 8009ec0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ec4:	eba3 0901 	sub.w	r9, r3, r1
 8009ec8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ecc:	1c7b      	adds	r3, r7, #1
 8009ece:	444b      	add	r3, r9
 8009ed0:	106d      	asrs	r5, r5, #1
 8009ed2:	429d      	cmp	r5, r3
 8009ed4:	bf38      	it	cc
 8009ed6:	461d      	movcc	r5, r3
 8009ed8:	0553      	lsls	r3, r2, #21
 8009eda:	d527      	bpl.n	8009f2c <__ssputs_r+0x8e>
 8009edc:	4629      	mov	r1, r5
 8009ede:	f7ff fa89 	bl	80093f4 <_malloc_r>
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	b360      	cbz	r0, 8009f40 <__ssputs_r+0xa2>
 8009ee6:	6921      	ldr	r1, [r4, #16]
 8009ee8:	464a      	mov	r2, r9
 8009eea:	f7fe f864 	bl	8007fb6 <memcpy>
 8009eee:	89a3      	ldrh	r3, [r4, #12]
 8009ef0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ef8:	81a3      	strh	r3, [r4, #12]
 8009efa:	6126      	str	r6, [r4, #16]
 8009efc:	6165      	str	r5, [r4, #20]
 8009efe:	444e      	add	r6, r9
 8009f00:	eba5 0509 	sub.w	r5, r5, r9
 8009f04:	6026      	str	r6, [r4, #0]
 8009f06:	60a5      	str	r5, [r4, #8]
 8009f08:	463e      	mov	r6, r7
 8009f0a:	42be      	cmp	r6, r7
 8009f0c:	d900      	bls.n	8009f10 <__ssputs_r+0x72>
 8009f0e:	463e      	mov	r6, r7
 8009f10:	6820      	ldr	r0, [r4, #0]
 8009f12:	4632      	mov	r2, r6
 8009f14:	4641      	mov	r1, r8
 8009f16:	f000 f9c5 	bl	800a2a4 <memmove>
 8009f1a:	68a3      	ldr	r3, [r4, #8]
 8009f1c:	1b9b      	subs	r3, r3, r6
 8009f1e:	60a3      	str	r3, [r4, #8]
 8009f20:	6823      	ldr	r3, [r4, #0]
 8009f22:	4433      	add	r3, r6
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	2000      	movs	r0, #0
 8009f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f2c:	462a      	mov	r2, r5
 8009f2e:	f000 fa15 	bl	800a35c <_realloc_r>
 8009f32:	4606      	mov	r6, r0
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d1e0      	bne.n	8009efa <__ssputs_r+0x5c>
 8009f38:	6921      	ldr	r1, [r4, #16]
 8009f3a:	4650      	mov	r0, sl
 8009f3c:	f7fe feac 	bl	8008c98 <_free_r>
 8009f40:	230c      	movs	r3, #12
 8009f42:	f8ca 3000 	str.w	r3, [sl]
 8009f46:	89a3      	ldrh	r3, [r4, #12]
 8009f48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f4c:	81a3      	strh	r3, [r4, #12]
 8009f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f52:	e7e9      	b.n	8009f28 <__ssputs_r+0x8a>

08009f54 <_svfiprintf_r>:
 8009f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f58:	4698      	mov	r8, r3
 8009f5a:	898b      	ldrh	r3, [r1, #12]
 8009f5c:	061b      	lsls	r3, r3, #24
 8009f5e:	b09d      	sub	sp, #116	@ 0x74
 8009f60:	4607      	mov	r7, r0
 8009f62:	460d      	mov	r5, r1
 8009f64:	4614      	mov	r4, r2
 8009f66:	d510      	bpl.n	8009f8a <_svfiprintf_r+0x36>
 8009f68:	690b      	ldr	r3, [r1, #16]
 8009f6a:	b973      	cbnz	r3, 8009f8a <_svfiprintf_r+0x36>
 8009f6c:	2140      	movs	r1, #64	@ 0x40
 8009f6e:	f7ff fa41 	bl	80093f4 <_malloc_r>
 8009f72:	6028      	str	r0, [r5, #0]
 8009f74:	6128      	str	r0, [r5, #16]
 8009f76:	b930      	cbnz	r0, 8009f86 <_svfiprintf_r+0x32>
 8009f78:	230c      	movs	r3, #12
 8009f7a:	603b      	str	r3, [r7, #0]
 8009f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f80:	b01d      	add	sp, #116	@ 0x74
 8009f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f86:	2340      	movs	r3, #64	@ 0x40
 8009f88:	616b      	str	r3, [r5, #20]
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f8e:	2320      	movs	r3, #32
 8009f90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f94:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f98:	2330      	movs	r3, #48	@ 0x30
 8009f9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a138 <_svfiprintf_r+0x1e4>
 8009f9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fa2:	f04f 0901 	mov.w	r9, #1
 8009fa6:	4623      	mov	r3, r4
 8009fa8:	469a      	mov	sl, r3
 8009faa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fae:	b10a      	cbz	r2, 8009fb4 <_svfiprintf_r+0x60>
 8009fb0:	2a25      	cmp	r2, #37	@ 0x25
 8009fb2:	d1f9      	bne.n	8009fa8 <_svfiprintf_r+0x54>
 8009fb4:	ebba 0b04 	subs.w	fp, sl, r4
 8009fb8:	d00b      	beq.n	8009fd2 <_svfiprintf_r+0x7e>
 8009fba:	465b      	mov	r3, fp
 8009fbc:	4622      	mov	r2, r4
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	4638      	mov	r0, r7
 8009fc2:	f7ff ff6c 	bl	8009e9e <__ssputs_r>
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	f000 80a7 	beq.w	800a11a <_svfiprintf_r+0x1c6>
 8009fcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fce:	445a      	add	r2, fp
 8009fd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fd2:	f89a 3000 	ldrb.w	r3, [sl]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f000 809f 	beq.w	800a11a <_svfiprintf_r+0x1c6>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fe6:	f10a 0a01 	add.w	sl, sl, #1
 8009fea:	9304      	str	r3, [sp, #16]
 8009fec:	9307      	str	r3, [sp, #28]
 8009fee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ff2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ff4:	4654      	mov	r4, sl
 8009ff6:	2205      	movs	r2, #5
 8009ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ffc:	484e      	ldr	r0, [pc, #312]	@ (800a138 <_svfiprintf_r+0x1e4>)
 8009ffe:	f7f6 f8ef 	bl	80001e0 <memchr>
 800a002:	9a04      	ldr	r2, [sp, #16]
 800a004:	b9d8      	cbnz	r0, 800a03e <_svfiprintf_r+0xea>
 800a006:	06d0      	lsls	r0, r2, #27
 800a008:	bf44      	itt	mi
 800a00a:	2320      	movmi	r3, #32
 800a00c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a010:	0711      	lsls	r1, r2, #28
 800a012:	bf44      	itt	mi
 800a014:	232b      	movmi	r3, #43	@ 0x2b
 800a016:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a01a:	f89a 3000 	ldrb.w	r3, [sl]
 800a01e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a020:	d015      	beq.n	800a04e <_svfiprintf_r+0xfa>
 800a022:	9a07      	ldr	r2, [sp, #28]
 800a024:	4654      	mov	r4, sl
 800a026:	2000      	movs	r0, #0
 800a028:	f04f 0c0a 	mov.w	ip, #10
 800a02c:	4621      	mov	r1, r4
 800a02e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a032:	3b30      	subs	r3, #48	@ 0x30
 800a034:	2b09      	cmp	r3, #9
 800a036:	d94b      	bls.n	800a0d0 <_svfiprintf_r+0x17c>
 800a038:	b1b0      	cbz	r0, 800a068 <_svfiprintf_r+0x114>
 800a03a:	9207      	str	r2, [sp, #28]
 800a03c:	e014      	b.n	800a068 <_svfiprintf_r+0x114>
 800a03e:	eba0 0308 	sub.w	r3, r0, r8
 800a042:	fa09 f303 	lsl.w	r3, r9, r3
 800a046:	4313      	orrs	r3, r2
 800a048:	9304      	str	r3, [sp, #16]
 800a04a:	46a2      	mov	sl, r4
 800a04c:	e7d2      	b.n	8009ff4 <_svfiprintf_r+0xa0>
 800a04e:	9b03      	ldr	r3, [sp, #12]
 800a050:	1d19      	adds	r1, r3, #4
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	9103      	str	r1, [sp, #12]
 800a056:	2b00      	cmp	r3, #0
 800a058:	bfbb      	ittet	lt
 800a05a:	425b      	neglt	r3, r3
 800a05c:	f042 0202 	orrlt.w	r2, r2, #2
 800a060:	9307      	strge	r3, [sp, #28]
 800a062:	9307      	strlt	r3, [sp, #28]
 800a064:	bfb8      	it	lt
 800a066:	9204      	strlt	r2, [sp, #16]
 800a068:	7823      	ldrb	r3, [r4, #0]
 800a06a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a06c:	d10a      	bne.n	800a084 <_svfiprintf_r+0x130>
 800a06e:	7863      	ldrb	r3, [r4, #1]
 800a070:	2b2a      	cmp	r3, #42	@ 0x2a
 800a072:	d132      	bne.n	800a0da <_svfiprintf_r+0x186>
 800a074:	9b03      	ldr	r3, [sp, #12]
 800a076:	1d1a      	adds	r2, r3, #4
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	9203      	str	r2, [sp, #12]
 800a07c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a080:	3402      	adds	r4, #2
 800a082:	9305      	str	r3, [sp, #20]
 800a084:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a148 <_svfiprintf_r+0x1f4>
 800a088:	7821      	ldrb	r1, [r4, #0]
 800a08a:	2203      	movs	r2, #3
 800a08c:	4650      	mov	r0, sl
 800a08e:	f7f6 f8a7 	bl	80001e0 <memchr>
 800a092:	b138      	cbz	r0, 800a0a4 <_svfiprintf_r+0x150>
 800a094:	9b04      	ldr	r3, [sp, #16]
 800a096:	eba0 000a 	sub.w	r0, r0, sl
 800a09a:	2240      	movs	r2, #64	@ 0x40
 800a09c:	4082      	lsls	r2, r0
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	3401      	adds	r4, #1
 800a0a2:	9304      	str	r3, [sp, #16]
 800a0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a8:	4824      	ldr	r0, [pc, #144]	@ (800a13c <_svfiprintf_r+0x1e8>)
 800a0aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0ae:	2206      	movs	r2, #6
 800a0b0:	f7f6 f896 	bl	80001e0 <memchr>
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	d036      	beq.n	800a126 <_svfiprintf_r+0x1d2>
 800a0b8:	4b21      	ldr	r3, [pc, #132]	@ (800a140 <_svfiprintf_r+0x1ec>)
 800a0ba:	bb1b      	cbnz	r3, 800a104 <_svfiprintf_r+0x1b0>
 800a0bc:	9b03      	ldr	r3, [sp, #12]
 800a0be:	3307      	adds	r3, #7
 800a0c0:	f023 0307 	bic.w	r3, r3, #7
 800a0c4:	3308      	adds	r3, #8
 800a0c6:	9303      	str	r3, [sp, #12]
 800a0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ca:	4433      	add	r3, r6
 800a0cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0ce:	e76a      	b.n	8009fa6 <_svfiprintf_r+0x52>
 800a0d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0d4:	460c      	mov	r4, r1
 800a0d6:	2001      	movs	r0, #1
 800a0d8:	e7a8      	b.n	800a02c <_svfiprintf_r+0xd8>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	3401      	adds	r4, #1
 800a0de:	9305      	str	r3, [sp, #20]
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	f04f 0c0a 	mov.w	ip, #10
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0ec:	3a30      	subs	r2, #48	@ 0x30
 800a0ee:	2a09      	cmp	r2, #9
 800a0f0:	d903      	bls.n	800a0fa <_svfiprintf_r+0x1a6>
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d0c6      	beq.n	800a084 <_svfiprintf_r+0x130>
 800a0f6:	9105      	str	r1, [sp, #20]
 800a0f8:	e7c4      	b.n	800a084 <_svfiprintf_r+0x130>
 800a0fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0fe:	4604      	mov	r4, r0
 800a100:	2301      	movs	r3, #1
 800a102:	e7f0      	b.n	800a0e6 <_svfiprintf_r+0x192>
 800a104:	ab03      	add	r3, sp, #12
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	462a      	mov	r2, r5
 800a10a:	4b0e      	ldr	r3, [pc, #56]	@ (800a144 <_svfiprintf_r+0x1f0>)
 800a10c:	a904      	add	r1, sp, #16
 800a10e:	4638      	mov	r0, r7
 800a110:	f7fd f9e2 	bl	80074d8 <_printf_float>
 800a114:	1c42      	adds	r2, r0, #1
 800a116:	4606      	mov	r6, r0
 800a118:	d1d6      	bne.n	800a0c8 <_svfiprintf_r+0x174>
 800a11a:	89ab      	ldrh	r3, [r5, #12]
 800a11c:	065b      	lsls	r3, r3, #25
 800a11e:	f53f af2d 	bmi.w	8009f7c <_svfiprintf_r+0x28>
 800a122:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a124:	e72c      	b.n	8009f80 <_svfiprintf_r+0x2c>
 800a126:	ab03      	add	r3, sp, #12
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	462a      	mov	r2, r5
 800a12c:	4b05      	ldr	r3, [pc, #20]	@ (800a144 <_svfiprintf_r+0x1f0>)
 800a12e:	a904      	add	r1, sp, #16
 800a130:	4638      	mov	r0, r7
 800a132:	f7fd fc69 	bl	8007a08 <_printf_i>
 800a136:	e7ed      	b.n	800a114 <_svfiprintf_r+0x1c0>
 800a138:	0800ab10 	.word	0x0800ab10
 800a13c:	0800ab1a 	.word	0x0800ab1a
 800a140:	080074d9 	.word	0x080074d9
 800a144:	08009e9f 	.word	0x08009e9f
 800a148:	0800ab16 	.word	0x0800ab16

0800a14c <__sflush_r>:
 800a14c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a154:	0716      	lsls	r6, r2, #28
 800a156:	4605      	mov	r5, r0
 800a158:	460c      	mov	r4, r1
 800a15a:	d454      	bmi.n	800a206 <__sflush_r+0xba>
 800a15c:	684b      	ldr	r3, [r1, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	dc02      	bgt.n	800a168 <__sflush_r+0x1c>
 800a162:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a164:	2b00      	cmp	r3, #0
 800a166:	dd48      	ble.n	800a1fa <__sflush_r+0xae>
 800a168:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a16a:	2e00      	cmp	r6, #0
 800a16c:	d045      	beq.n	800a1fa <__sflush_r+0xae>
 800a16e:	2300      	movs	r3, #0
 800a170:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a174:	682f      	ldr	r7, [r5, #0]
 800a176:	6a21      	ldr	r1, [r4, #32]
 800a178:	602b      	str	r3, [r5, #0]
 800a17a:	d030      	beq.n	800a1de <__sflush_r+0x92>
 800a17c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a17e:	89a3      	ldrh	r3, [r4, #12]
 800a180:	0759      	lsls	r1, r3, #29
 800a182:	d505      	bpl.n	800a190 <__sflush_r+0x44>
 800a184:	6863      	ldr	r3, [r4, #4]
 800a186:	1ad2      	subs	r2, r2, r3
 800a188:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a18a:	b10b      	cbz	r3, 800a190 <__sflush_r+0x44>
 800a18c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a18e:	1ad2      	subs	r2, r2, r3
 800a190:	2300      	movs	r3, #0
 800a192:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a194:	6a21      	ldr	r1, [r4, #32]
 800a196:	4628      	mov	r0, r5
 800a198:	47b0      	blx	r6
 800a19a:	1c43      	adds	r3, r0, #1
 800a19c:	89a3      	ldrh	r3, [r4, #12]
 800a19e:	d106      	bne.n	800a1ae <__sflush_r+0x62>
 800a1a0:	6829      	ldr	r1, [r5, #0]
 800a1a2:	291d      	cmp	r1, #29
 800a1a4:	d82b      	bhi.n	800a1fe <__sflush_r+0xb2>
 800a1a6:	4a2a      	ldr	r2, [pc, #168]	@ (800a250 <__sflush_r+0x104>)
 800a1a8:	40ca      	lsrs	r2, r1
 800a1aa:	07d6      	lsls	r6, r2, #31
 800a1ac:	d527      	bpl.n	800a1fe <__sflush_r+0xb2>
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	6062      	str	r2, [r4, #4]
 800a1b2:	04d9      	lsls	r1, r3, #19
 800a1b4:	6922      	ldr	r2, [r4, #16]
 800a1b6:	6022      	str	r2, [r4, #0]
 800a1b8:	d504      	bpl.n	800a1c4 <__sflush_r+0x78>
 800a1ba:	1c42      	adds	r2, r0, #1
 800a1bc:	d101      	bne.n	800a1c2 <__sflush_r+0x76>
 800a1be:	682b      	ldr	r3, [r5, #0]
 800a1c0:	b903      	cbnz	r3, 800a1c4 <__sflush_r+0x78>
 800a1c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a1c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1c6:	602f      	str	r7, [r5, #0]
 800a1c8:	b1b9      	cbz	r1, 800a1fa <__sflush_r+0xae>
 800a1ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1ce:	4299      	cmp	r1, r3
 800a1d0:	d002      	beq.n	800a1d8 <__sflush_r+0x8c>
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	f7fe fd60 	bl	8008c98 <_free_r>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1dc:	e00d      	b.n	800a1fa <__sflush_r+0xae>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	47b0      	blx	r6
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	1c50      	adds	r0, r2, #1
 800a1e8:	d1c9      	bne.n	800a17e <__sflush_r+0x32>
 800a1ea:	682b      	ldr	r3, [r5, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d0c6      	beq.n	800a17e <__sflush_r+0x32>
 800a1f0:	2b1d      	cmp	r3, #29
 800a1f2:	d001      	beq.n	800a1f8 <__sflush_r+0xac>
 800a1f4:	2b16      	cmp	r3, #22
 800a1f6:	d11e      	bne.n	800a236 <__sflush_r+0xea>
 800a1f8:	602f      	str	r7, [r5, #0]
 800a1fa:	2000      	movs	r0, #0
 800a1fc:	e022      	b.n	800a244 <__sflush_r+0xf8>
 800a1fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a202:	b21b      	sxth	r3, r3
 800a204:	e01b      	b.n	800a23e <__sflush_r+0xf2>
 800a206:	690f      	ldr	r7, [r1, #16]
 800a208:	2f00      	cmp	r7, #0
 800a20a:	d0f6      	beq.n	800a1fa <__sflush_r+0xae>
 800a20c:	0793      	lsls	r3, r2, #30
 800a20e:	680e      	ldr	r6, [r1, #0]
 800a210:	bf08      	it	eq
 800a212:	694b      	ldreq	r3, [r1, #20]
 800a214:	600f      	str	r7, [r1, #0]
 800a216:	bf18      	it	ne
 800a218:	2300      	movne	r3, #0
 800a21a:	eba6 0807 	sub.w	r8, r6, r7
 800a21e:	608b      	str	r3, [r1, #8]
 800a220:	f1b8 0f00 	cmp.w	r8, #0
 800a224:	dde9      	ble.n	800a1fa <__sflush_r+0xae>
 800a226:	6a21      	ldr	r1, [r4, #32]
 800a228:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a22a:	4643      	mov	r3, r8
 800a22c:	463a      	mov	r2, r7
 800a22e:	4628      	mov	r0, r5
 800a230:	47b0      	blx	r6
 800a232:	2800      	cmp	r0, #0
 800a234:	dc08      	bgt.n	800a248 <__sflush_r+0xfc>
 800a236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a23a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a23e:	81a3      	strh	r3, [r4, #12]
 800a240:	f04f 30ff 	mov.w	r0, #4294967295
 800a244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a248:	4407      	add	r7, r0
 800a24a:	eba8 0800 	sub.w	r8, r8, r0
 800a24e:	e7e7      	b.n	800a220 <__sflush_r+0xd4>
 800a250:	20400001 	.word	0x20400001

0800a254 <_fflush_r>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	690b      	ldr	r3, [r1, #16]
 800a258:	4605      	mov	r5, r0
 800a25a:	460c      	mov	r4, r1
 800a25c:	b913      	cbnz	r3, 800a264 <_fflush_r+0x10>
 800a25e:	2500      	movs	r5, #0
 800a260:	4628      	mov	r0, r5
 800a262:	bd38      	pop	{r3, r4, r5, pc}
 800a264:	b118      	cbz	r0, 800a26e <_fflush_r+0x1a>
 800a266:	6a03      	ldr	r3, [r0, #32]
 800a268:	b90b      	cbnz	r3, 800a26e <_fflush_r+0x1a>
 800a26a:	f7fd fd77 	bl	8007d5c <__sinit>
 800a26e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d0f3      	beq.n	800a25e <_fflush_r+0xa>
 800a276:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a278:	07d0      	lsls	r0, r2, #31
 800a27a:	d404      	bmi.n	800a286 <_fflush_r+0x32>
 800a27c:	0599      	lsls	r1, r3, #22
 800a27e:	d402      	bmi.n	800a286 <_fflush_r+0x32>
 800a280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a282:	f7fd fe96 	bl	8007fb2 <__retarget_lock_acquire_recursive>
 800a286:	4628      	mov	r0, r5
 800a288:	4621      	mov	r1, r4
 800a28a:	f7ff ff5f 	bl	800a14c <__sflush_r>
 800a28e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a290:	07da      	lsls	r2, r3, #31
 800a292:	4605      	mov	r5, r0
 800a294:	d4e4      	bmi.n	800a260 <_fflush_r+0xc>
 800a296:	89a3      	ldrh	r3, [r4, #12]
 800a298:	059b      	lsls	r3, r3, #22
 800a29a:	d4e1      	bmi.n	800a260 <_fflush_r+0xc>
 800a29c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a29e:	f7fd fe89 	bl	8007fb4 <__retarget_lock_release_recursive>
 800a2a2:	e7dd      	b.n	800a260 <_fflush_r+0xc>

0800a2a4 <memmove>:
 800a2a4:	4288      	cmp	r0, r1
 800a2a6:	b510      	push	{r4, lr}
 800a2a8:	eb01 0402 	add.w	r4, r1, r2
 800a2ac:	d902      	bls.n	800a2b4 <memmove+0x10>
 800a2ae:	4284      	cmp	r4, r0
 800a2b0:	4623      	mov	r3, r4
 800a2b2:	d807      	bhi.n	800a2c4 <memmove+0x20>
 800a2b4:	1e43      	subs	r3, r0, #1
 800a2b6:	42a1      	cmp	r1, r4
 800a2b8:	d008      	beq.n	800a2cc <memmove+0x28>
 800a2ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2c2:	e7f8      	b.n	800a2b6 <memmove+0x12>
 800a2c4:	4402      	add	r2, r0
 800a2c6:	4601      	mov	r1, r0
 800a2c8:	428a      	cmp	r2, r1
 800a2ca:	d100      	bne.n	800a2ce <memmove+0x2a>
 800a2cc:	bd10      	pop	{r4, pc}
 800a2ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2d6:	e7f7      	b.n	800a2c8 <memmove+0x24>

0800a2d8 <_sbrk_r>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	4d06      	ldr	r5, [pc, #24]	@ (800a2f4 <_sbrk_r+0x1c>)
 800a2dc:	2300      	movs	r3, #0
 800a2de:	4604      	mov	r4, r0
 800a2e0:	4608      	mov	r0, r1
 800a2e2:	602b      	str	r3, [r5, #0]
 800a2e4:	f7f7 ffa6 	bl	8002234 <_sbrk>
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	d102      	bne.n	800a2f2 <_sbrk_r+0x1a>
 800a2ec:	682b      	ldr	r3, [r5, #0]
 800a2ee:	b103      	cbz	r3, 800a2f2 <_sbrk_r+0x1a>
 800a2f0:	6023      	str	r3, [r4, #0]
 800a2f2:	bd38      	pop	{r3, r4, r5, pc}
 800a2f4:	200005e0 	.word	0x200005e0

0800a2f8 <__assert_func>:
 800a2f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2fa:	4614      	mov	r4, r2
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	4b09      	ldr	r3, [pc, #36]	@ (800a324 <__assert_func+0x2c>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4605      	mov	r5, r0
 800a304:	68d8      	ldr	r0, [r3, #12]
 800a306:	b14c      	cbz	r4, 800a31c <__assert_func+0x24>
 800a308:	4b07      	ldr	r3, [pc, #28]	@ (800a328 <__assert_func+0x30>)
 800a30a:	9100      	str	r1, [sp, #0]
 800a30c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a310:	4906      	ldr	r1, [pc, #24]	@ (800a32c <__assert_func+0x34>)
 800a312:	462b      	mov	r3, r5
 800a314:	f000 f850 	bl	800a3b8 <fiprintf>
 800a318:	f000 f860 	bl	800a3dc <abort>
 800a31c:	4b04      	ldr	r3, [pc, #16]	@ (800a330 <__assert_func+0x38>)
 800a31e:	461c      	mov	r4, r3
 800a320:	e7f3      	b.n	800a30a <__assert_func+0x12>
 800a322:	bf00      	nop
 800a324:	20000198 	.word	0x20000198
 800a328:	0800ab21 	.word	0x0800ab21
 800a32c:	0800ab2e 	.word	0x0800ab2e
 800a330:	0800ab5c 	.word	0x0800ab5c

0800a334 <_calloc_r>:
 800a334:	b570      	push	{r4, r5, r6, lr}
 800a336:	fba1 5402 	umull	r5, r4, r1, r2
 800a33a:	b934      	cbnz	r4, 800a34a <_calloc_r+0x16>
 800a33c:	4629      	mov	r1, r5
 800a33e:	f7ff f859 	bl	80093f4 <_malloc_r>
 800a342:	4606      	mov	r6, r0
 800a344:	b928      	cbnz	r0, 800a352 <_calloc_r+0x1e>
 800a346:	4630      	mov	r0, r6
 800a348:	bd70      	pop	{r4, r5, r6, pc}
 800a34a:	220c      	movs	r2, #12
 800a34c:	6002      	str	r2, [r0, #0]
 800a34e:	2600      	movs	r6, #0
 800a350:	e7f9      	b.n	800a346 <_calloc_r+0x12>
 800a352:	462a      	mov	r2, r5
 800a354:	4621      	mov	r1, r4
 800a356:	f7fd fd9c 	bl	8007e92 <memset>
 800a35a:	e7f4      	b.n	800a346 <_calloc_r+0x12>

0800a35c <_realloc_r>:
 800a35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a360:	4607      	mov	r7, r0
 800a362:	4614      	mov	r4, r2
 800a364:	460d      	mov	r5, r1
 800a366:	b921      	cbnz	r1, 800a372 <_realloc_r+0x16>
 800a368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a36c:	4611      	mov	r1, r2
 800a36e:	f7ff b841 	b.w	80093f4 <_malloc_r>
 800a372:	b92a      	cbnz	r2, 800a380 <_realloc_r+0x24>
 800a374:	f7fe fc90 	bl	8008c98 <_free_r>
 800a378:	4625      	mov	r5, r4
 800a37a:	4628      	mov	r0, r5
 800a37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a380:	f000 f833 	bl	800a3ea <_malloc_usable_size_r>
 800a384:	4284      	cmp	r4, r0
 800a386:	4606      	mov	r6, r0
 800a388:	d802      	bhi.n	800a390 <_realloc_r+0x34>
 800a38a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a38e:	d8f4      	bhi.n	800a37a <_realloc_r+0x1e>
 800a390:	4621      	mov	r1, r4
 800a392:	4638      	mov	r0, r7
 800a394:	f7ff f82e 	bl	80093f4 <_malloc_r>
 800a398:	4680      	mov	r8, r0
 800a39a:	b908      	cbnz	r0, 800a3a0 <_realloc_r+0x44>
 800a39c:	4645      	mov	r5, r8
 800a39e:	e7ec      	b.n	800a37a <_realloc_r+0x1e>
 800a3a0:	42b4      	cmp	r4, r6
 800a3a2:	4622      	mov	r2, r4
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	bf28      	it	cs
 800a3a8:	4632      	movcs	r2, r6
 800a3aa:	f7fd fe04 	bl	8007fb6 <memcpy>
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	4638      	mov	r0, r7
 800a3b2:	f7fe fc71 	bl	8008c98 <_free_r>
 800a3b6:	e7f1      	b.n	800a39c <_realloc_r+0x40>

0800a3b8 <fiprintf>:
 800a3b8:	b40e      	push	{r1, r2, r3}
 800a3ba:	b503      	push	{r0, r1, lr}
 800a3bc:	4601      	mov	r1, r0
 800a3be:	ab03      	add	r3, sp, #12
 800a3c0:	4805      	ldr	r0, [pc, #20]	@ (800a3d8 <fiprintf+0x20>)
 800a3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3c6:	6800      	ldr	r0, [r0, #0]
 800a3c8:	9301      	str	r3, [sp, #4]
 800a3ca:	f000 f83f 	bl	800a44c <_vfiprintf_r>
 800a3ce:	b002      	add	sp, #8
 800a3d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3d4:	b003      	add	sp, #12
 800a3d6:	4770      	bx	lr
 800a3d8:	20000198 	.word	0x20000198

0800a3dc <abort>:
 800a3dc:	b508      	push	{r3, lr}
 800a3de:	2006      	movs	r0, #6
 800a3e0:	f000 fa08 	bl	800a7f4 <raise>
 800a3e4:	2001      	movs	r0, #1
 800a3e6:	f7f7 fead 	bl	8002144 <_exit>

0800a3ea <_malloc_usable_size_r>:
 800a3ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ee:	1f18      	subs	r0, r3, #4
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	bfbc      	itt	lt
 800a3f4:	580b      	ldrlt	r3, [r1, r0]
 800a3f6:	18c0      	addlt	r0, r0, r3
 800a3f8:	4770      	bx	lr

0800a3fa <__sfputc_r>:
 800a3fa:	6893      	ldr	r3, [r2, #8]
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	b410      	push	{r4}
 800a402:	6093      	str	r3, [r2, #8]
 800a404:	da08      	bge.n	800a418 <__sfputc_r+0x1e>
 800a406:	6994      	ldr	r4, [r2, #24]
 800a408:	42a3      	cmp	r3, r4
 800a40a:	db01      	blt.n	800a410 <__sfputc_r+0x16>
 800a40c:	290a      	cmp	r1, #10
 800a40e:	d103      	bne.n	800a418 <__sfputc_r+0x1e>
 800a410:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a414:	f000 b932 	b.w	800a67c <__swbuf_r>
 800a418:	6813      	ldr	r3, [r2, #0]
 800a41a:	1c58      	adds	r0, r3, #1
 800a41c:	6010      	str	r0, [r2, #0]
 800a41e:	7019      	strb	r1, [r3, #0]
 800a420:	4608      	mov	r0, r1
 800a422:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <__sfputs_r>:
 800a428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42a:	4606      	mov	r6, r0
 800a42c:	460f      	mov	r7, r1
 800a42e:	4614      	mov	r4, r2
 800a430:	18d5      	adds	r5, r2, r3
 800a432:	42ac      	cmp	r4, r5
 800a434:	d101      	bne.n	800a43a <__sfputs_r+0x12>
 800a436:	2000      	movs	r0, #0
 800a438:	e007      	b.n	800a44a <__sfputs_r+0x22>
 800a43a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a43e:	463a      	mov	r2, r7
 800a440:	4630      	mov	r0, r6
 800a442:	f7ff ffda 	bl	800a3fa <__sfputc_r>
 800a446:	1c43      	adds	r3, r0, #1
 800a448:	d1f3      	bne.n	800a432 <__sfputs_r+0xa>
 800a44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a44c <_vfiprintf_r>:
 800a44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a450:	460d      	mov	r5, r1
 800a452:	b09d      	sub	sp, #116	@ 0x74
 800a454:	4614      	mov	r4, r2
 800a456:	4698      	mov	r8, r3
 800a458:	4606      	mov	r6, r0
 800a45a:	b118      	cbz	r0, 800a464 <_vfiprintf_r+0x18>
 800a45c:	6a03      	ldr	r3, [r0, #32]
 800a45e:	b90b      	cbnz	r3, 800a464 <_vfiprintf_r+0x18>
 800a460:	f7fd fc7c 	bl	8007d5c <__sinit>
 800a464:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a466:	07d9      	lsls	r1, r3, #31
 800a468:	d405      	bmi.n	800a476 <_vfiprintf_r+0x2a>
 800a46a:	89ab      	ldrh	r3, [r5, #12]
 800a46c:	059a      	lsls	r2, r3, #22
 800a46e:	d402      	bmi.n	800a476 <_vfiprintf_r+0x2a>
 800a470:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a472:	f7fd fd9e 	bl	8007fb2 <__retarget_lock_acquire_recursive>
 800a476:	89ab      	ldrh	r3, [r5, #12]
 800a478:	071b      	lsls	r3, r3, #28
 800a47a:	d501      	bpl.n	800a480 <_vfiprintf_r+0x34>
 800a47c:	692b      	ldr	r3, [r5, #16]
 800a47e:	b99b      	cbnz	r3, 800a4a8 <_vfiprintf_r+0x5c>
 800a480:	4629      	mov	r1, r5
 800a482:	4630      	mov	r0, r6
 800a484:	f000 f938 	bl	800a6f8 <__swsetup_r>
 800a488:	b170      	cbz	r0, 800a4a8 <_vfiprintf_r+0x5c>
 800a48a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a48c:	07dc      	lsls	r4, r3, #31
 800a48e:	d504      	bpl.n	800a49a <_vfiprintf_r+0x4e>
 800a490:	f04f 30ff 	mov.w	r0, #4294967295
 800a494:	b01d      	add	sp, #116	@ 0x74
 800a496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a49a:	89ab      	ldrh	r3, [r5, #12]
 800a49c:	0598      	lsls	r0, r3, #22
 800a49e:	d4f7      	bmi.n	800a490 <_vfiprintf_r+0x44>
 800a4a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4a2:	f7fd fd87 	bl	8007fb4 <__retarget_lock_release_recursive>
 800a4a6:	e7f3      	b.n	800a490 <_vfiprintf_r+0x44>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4ac:	2320      	movs	r3, #32
 800a4ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4b6:	2330      	movs	r3, #48	@ 0x30
 800a4b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a668 <_vfiprintf_r+0x21c>
 800a4bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4c0:	f04f 0901 	mov.w	r9, #1
 800a4c4:	4623      	mov	r3, r4
 800a4c6:	469a      	mov	sl, r3
 800a4c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4cc:	b10a      	cbz	r2, 800a4d2 <_vfiprintf_r+0x86>
 800a4ce:	2a25      	cmp	r2, #37	@ 0x25
 800a4d0:	d1f9      	bne.n	800a4c6 <_vfiprintf_r+0x7a>
 800a4d2:	ebba 0b04 	subs.w	fp, sl, r4
 800a4d6:	d00b      	beq.n	800a4f0 <_vfiprintf_r+0xa4>
 800a4d8:	465b      	mov	r3, fp
 800a4da:	4622      	mov	r2, r4
 800a4dc:	4629      	mov	r1, r5
 800a4de:	4630      	mov	r0, r6
 800a4e0:	f7ff ffa2 	bl	800a428 <__sfputs_r>
 800a4e4:	3001      	adds	r0, #1
 800a4e6:	f000 80a7 	beq.w	800a638 <_vfiprintf_r+0x1ec>
 800a4ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4ec:	445a      	add	r2, fp
 800a4ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 809f 	beq.w	800a638 <_vfiprintf_r+0x1ec>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a504:	f10a 0a01 	add.w	sl, sl, #1
 800a508:	9304      	str	r3, [sp, #16]
 800a50a:	9307      	str	r3, [sp, #28]
 800a50c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a510:	931a      	str	r3, [sp, #104]	@ 0x68
 800a512:	4654      	mov	r4, sl
 800a514:	2205      	movs	r2, #5
 800a516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a51a:	4853      	ldr	r0, [pc, #332]	@ (800a668 <_vfiprintf_r+0x21c>)
 800a51c:	f7f5 fe60 	bl	80001e0 <memchr>
 800a520:	9a04      	ldr	r2, [sp, #16]
 800a522:	b9d8      	cbnz	r0, 800a55c <_vfiprintf_r+0x110>
 800a524:	06d1      	lsls	r1, r2, #27
 800a526:	bf44      	itt	mi
 800a528:	2320      	movmi	r3, #32
 800a52a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a52e:	0713      	lsls	r3, r2, #28
 800a530:	bf44      	itt	mi
 800a532:	232b      	movmi	r3, #43	@ 0x2b
 800a534:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a538:	f89a 3000 	ldrb.w	r3, [sl]
 800a53c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a53e:	d015      	beq.n	800a56c <_vfiprintf_r+0x120>
 800a540:	9a07      	ldr	r2, [sp, #28]
 800a542:	4654      	mov	r4, sl
 800a544:	2000      	movs	r0, #0
 800a546:	f04f 0c0a 	mov.w	ip, #10
 800a54a:	4621      	mov	r1, r4
 800a54c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a550:	3b30      	subs	r3, #48	@ 0x30
 800a552:	2b09      	cmp	r3, #9
 800a554:	d94b      	bls.n	800a5ee <_vfiprintf_r+0x1a2>
 800a556:	b1b0      	cbz	r0, 800a586 <_vfiprintf_r+0x13a>
 800a558:	9207      	str	r2, [sp, #28]
 800a55a:	e014      	b.n	800a586 <_vfiprintf_r+0x13a>
 800a55c:	eba0 0308 	sub.w	r3, r0, r8
 800a560:	fa09 f303 	lsl.w	r3, r9, r3
 800a564:	4313      	orrs	r3, r2
 800a566:	9304      	str	r3, [sp, #16]
 800a568:	46a2      	mov	sl, r4
 800a56a:	e7d2      	b.n	800a512 <_vfiprintf_r+0xc6>
 800a56c:	9b03      	ldr	r3, [sp, #12]
 800a56e:	1d19      	adds	r1, r3, #4
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	9103      	str	r1, [sp, #12]
 800a574:	2b00      	cmp	r3, #0
 800a576:	bfbb      	ittet	lt
 800a578:	425b      	neglt	r3, r3
 800a57a:	f042 0202 	orrlt.w	r2, r2, #2
 800a57e:	9307      	strge	r3, [sp, #28]
 800a580:	9307      	strlt	r3, [sp, #28]
 800a582:	bfb8      	it	lt
 800a584:	9204      	strlt	r2, [sp, #16]
 800a586:	7823      	ldrb	r3, [r4, #0]
 800a588:	2b2e      	cmp	r3, #46	@ 0x2e
 800a58a:	d10a      	bne.n	800a5a2 <_vfiprintf_r+0x156>
 800a58c:	7863      	ldrb	r3, [r4, #1]
 800a58e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a590:	d132      	bne.n	800a5f8 <_vfiprintf_r+0x1ac>
 800a592:	9b03      	ldr	r3, [sp, #12]
 800a594:	1d1a      	adds	r2, r3, #4
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	9203      	str	r2, [sp, #12]
 800a59a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a59e:	3402      	adds	r4, #2
 800a5a0:	9305      	str	r3, [sp, #20]
 800a5a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a678 <_vfiprintf_r+0x22c>
 800a5a6:	7821      	ldrb	r1, [r4, #0]
 800a5a8:	2203      	movs	r2, #3
 800a5aa:	4650      	mov	r0, sl
 800a5ac:	f7f5 fe18 	bl	80001e0 <memchr>
 800a5b0:	b138      	cbz	r0, 800a5c2 <_vfiprintf_r+0x176>
 800a5b2:	9b04      	ldr	r3, [sp, #16]
 800a5b4:	eba0 000a 	sub.w	r0, r0, sl
 800a5b8:	2240      	movs	r2, #64	@ 0x40
 800a5ba:	4082      	lsls	r2, r0
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	3401      	adds	r4, #1
 800a5c0:	9304      	str	r3, [sp, #16]
 800a5c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5c6:	4829      	ldr	r0, [pc, #164]	@ (800a66c <_vfiprintf_r+0x220>)
 800a5c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5cc:	2206      	movs	r2, #6
 800a5ce:	f7f5 fe07 	bl	80001e0 <memchr>
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	d03f      	beq.n	800a656 <_vfiprintf_r+0x20a>
 800a5d6:	4b26      	ldr	r3, [pc, #152]	@ (800a670 <_vfiprintf_r+0x224>)
 800a5d8:	bb1b      	cbnz	r3, 800a622 <_vfiprintf_r+0x1d6>
 800a5da:	9b03      	ldr	r3, [sp, #12]
 800a5dc:	3307      	adds	r3, #7
 800a5de:	f023 0307 	bic.w	r3, r3, #7
 800a5e2:	3308      	adds	r3, #8
 800a5e4:	9303      	str	r3, [sp, #12]
 800a5e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5e8:	443b      	add	r3, r7
 800a5ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5ec:	e76a      	b.n	800a4c4 <_vfiprintf_r+0x78>
 800a5ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5f2:	460c      	mov	r4, r1
 800a5f4:	2001      	movs	r0, #1
 800a5f6:	e7a8      	b.n	800a54a <_vfiprintf_r+0xfe>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	3401      	adds	r4, #1
 800a5fc:	9305      	str	r3, [sp, #20]
 800a5fe:	4619      	mov	r1, r3
 800a600:	f04f 0c0a 	mov.w	ip, #10
 800a604:	4620      	mov	r0, r4
 800a606:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a60a:	3a30      	subs	r2, #48	@ 0x30
 800a60c:	2a09      	cmp	r2, #9
 800a60e:	d903      	bls.n	800a618 <_vfiprintf_r+0x1cc>
 800a610:	2b00      	cmp	r3, #0
 800a612:	d0c6      	beq.n	800a5a2 <_vfiprintf_r+0x156>
 800a614:	9105      	str	r1, [sp, #20]
 800a616:	e7c4      	b.n	800a5a2 <_vfiprintf_r+0x156>
 800a618:	fb0c 2101 	mla	r1, ip, r1, r2
 800a61c:	4604      	mov	r4, r0
 800a61e:	2301      	movs	r3, #1
 800a620:	e7f0      	b.n	800a604 <_vfiprintf_r+0x1b8>
 800a622:	ab03      	add	r3, sp, #12
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	462a      	mov	r2, r5
 800a628:	4b12      	ldr	r3, [pc, #72]	@ (800a674 <_vfiprintf_r+0x228>)
 800a62a:	a904      	add	r1, sp, #16
 800a62c:	4630      	mov	r0, r6
 800a62e:	f7fc ff53 	bl	80074d8 <_printf_float>
 800a632:	4607      	mov	r7, r0
 800a634:	1c78      	adds	r0, r7, #1
 800a636:	d1d6      	bne.n	800a5e6 <_vfiprintf_r+0x19a>
 800a638:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a63a:	07d9      	lsls	r1, r3, #31
 800a63c:	d405      	bmi.n	800a64a <_vfiprintf_r+0x1fe>
 800a63e:	89ab      	ldrh	r3, [r5, #12]
 800a640:	059a      	lsls	r2, r3, #22
 800a642:	d402      	bmi.n	800a64a <_vfiprintf_r+0x1fe>
 800a644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a646:	f7fd fcb5 	bl	8007fb4 <__retarget_lock_release_recursive>
 800a64a:	89ab      	ldrh	r3, [r5, #12]
 800a64c:	065b      	lsls	r3, r3, #25
 800a64e:	f53f af1f 	bmi.w	800a490 <_vfiprintf_r+0x44>
 800a652:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a654:	e71e      	b.n	800a494 <_vfiprintf_r+0x48>
 800a656:	ab03      	add	r3, sp, #12
 800a658:	9300      	str	r3, [sp, #0]
 800a65a:	462a      	mov	r2, r5
 800a65c:	4b05      	ldr	r3, [pc, #20]	@ (800a674 <_vfiprintf_r+0x228>)
 800a65e:	a904      	add	r1, sp, #16
 800a660:	4630      	mov	r0, r6
 800a662:	f7fd f9d1 	bl	8007a08 <_printf_i>
 800a666:	e7e4      	b.n	800a632 <_vfiprintf_r+0x1e6>
 800a668:	0800ab10 	.word	0x0800ab10
 800a66c:	0800ab1a 	.word	0x0800ab1a
 800a670:	080074d9 	.word	0x080074d9
 800a674:	0800a429 	.word	0x0800a429
 800a678:	0800ab16 	.word	0x0800ab16

0800a67c <__swbuf_r>:
 800a67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a67e:	460e      	mov	r6, r1
 800a680:	4614      	mov	r4, r2
 800a682:	4605      	mov	r5, r0
 800a684:	b118      	cbz	r0, 800a68e <__swbuf_r+0x12>
 800a686:	6a03      	ldr	r3, [r0, #32]
 800a688:	b90b      	cbnz	r3, 800a68e <__swbuf_r+0x12>
 800a68a:	f7fd fb67 	bl	8007d5c <__sinit>
 800a68e:	69a3      	ldr	r3, [r4, #24]
 800a690:	60a3      	str	r3, [r4, #8]
 800a692:	89a3      	ldrh	r3, [r4, #12]
 800a694:	071a      	lsls	r2, r3, #28
 800a696:	d501      	bpl.n	800a69c <__swbuf_r+0x20>
 800a698:	6923      	ldr	r3, [r4, #16]
 800a69a:	b943      	cbnz	r3, 800a6ae <__swbuf_r+0x32>
 800a69c:	4621      	mov	r1, r4
 800a69e:	4628      	mov	r0, r5
 800a6a0:	f000 f82a 	bl	800a6f8 <__swsetup_r>
 800a6a4:	b118      	cbz	r0, 800a6ae <__swbuf_r+0x32>
 800a6a6:	f04f 37ff 	mov.w	r7, #4294967295
 800a6aa:	4638      	mov	r0, r7
 800a6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	6922      	ldr	r2, [r4, #16]
 800a6b2:	1a98      	subs	r0, r3, r2
 800a6b4:	6963      	ldr	r3, [r4, #20]
 800a6b6:	b2f6      	uxtb	r6, r6
 800a6b8:	4283      	cmp	r3, r0
 800a6ba:	4637      	mov	r7, r6
 800a6bc:	dc05      	bgt.n	800a6ca <__swbuf_r+0x4e>
 800a6be:	4621      	mov	r1, r4
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	f7ff fdc7 	bl	800a254 <_fflush_r>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d1ed      	bne.n	800a6a6 <__swbuf_r+0x2a>
 800a6ca:	68a3      	ldr	r3, [r4, #8]
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	60a3      	str	r3, [r4, #8]
 800a6d0:	6823      	ldr	r3, [r4, #0]
 800a6d2:	1c5a      	adds	r2, r3, #1
 800a6d4:	6022      	str	r2, [r4, #0]
 800a6d6:	701e      	strb	r6, [r3, #0]
 800a6d8:	6962      	ldr	r2, [r4, #20]
 800a6da:	1c43      	adds	r3, r0, #1
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d004      	beq.n	800a6ea <__swbuf_r+0x6e>
 800a6e0:	89a3      	ldrh	r3, [r4, #12]
 800a6e2:	07db      	lsls	r3, r3, #31
 800a6e4:	d5e1      	bpl.n	800a6aa <__swbuf_r+0x2e>
 800a6e6:	2e0a      	cmp	r6, #10
 800a6e8:	d1df      	bne.n	800a6aa <__swbuf_r+0x2e>
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	f7ff fdb1 	bl	800a254 <_fflush_r>
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	d0d9      	beq.n	800a6aa <__swbuf_r+0x2e>
 800a6f6:	e7d6      	b.n	800a6a6 <__swbuf_r+0x2a>

0800a6f8 <__swsetup_r>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	4b29      	ldr	r3, [pc, #164]	@ (800a7a0 <__swsetup_r+0xa8>)
 800a6fc:	4605      	mov	r5, r0
 800a6fe:	6818      	ldr	r0, [r3, #0]
 800a700:	460c      	mov	r4, r1
 800a702:	b118      	cbz	r0, 800a70c <__swsetup_r+0x14>
 800a704:	6a03      	ldr	r3, [r0, #32]
 800a706:	b90b      	cbnz	r3, 800a70c <__swsetup_r+0x14>
 800a708:	f7fd fb28 	bl	8007d5c <__sinit>
 800a70c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a710:	0719      	lsls	r1, r3, #28
 800a712:	d422      	bmi.n	800a75a <__swsetup_r+0x62>
 800a714:	06da      	lsls	r2, r3, #27
 800a716:	d407      	bmi.n	800a728 <__swsetup_r+0x30>
 800a718:	2209      	movs	r2, #9
 800a71a:	602a      	str	r2, [r5, #0]
 800a71c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a720:	81a3      	strh	r3, [r4, #12]
 800a722:	f04f 30ff 	mov.w	r0, #4294967295
 800a726:	e033      	b.n	800a790 <__swsetup_r+0x98>
 800a728:	0758      	lsls	r0, r3, #29
 800a72a:	d512      	bpl.n	800a752 <__swsetup_r+0x5a>
 800a72c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a72e:	b141      	cbz	r1, 800a742 <__swsetup_r+0x4a>
 800a730:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a734:	4299      	cmp	r1, r3
 800a736:	d002      	beq.n	800a73e <__swsetup_r+0x46>
 800a738:	4628      	mov	r0, r5
 800a73a:	f7fe faad 	bl	8008c98 <_free_r>
 800a73e:	2300      	movs	r3, #0
 800a740:	6363      	str	r3, [r4, #52]	@ 0x34
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a748:	81a3      	strh	r3, [r4, #12]
 800a74a:	2300      	movs	r3, #0
 800a74c:	6063      	str	r3, [r4, #4]
 800a74e:	6923      	ldr	r3, [r4, #16]
 800a750:	6023      	str	r3, [r4, #0]
 800a752:	89a3      	ldrh	r3, [r4, #12]
 800a754:	f043 0308 	orr.w	r3, r3, #8
 800a758:	81a3      	strh	r3, [r4, #12]
 800a75a:	6923      	ldr	r3, [r4, #16]
 800a75c:	b94b      	cbnz	r3, 800a772 <__swsetup_r+0x7a>
 800a75e:	89a3      	ldrh	r3, [r4, #12]
 800a760:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a768:	d003      	beq.n	800a772 <__swsetup_r+0x7a>
 800a76a:	4621      	mov	r1, r4
 800a76c:	4628      	mov	r0, r5
 800a76e:	f000 f883 	bl	800a878 <__smakebuf_r>
 800a772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a776:	f013 0201 	ands.w	r2, r3, #1
 800a77a:	d00a      	beq.n	800a792 <__swsetup_r+0x9a>
 800a77c:	2200      	movs	r2, #0
 800a77e:	60a2      	str	r2, [r4, #8]
 800a780:	6962      	ldr	r2, [r4, #20]
 800a782:	4252      	negs	r2, r2
 800a784:	61a2      	str	r2, [r4, #24]
 800a786:	6922      	ldr	r2, [r4, #16]
 800a788:	b942      	cbnz	r2, 800a79c <__swsetup_r+0xa4>
 800a78a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a78e:	d1c5      	bne.n	800a71c <__swsetup_r+0x24>
 800a790:	bd38      	pop	{r3, r4, r5, pc}
 800a792:	0799      	lsls	r1, r3, #30
 800a794:	bf58      	it	pl
 800a796:	6962      	ldrpl	r2, [r4, #20]
 800a798:	60a2      	str	r2, [r4, #8]
 800a79a:	e7f4      	b.n	800a786 <__swsetup_r+0x8e>
 800a79c:	2000      	movs	r0, #0
 800a79e:	e7f7      	b.n	800a790 <__swsetup_r+0x98>
 800a7a0:	20000198 	.word	0x20000198

0800a7a4 <_raise_r>:
 800a7a4:	291f      	cmp	r1, #31
 800a7a6:	b538      	push	{r3, r4, r5, lr}
 800a7a8:	4605      	mov	r5, r0
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	d904      	bls.n	800a7b8 <_raise_r+0x14>
 800a7ae:	2316      	movs	r3, #22
 800a7b0:	6003      	str	r3, [r0, #0]
 800a7b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7b6:	bd38      	pop	{r3, r4, r5, pc}
 800a7b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a7ba:	b112      	cbz	r2, 800a7c2 <_raise_r+0x1e>
 800a7bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7c0:	b94b      	cbnz	r3, 800a7d6 <_raise_r+0x32>
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	f000 f830 	bl	800a828 <_getpid_r>
 800a7c8:	4622      	mov	r2, r4
 800a7ca:	4601      	mov	r1, r0
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7d2:	f000 b817 	b.w	800a804 <_kill_r>
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d00a      	beq.n	800a7f0 <_raise_r+0x4c>
 800a7da:	1c59      	adds	r1, r3, #1
 800a7dc:	d103      	bne.n	800a7e6 <_raise_r+0x42>
 800a7de:	2316      	movs	r3, #22
 800a7e0:	6003      	str	r3, [r0, #0]
 800a7e2:	2001      	movs	r0, #1
 800a7e4:	e7e7      	b.n	800a7b6 <_raise_r+0x12>
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	4798      	blx	r3
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	e7e0      	b.n	800a7b6 <_raise_r+0x12>

0800a7f4 <raise>:
 800a7f4:	4b02      	ldr	r3, [pc, #8]	@ (800a800 <raise+0xc>)
 800a7f6:	4601      	mov	r1, r0
 800a7f8:	6818      	ldr	r0, [r3, #0]
 800a7fa:	f7ff bfd3 	b.w	800a7a4 <_raise_r>
 800a7fe:	bf00      	nop
 800a800:	20000198 	.word	0x20000198

0800a804 <_kill_r>:
 800a804:	b538      	push	{r3, r4, r5, lr}
 800a806:	4d07      	ldr	r5, [pc, #28]	@ (800a824 <_kill_r+0x20>)
 800a808:	2300      	movs	r3, #0
 800a80a:	4604      	mov	r4, r0
 800a80c:	4608      	mov	r0, r1
 800a80e:	4611      	mov	r1, r2
 800a810:	602b      	str	r3, [r5, #0]
 800a812:	f7f7 fc87 	bl	8002124 <_kill>
 800a816:	1c43      	adds	r3, r0, #1
 800a818:	d102      	bne.n	800a820 <_kill_r+0x1c>
 800a81a:	682b      	ldr	r3, [r5, #0]
 800a81c:	b103      	cbz	r3, 800a820 <_kill_r+0x1c>
 800a81e:	6023      	str	r3, [r4, #0]
 800a820:	bd38      	pop	{r3, r4, r5, pc}
 800a822:	bf00      	nop
 800a824:	200005e0 	.word	0x200005e0

0800a828 <_getpid_r>:
 800a828:	f7f7 bc74 	b.w	8002114 <_getpid>

0800a82c <__swhatbuf_r>:
 800a82c:	b570      	push	{r4, r5, r6, lr}
 800a82e:	460c      	mov	r4, r1
 800a830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a834:	2900      	cmp	r1, #0
 800a836:	b096      	sub	sp, #88	@ 0x58
 800a838:	4615      	mov	r5, r2
 800a83a:	461e      	mov	r6, r3
 800a83c:	da0d      	bge.n	800a85a <__swhatbuf_r+0x2e>
 800a83e:	89a3      	ldrh	r3, [r4, #12]
 800a840:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a844:	f04f 0100 	mov.w	r1, #0
 800a848:	bf14      	ite	ne
 800a84a:	2340      	movne	r3, #64	@ 0x40
 800a84c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a850:	2000      	movs	r0, #0
 800a852:	6031      	str	r1, [r6, #0]
 800a854:	602b      	str	r3, [r5, #0]
 800a856:	b016      	add	sp, #88	@ 0x58
 800a858:	bd70      	pop	{r4, r5, r6, pc}
 800a85a:	466a      	mov	r2, sp
 800a85c:	f000 f848 	bl	800a8f0 <_fstat_r>
 800a860:	2800      	cmp	r0, #0
 800a862:	dbec      	blt.n	800a83e <__swhatbuf_r+0x12>
 800a864:	9901      	ldr	r1, [sp, #4]
 800a866:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a86a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a86e:	4259      	negs	r1, r3
 800a870:	4159      	adcs	r1, r3
 800a872:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a876:	e7eb      	b.n	800a850 <__swhatbuf_r+0x24>

0800a878 <__smakebuf_r>:
 800a878:	898b      	ldrh	r3, [r1, #12]
 800a87a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a87c:	079d      	lsls	r5, r3, #30
 800a87e:	4606      	mov	r6, r0
 800a880:	460c      	mov	r4, r1
 800a882:	d507      	bpl.n	800a894 <__smakebuf_r+0x1c>
 800a884:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	6123      	str	r3, [r4, #16]
 800a88c:	2301      	movs	r3, #1
 800a88e:	6163      	str	r3, [r4, #20]
 800a890:	b003      	add	sp, #12
 800a892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a894:	ab01      	add	r3, sp, #4
 800a896:	466a      	mov	r2, sp
 800a898:	f7ff ffc8 	bl	800a82c <__swhatbuf_r>
 800a89c:	9f00      	ldr	r7, [sp, #0]
 800a89e:	4605      	mov	r5, r0
 800a8a0:	4639      	mov	r1, r7
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	f7fe fda6 	bl	80093f4 <_malloc_r>
 800a8a8:	b948      	cbnz	r0, 800a8be <__smakebuf_r+0x46>
 800a8aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8ae:	059a      	lsls	r2, r3, #22
 800a8b0:	d4ee      	bmi.n	800a890 <__smakebuf_r+0x18>
 800a8b2:	f023 0303 	bic.w	r3, r3, #3
 800a8b6:	f043 0302 	orr.w	r3, r3, #2
 800a8ba:	81a3      	strh	r3, [r4, #12]
 800a8bc:	e7e2      	b.n	800a884 <__smakebuf_r+0xc>
 800a8be:	89a3      	ldrh	r3, [r4, #12]
 800a8c0:	6020      	str	r0, [r4, #0]
 800a8c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8c6:	81a3      	strh	r3, [r4, #12]
 800a8c8:	9b01      	ldr	r3, [sp, #4]
 800a8ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a8ce:	b15b      	cbz	r3, 800a8e8 <__smakebuf_r+0x70>
 800a8d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	f000 f81d 	bl	800a914 <_isatty_r>
 800a8da:	b128      	cbz	r0, 800a8e8 <__smakebuf_r+0x70>
 800a8dc:	89a3      	ldrh	r3, [r4, #12]
 800a8de:	f023 0303 	bic.w	r3, r3, #3
 800a8e2:	f043 0301 	orr.w	r3, r3, #1
 800a8e6:	81a3      	strh	r3, [r4, #12]
 800a8e8:	89a3      	ldrh	r3, [r4, #12]
 800a8ea:	431d      	orrs	r5, r3
 800a8ec:	81a5      	strh	r5, [r4, #12]
 800a8ee:	e7cf      	b.n	800a890 <__smakebuf_r+0x18>

0800a8f0 <_fstat_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4d07      	ldr	r5, [pc, #28]	@ (800a910 <_fstat_r+0x20>)
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	4608      	mov	r0, r1
 800a8fa:	4611      	mov	r1, r2
 800a8fc:	602b      	str	r3, [r5, #0]
 800a8fe:	f7f7 fc71 	bl	80021e4 <_fstat>
 800a902:	1c43      	adds	r3, r0, #1
 800a904:	d102      	bne.n	800a90c <_fstat_r+0x1c>
 800a906:	682b      	ldr	r3, [r5, #0]
 800a908:	b103      	cbz	r3, 800a90c <_fstat_r+0x1c>
 800a90a:	6023      	str	r3, [r4, #0]
 800a90c:	bd38      	pop	{r3, r4, r5, pc}
 800a90e:	bf00      	nop
 800a910:	200005e0 	.word	0x200005e0

0800a914 <_isatty_r>:
 800a914:	b538      	push	{r3, r4, r5, lr}
 800a916:	4d06      	ldr	r5, [pc, #24]	@ (800a930 <_isatty_r+0x1c>)
 800a918:	2300      	movs	r3, #0
 800a91a:	4604      	mov	r4, r0
 800a91c:	4608      	mov	r0, r1
 800a91e:	602b      	str	r3, [r5, #0]
 800a920:	f7f7 fc70 	bl	8002204 <_isatty>
 800a924:	1c43      	adds	r3, r0, #1
 800a926:	d102      	bne.n	800a92e <_isatty_r+0x1a>
 800a928:	682b      	ldr	r3, [r5, #0]
 800a92a:	b103      	cbz	r3, 800a92e <_isatty_r+0x1a>
 800a92c:	6023      	str	r3, [r4, #0]
 800a92e:	bd38      	pop	{r3, r4, r5, pc}
 800a930:	200005e0 	.word	0x200005e0

0800a934 <_init>:
 800a934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a936:	bf00      	nop
 800a938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a93a:	bc08      	pop	{r3}
 800a93c:	469e      	mov	lr, r3
 800a93e:	4770      	bx	lr

0800a940 <_fini>:
 800a940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a942:	bf00      	nop
 800a944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a946:	bc08      	pop	{r3}
 800a948:	469e      	mov	lr, r3
 800a94a:	4770      	bx	lr
